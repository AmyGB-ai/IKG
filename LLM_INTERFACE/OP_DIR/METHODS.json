{
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/searchDB.py": [
        {
            "method_name": "pos",
            "method_begin": "def pos( res_ ):",
            "method_end": "return None",
            "range": [
                13,
                100
            ]
        }
    ],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/addtoDB.py": [
        {
            "method_name": "addToDB",
            "method_begin": "def addToDB():",
            "method_end": "db_utils.insertNewSignature( dd_ )",
            "range": [
                8,
                15
            ]
        }
    ],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py": [
        {
            "method_name": "is_date",
            "method_begin": "def is_date( input_str):",
            "method_end": "return None",
            "range": [
                14,
                18
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "process",
                    "method_defn": "def process( colNum, sheet, tbl ):",
                    "usage": [
                        "                dtVal_ = is_date( str( sheet.cell(row=rw, column=colNum).value ) )\n"
                    ]
                }
            ]
        },
        {
            "method_name": "convertToPandas",
            "method_begin": "def convertToPandas(self, tbl_)",
            "method_end": "NA",
            "range": [
                18,
                33
            ]
        },
        {
            "method_name": "process",
            "method_begin": "def process( colNum, sheet, tbl ):",
            "method_end": "return ( False, None, None )",
            "range": [
                33,
                54
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "findDateRange",
                    "method_defn": "def findDateRange( self, tbl ):",
                    "usage": [
                        "            results = process(col, self.sheet, tbl)\n"
                    ]
                }
            ]
        },
        {
            "method_name": "__init__",
            "method_begin": "def __init__(self, file_path, llm='LLAMA'):",
            "method_end": "self.query_fn_ = llama3",
            "range": [
                54,
                76
            ]
        },
        {
            "method_name": "findHeaderInfo",
            "method_begin": "NA",
            "method_end": "NA",
            "range": [
                76,
                82
            ]
        },
        {
            "method_name": "find_bounds",
            "method_begin": "def find_bounds( self, sheet, max_row, max_col, start_row , end_row ,start_col ,end_col ):",
            "method_end": "return start_row, end_row, start_col, end_col",
            "range": [
                82,
                121
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "find_tables",
                    "method_defn": "def find_tables(self, sheet):",
                    "usage": [
                        "        start_row, end_row, start_col, end_col = self.find_bounds( sheet, max_row, max_col, start_row ,\\\n",
                        "            start_row, end_row, start_col, end_col = self.find_bounds( sheet, max_row, max_col, end_row ,\\\n",
                        "            start_row, end_row, start_col, end_col = self.find_bounds( sheet, max_row, max_col, None ,\\\n"
                    ]
                }
            ]
        },
        {
            "method_name": "is_hdr_row_format",
            "method_begin": "def is_hdr_row_format( self, tbl_bound, sheet ):",
            "method_end": "return True",
            "range": [
                121,
                132
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "find_tables",
                    "method_defn": "def find_tables(self, sheet):",
                    "usage": [
                        "                if self.is_hdr_row_format( tmp_[ctr], sheet ) == False:\n"
                    ]
                }
            ]
        },
        {
            "method_name": "find_tables",
            "method_begin": "def find_tables(self, sheet):",
            "method_end": "## init star and end col to min and max",
            "range": [
                132,
                218
            ]
        },
        {
            "method_name": "findDateRange",
            "method_begin": "def findDateRange( self, tbl ):",
            "method_end": "return (None, None)",
            "range": [
                218,
                231
            ]
        },
        {
            "method_name": "findHeaderInfo",
            "method_begin": "def findHeaderInfo(self, tbl):",
            "method_end": "return col_frame_",
            "range": [
                231,
                253
            ]
        },
        {
            "method_name": "findHighVarianceColumns",
            "method_begin": "def findHighVarianceColumns( self, start_hdr_row_, sheet, tbl ):",
            "method_end": "return list( high_var_indices_ ), hdr_col_names_",
            "range": [
                253,
                312
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "returnSummary",
                    "method_defn": "def returnSummary( self, tbl ):",
                    "usage": [
                        "        high_variance_cols_, hdr_col_names_ = self.findHighVarianceColumns( start_hdr_row_, self.sheet, tbl )\n"
                    ]
                }
            ]
        },
        {
            "method_name": "returnSummary",
            "method_begin": "def returnSummary( self, tbl ):",
            "method_end": "return frame_, high_variance_cols_, list( set(hdr_col_names_) )",
            "range": [
                312,
                339
            ]
        },
        {
            "method_name": "findHdrRow",
            "method_begin": "def findHdrRow( self, tbl ):",
            "method_end": "NA",
            "range": [
                339,
                359
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "findHeaderInfo",
                    "method_defn": "def findHeaderInfo(self, tbl):",
                    "usage": [
                        "        hdr_row_start_ = self.findHdrRow( tbl )\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "returnSummary",
                    "method_defn": "def returnSummary( self, tbl ):",
                    "usage": [
                        "        frame_, transposed_frame_, start_hdr_row_ = '', '', self.findHdrRow( tbl )\n"
                    ]
                }
            ]
        },
        {
            "method_name": "createDBRec",
            "method_begin": "def createDBRec( self, summary_D, mode='NORM' ): ",
            "method_end": "return insertRec",
            "range": [
                359,
                385
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "mergeAndInsert",
                    "method_defn": "def mergeAndInsert(self, summary_D)",
                    "usage": [
                        "        rec_ = self.createDBRec( summary_D, 'NORM' )\n"
                    ]
                }
            ]
        },
        {
            "method_name": "mergeAndInsert",
            "method_begin": "def mergeAndInsert(self, summary_D)",
            "method_end": "NA",
            "range": [
                385,
                396
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "process_full_frame_",
                    "method_defn": "def process_full_frame_( self, full_frame_, summary_D ):",
                    "usage": [
                        "           self.mergeAndInsert( summary_D )\n"
                    ]
                }
            ]
        },
        {
            "method_name": "returnEntireSheet",
            "method_begin": "def returnEntireSheet( self, tbl_, sheet_name ): ",
            "method_end": "chunks_.append( frame_ )",
            "range": [
                396,
                438
            ]
        },
        {
            "method_name": "process_full_frame_",
            "method_begin": "def process_full_frame_( self, full_frame_, summary_D ):",
            "method_end": "return None",
            "range": [
                438,
                444
            ]
        },
        {
            "method_name": "read_excel_file",
            "method_begin": "def read_excel_file(self):",
            "method_end": "NA",
            "range": [
                444,
                76
            ]
        }
    ],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/createJsonFeats.py": [
        {
            "method_name": "blockPrint",
            "method_begin": "def blockPrint():",
            "method_end": "sys.stdout = open(os.devnull, 'w')",
            "range": [
                10,
                14
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/createJsonFeats.py",
                    "method_nm": "returnJsonFeat",
                    "method_defn": "def returnJsonFeat( src_0, src_raw ):",
                    "usage": [
                        "    blockPrint()    \n"
                    ]
                }
            ]
        },
        {
            "method_name": "enablePrint",
            "method_begin": "def enablePrint():",
            "method_end": "sys.stdout = sys.__stdout__",
            "range": [
                14,
                28
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/createJsonFeats.py",
                    "method_nm": "returnJsonFeat",
                    "method_defn": "def returnJsonFeat( src_0, src_raw ):",
                    "usage": [
                        "    enablePrint()\n"
                    ]
                }
            ]
        },
        {
            "method_name": "returnEmbed",
            "method_begin": "def returnEmbed( sent ): ",
            "method_end": "return json_obj['encoded_'], True",
            "range": [
                28,
                42
            ],
            "global_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/searchDB.py",
                    "method_nm": "pos",
                    "method_defn": "def pos( res_ ):",
                    "usage": [
                        "            hdr_info_D[ ( resD[ 'payload' ][ 'summary' ] ) ] = createJsonFeats.returnEmbed( resD['payload']['hdr_info'] )\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/addtoDB.py",
                    "method_nm": "addToDB",
                    "method_defn": "def addToDB():",
                    "usage": [
                        "            emb_ = createJsonFeats.returnEmbed( txt )\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "createDBRec",
                    "method_defn": "def createDBRec( self, summary_D, mode='NORM' ): ",
                    "usage": [
                        "        emb_ = createJsonFeats.returnEmbed( unified_key_ )\n"
                    ]
                }
            ]
        },
        {
            "method_name": "returnEmbed",
            "method_begin": "def returnEmbed( sent ): ",
            "method_end": "return json_obj['encoded_'], True",
            "range": [
                28,
                42
            ],
            "global_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/searchDB.py",
                    "method_nm": "pos",
                    "method_defn": "def pos( res_ ):",
                    "usage": [
                        "            hdr_info_D[ ( resD[ 'payload' ][ 'summary' ] ) ] = createJsonFeats.returnEmbed( resD['payload']['hdr_info'] )\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/addtoDB.py",
                    "method_nm": "addToDB",
                    "method_defn": "def addToDB():",
                    "usage": [
                        "            emb_ = createJsonFeats.returnEmbed( txt )\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "createDBRec",
                    "method_defn": "def createDBRec( self, summary_D, mode='NORM' ): ",
                    "usage": [
                        "        emb_ = createJsonFeats.returnEmbed( unified_key_ )\n"
                    ]
                }
            ]
        },
        {
            "method_name": "returnJsonFeat",
            "method_begin": "def returnJsonFeat( src_0, src_raw ):",
            "method_end": "return json_obj['encoded_'], key_tuple_",
            "range": [
                42,
                77
            ]
        }
    ],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/db_utils.py": [
        {
            "method_name": "returnBlankDBRec",
            "method_begin": "def returnBlankDBRec():",
            "method_end": "return dbRec_",
            "range": [
                10,
                30
            ]
        },
        {
            "method_name": "insertNewSignature",
            "method_begin": "def insertNewSignature( rec_ ):",
            "method_end": "return string",
            "range": [
                30,
                41
            ],
            "global_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/addtoDB.py",
                    "method_nm": "addToDB",
                    "method_defn": "def addToDB():",
                    "usage": [
                        "            db_utils.insertNewSignature( dd_ )\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/basic_generateXLMetaData.py",
                    "method_nm": "mergeAndInsert",
                    "method_defn": "def mergeAndInsert(self, summary_D)",
                    "usage": [
                        "        db_utils.insertNewSignature( rec_ )\n"
                    ]
                }
            ]
        },
        {
            "method_name": "updateSignature",
            "method_begin": "def updateSignature( rec_ ):",
            "method_end": "return string",
            "range": [
                41,
                52
            ]
        },
        {
            "method_name": "updateSignature",
            "method_begin": "def updateSignature( rec_ ):",
            "method_end": "return string",
            "range": [
                41,
                52
            ]
        },
        {
            "method_name": "searchSignature",
            "method_begin": "def searchSignature( rec_ ):",
            "method_end": "return json_obj",
            "range": [
                52,
                61
            ]
        }
    ],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/fetchLLMResponse.py": [
        {
            "method_name": "returnOpenAI_response",
            "method_begin": "def returnOpenAI_response( dataframe ):",
            "method_end": "return completion.choices[0].message.content",
            "range": [
                8,
                22
            ]
        }
    ],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py": [
        {
            "method_name": "xOverlap",
            "method_begin": "def xOverlap( val, pts, ref_val, ref_pts, dist_=150 ):",
            "method_end": "return False",
            "range": [
                8,
                19
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "findNeighBour",
                    "method_defn": "def findNeighBour(",
                    "usage": [
                        "          if xOverlap( nxtlinewd['text'], nxtlinewd['pts'], wd['text'], wd['pts'] ): \n",
                        "        if xOverlap( nxtlinewd['text'], nxtlinewd['pts'], curr_wd['text'], curr_wd['pts'] ):\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "findValNeighBour",
                    "method_defn": "def findValNeighBour(",
                    "usage": [
                        "          if xOverlap( nxtlinewd['text'], nxtlinewd['pts'], wd['text'], wd['pts'] ): \n",
                        "        if xOverlap( nxtlinewd['text'], nxtlinewd['pts'], curr_wd['text'], curr_wd['pts'] ):\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "neighContours",
                    "method_defn": "def neighContours(",
                    "usage": [
                        "        if xOverlap( txt1, pts1, 'NA', pts_, dist_=1000 ) and pts1[1] < pts_[1] and abs( pts1[1] - pts_[1]) > 10: \n",
                        "        elif xOverlap( txt1, pts1, 'NA', pts_, dist_=1000 ) and pts1[1] > pts_[1] and abs( pts1[1] - pts_[1]) > 10: \n",
                        "        if xOverlap( txt1, pts1, 'NA', pts_, dist_=1500 ) and pts1[1] < pts_[1] and abs( pts1[1] - pts_[1]) > 10: \n",
                        "        elif xOverlap( txt1, pts1, 'NA', pts_, dist_=1500 ) and pts1[1] > pts_[1] and abs( pts1[1] - pts_[1]) > 10: \n"
                    ]
                }
            ]
        },
        {
            "method_name": "findWdFeats",
            "method_begin": "def findWdFeats(local_[0])",
            "method_end": "NA",
            "range": [
                19,
                22
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "neighContours",
                    "method_defn": "def neighContours(",
                    "usage": [
                        "        x_vertical[ ctr ] = findWdFeats( xover_upper[ rev_[ctr] ][0] ).tolist()  \n",
                        "        x_vertical[ ctr+lower_neigh ] = findWdFeats( xover_lower[ rev_[ctr] ][0] ).tolist()  \n",
                        "        y_horizontal[ ctr ] = findWdFeats( yover_prev[ rev_[ctr] ][0] ).tolist()  \n",
                        "        y_horizontal[ ctr+rt_neigh ] = findWdFeats( yover_next[ rev_[ctr] ][0] ).tolist()  \n",
                        "      respFeat_[0:6] = findWdFeats( xover_upper[ key_ ][0] ).tolist()\n",
                        "      respFeat_[6:12] = findWdFeats( xover_lower[ key_ ][0] ).tolist()\n",
                        "        respFeat_[12:18] = findWdFeats( yover_next[ key_ ][0] ).tolist()\n",
                        "        respFeat_[12:18] = findWdFeats( conj_rt ).tolist()\n",
                        "        respFeat_[18:24] = findWdFeats( yover_prev[ key_ ][0] ).tolist()\n",
                        "        respFeat_[12:18] = findWdFeats( conj_lt ).tolist()\n"
                    ]
                }
            ]
        },
        {
            "method_name": "allNum",
            "method_begin": "def allNum(",
            "method_end": "return True",
            "range": [
                22,
                54
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "findValFeats",
                    "method_defn": "def findValFeats( refwd ):",
                    "usage": [
                        "    if allNum( txt.split()[-1] ) and len( txt.split()[-1] ) >= 4 and not\\\n",
                        "      ( ',' in txt or 'box' in txt.lower() ) and not allNum( txt.replace(' ','') ):\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "findWdFeats",
                    "method_defn": "def findWdFeats(",
                    "usage": [
                        "    if allNum( txt.split()[-1] ) and len( txt.split()[-1] ) >= 4 and not\\\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "findNeighBour",
                    "method_defn": "def findNeighBour(",
                    "usage": [
                        "    if ':' in curr_wd['text'] and allNum( curr_wd['text'].split(':')[-1] ):\n",
                        "            #print('POSSIBLE MONSIEUR->', curr_wd['text'], len( tmp_arr_[-1] ), allNum( tmp_arr_[-1] ) )\n",
                        "            if len( tmp_arr_[-1] ) >= 3 and allNum( tmp_arr_[-1] ):\n"
                    ]
                }
            ]
        },
        {
            "method_name": "euclid",
            "method_begin": "def euclid( refpts, pts, json_ ):",
            "method_end": "return distance.euclidean( refpts, pts )",
            "range": [
                54,
                62
            ]
        },
        {
            "method_name": "findValFeats",
            "method_begin": "def findValFeats( refwd ):",
            "method_end": "return returnFeats",
            "range": [
                62,
                99
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "findNeighBour",
                    "method_defn": "def findNeighBour(",
                    "usage": [
                        "          return ( True, nexttype, rt_wd, findValFeats( rt_wd  ) )\n",
                        "          return ( True, nexttype, neowd_, findValFeats( neowd_  ), neokey_ )\n",
                        "                return ( True, nexttype, neowd_, findValFeats( neowd_  ), neokey_ )\n",
                        "            return ( True, nexttype, nxtlinewd, findValFeats( nxtlinewd ) )\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "findValNeighBour",
                    "method_defn": "def findValNeighBour(",
                    "usage": [
                        "          return ( True, nexttype, lt_wd, findValFeats( lt_wd  ) )\n",
                        "            return ( True, nexttype, nxtlinewd, findValFeats( nxtlinewd ) )\n"
                    ]
                }
            ]
        },
        {
            "method_name": "findWdFeats",
            "method_begin": "def findWdFeats(",
            "method_end": "NA",
            "range": [
                99,
                138
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "neighContours",
                    "method_defn": "def neighContours(",
                    "usage": [
                        "        x_vertical[ ctr ] = findWdFeats( xover_upper[ rev_[ctr] ][0] ).tolist()  \n",
                        "        x_vertical[ ctr+lower_neigh ] = findWdFeats( xover_lower[ rev_[ctr] ][0] ).tolist()  \n",
                        "        y_horizontal[ ctr ] = findWdFeats( yover_prev[ rev_[ctr] ][0] ).tolist()  \n",
                        "        y_horizontal[ ctr+rt_neigh ] = findWdFeats( yover_next[ rev_[ctr] ][0] ).tolist()  \n",
                        "      respFeat_[0:6] = findWdFeats( xover_upper[ key_ ][0] ).tolist()\n",
                        "      respFeat_[6:12] = findWdFeats( xover_lower[ key_ ][0] ).tolist()\n",
                        "        respFeat_[12:18] = findWdFeats( yover_next[ key_ ][0] ).tolist()\n",
                        "        respFeat_[12:18] = findWdFeats( conj_rt ).tolist()\n",
                        "        respFeat_[18:24] = findWdFeats( yover_prev[ key_ ][0] ).tolist()\n",
                        "        respFeat_[12:18] = findWdFeats( conj_lt ).tolist()\n"
                    ]
                }
            ]
        },
        {
            "method_name": "findRaw",
            "method_begin": "def findRaw( ids, json_raw ):",
            "method_end": "return txtarr, ptsarr",
            "range": [
                138,
                194
            ]
        },
        {
            "method_name": "featNum",
            "method_begin": "def featNum( txt ):",
            "method_end": "return 1",
            "range": [
                194,
                215
            ],
            "local_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "findNeighBour",
                    "method_defn": "def findNeighBour(",
                    "usage": [
                        "        currtype, nexttype = featNum( curr_wd['text'] ), featNum( rt_wd['text'] )  \n",
                        "      currtype, nexttype = featNum( neokey_ ), featNum( neowd_['text'] ) \n",
                        "              currtype, nexttype = featNum( neokey_ ), featNum( neowd_['text'] ) \n",
                        "          currtype, nexttype = featNum( curr_wd['text'] ), featNum( nxtlinewd['text'] )\n"
                    ]
                },
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/findKeys.py",
                    "method_nm": "findValNeighBour",
                    "method_defn": "def findValNeighBour(",
                    "usage": [
                        "        currtype, nexttype = featNum( curr_wd['text'] ), featNum( lt_wd['text'] )  \n",
                        "          currtype, nexttype = featNum( curr_wd['text'] ), featNum( nxtlinewd['text'] )\n"
                    ]
                }
            ]
        },
        {
            "method_name": "findNeighBour",
            "method_begin": "def findNeighBour(",
            "method_end": "NA",
            "range": [
                215,
                295
            ]
        },
        {
            "method_name": "findValNeighBour",
            "method_begin": "def findValNeighBour(",
            "method_end": "NA",
            "range": [
                295,
                349
            ]
        },
        {
            "method_name": "neighContours",
            "method_begin": "def neighContours(",
            "method_end": "NA",
            "range": [
                349,
                447
            ]
        },
        {
            "method_name": "isNum",
            "method_begin": "def isNum( txt ):",
            "method_end": "return False",
            "range": [
                447,
                452
            ]
        },
        {
            "method_name": "processNeighbours",
            "method_begin": "def processNeighbours( json_, json_raw, fileNm ):",
            "method_end": "NA",
            "range": [
                452,
                22
            ],
            "global_uses": [
                {
                    "file_path": "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/createJsonFeats.py",
                    "method_nm": "returnJsonFeat",
                    "method_defn": "def returnJsonFeat( src_0, src_raw ):",
                    "usage": [
                        "    key_tuple_ = findKeys.processNeighbours( json_, json_raw, file_ )    \n"
                    ]
                }
            ]
        }
    ],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/firstpass.py": [
        {
            "method_name": "find_table_bounds",
            "method_begin": "def find_table_bounds(sheet):",
            "method_end": "return start_row, end_row, start_col, end_col",
            "range": [
                2,
                34
            ]
        }
    ],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/pca_test.py": [],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/query_gpt_via_groq.py": [
        {
            "method_name": "returnDocSummary",
            "method_begin": "def returnDocSummary( data_frame ):",
            "method_end": "return kk",
            "range": [
                14,
                32
            ]
        },
        {
            "method_name": "returnDocSummary",
            "method_begin": "def returnDocSummary( data_frame ):",
            "method_end": "return kk",
            "range": [
                14,
                32
            ]
        },
        {
            "method_name": "augmentHeaderInformation",
            "method_begin": "def augmentHeaderInformation( header_info_ ):",
            "method_end": "return kk",
            "range": [
                32,
                28
            ]
        }
    ],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/query_llama3_via_groq.py": [
        {
            "method_name": "returnDocSummary",
            "method_begin": "def returnDocSummary( data_frame, high_variance_cols_ ): ",
            "method_end": "return kk",
            "range": [
                14,
                40
            ]
        },
        {
            "method_name": "returnDocSummary",
            "method_begin": "def returnDocSummary( data_frame, high_variance_cols_ ): ",
            "method_end": "return kk",
            "range": [
                14,
                40
            ]
        },
        {
            "method_name": "augmentHeaderInformation",
            "method_begin": "def augmentHeaderInformation( header_info_ ): ",
            "method_end": "return kk",
            "range": [
                40,
                36
            ]
        }
    ],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/readSS.py": [
        {
            "method_name": "read_excel_file",
            "method_begin": "def read_excel_file(file_path):",
            "method_end": "finalJson_[ file_path.split('/')[-1] ] = localD",
            "range": [
                6,
                35
            ]
        }
    ],
    "/datadrive/IKG/LLM_INTERFACE/SRC_DIR/validate_search.py": []
}