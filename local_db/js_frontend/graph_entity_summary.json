{
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js": {
        "method_details_": [
            {
                "method_name": "i",
                "method_begin": "function i(r)",
                "method_end": "{if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "r"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addRectangleEndLines",
                "method_begin": "static addRectangleEndLines(t)",
                "method_end": "{t.horizontalPointsSelected.push({startX:t.startX,startY:t.startY+t.height,endX:t.startX+t.width,colour:t.colour}),t.verticalPointsSelected.push({startX:t.startX+t.width,startY:t.startY,endY:t.startY+t.height,colour:t.colour})}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortRectangleLines",
                "method_begin": "static sortRectangleLines(t)",
                "method_end": "{t.horizontalPointsSelected.sort((function(t,e){return t.startY-e.startY})),t.verticalPointsSelected.sort((function(t,e){return t.startX-e.startX}))}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "h",
                "method_begin": "NA",
                "method_end": "NA",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "(0,s.useEffect)(()=>{document.getElementById(\"canvas-wrap\");e.current.createCanvas(t.width,t.height)},[]),(0,s.useEffect)(()=>{},[t.scalingFactor]),s.default.createElement(s.Fragment,null,s.default.createElement(\"div\",{id:\"canvas-wrap\",style:c},t.children,s.default.createElement(\"canvas\",{id:\"canvas\",style:{width:t.width,position:\"absolute\",backgroundSize:\"100%\",cursor:\"grab\",backgroundRepeat:\"no-repeat\",backgroundPosition:\"0px 0px\",imageOrientation:\"from-image\",transform:\"rotate(0deg)\",backgroundImage:`url(${t.bgImage})`},onContextMenu:t=>{t.preventDefault(),t.stopPropagation()}})))",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUpMouseEvents",
                "method_begin": "setUpMouseEvents()",
                "method_end": "{this.canvas.addEventListener(\"mousedown\",this.mouseDown,!1),this.canvas.addEventListener(\"mouseup\",this.mouseUp,!1),this.canvas.addEventListener(\"mousemove\",this.mouseMove,!1),this.canvas.addEventListener(\"mouseout\",this.mouseOut,!1)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUpKeyboardEvents",
                "method_begin": "setUpKeyboardEvents()",
                "method_end": "{document.addEventListener(\"keydown\",t=>{\"Control\"==t.key?this.rectangleBoundaryValidator.setLineDeletionMode(!0):\"Shift\"!=t.key&&\"shift\"!=t.key||this.rectangleBoundaryValidator.setLineSelectionMode(!0)}),document.addEventListener(\"keyup\",t=>{\"Control\"==t.key?this.rectangleBoundaryValidator.setLineDeletionMode(!1):\"Shift\"!=t.key&&\"shift\"!=t.key||this.rectangleBoundaryValidator.setLineSelectionMode(!1)})}",
                "range": [
                    1,
                    1
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetActiveGridLineForDragging",
                "method_begin": "resetActiveGridLineForDragging()",
                "method_end": "{this.activeDragLine.line={verticalLine:null,horizontalLine:null},this.activeDragLine.gridStartX=0,this.activeDragLine.gridStartY=0,this.activeDragLine.gridEndX=0,this.activeDragLine.gridEndY=0}",
                "range": [
                    1,
                    1
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "drawInteractableGrids",
                "method_begin": "drawInteractableGrids(t)",
                "method_end": "{let e=t.offsetX,i=t.offsetY;this.rectangleCreationManager.getRectangles().forEach(r=>{let n=r.startX+r.width+this.canvas.offsetLeft,a=r.startY+r.height+this.canvas.offsetTop;this.topRightExpand||this.bottomRightExpand||this.bottomLeftExpand||this.move||this.rectangleBoundaryValidator.checkForMouseHoverOnGrid(r,e,i,t),this.rectangleBoundaryValidator.checkIfMouseOnCorner(e,i,t),this.render(r,n,a),this.rectangleCreationManager.getRectangles().length&&JSON.stringify(this.myRectangle)!=JSON.stringify(this.rectangleCreationManager.getRectangles()[0])&&(this.lineProperties.setNewData(this.rectangleCreationManager.getRectangles()[0],this.rectangleBoundaryValidator.isLineSelectionModeActive()),this.myRectangle=JSON.parse(JSON.stringify(this.rectangleCreationManager.getRectangles()[0])))})}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render(t,e,i)",
                "method_end": "{this.rectangleCreationManager.drawRectangleFromMouse(t,e,i),this.rectangleCreationManager.drawRectGridLines(t),1==this.rectangleCreationManager.getRectangles().length&&this.rectangleCreationManager.drawMoveButton(t)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "drawRectangleFromMouse",
                "method_begin": "drawRectangleFromMouse(t,e,i)",
                "method_end": "{t.width=e-this.canvas.offsetLeft-t.startX,t.height=i-this.canvas.offsetTop-t.startY,this.drawRectangleWithColour(t)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "drawRectangleWithColour",
                "method_begin": "drawRectangleWithColour(t)",
                "method_end": "{this.ctx.strokeStyle=t.colour,this.ctx.lineWidth=this.contextLineWidth,this.ctx.strokeRect(t.startX,t.startY,t.width,t.height)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "clearRegionFromCanvasContext",
                "method_begin": "clearRegionFromCanvasContext(t,e,i,r)",
                "method_end": "{this.ctx.clearRect(t,e,i,r)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i",
                    "r"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "drawRemoveTableButton",
                "method_begin": "drawRemoveTableButton(t)",
                "method_end": "{this.ctx.fillStyle=\"#424141\",t.startX<=t.endX&&t.startY<=t.endY?this.ctx.fillText(this.X_CHARACTER,t.startX+t.width-20,t.startY-10):t.startX<=t.endX&&t.startY>t.endY?this.ctx.fillText(this.X_CHARACTER,t.startX+t.width-20,t.endY-10):t.startX>t.endX&&t.startY<=t.endY?this.ctx.fillText(this.X_CHARACTER,t.startX-20,t.startY-10):t.startX>t.endX&&t.startY>t.endY&&this.ctx.fillText(this.X_CHARACTER,t.startX-20,t.endY-10)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "drawMoveButton",
                "method_begin": "drawMoveButton(t)",
                "method_end": "{}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "drawLineAtClickedGridBoundaryPosition",
                "method_begin": "drawLineAtClickedGridBoundaryPosition(t,e,i)",
                "method_end": "{let r=e.height+e.startY,n=e.width+e.startX,a=t.offsetX/e.scalingFactor,s=t.offsetY/e.scalingFactor,o=Math.abs(a-e.startX)<this.lineClickTolerance,l=Math.abs(a-n)<this.lineClickTolerance,c=Math.abs(s-e.startY)<this.lineClickTolerance,h=Math.abs(s-r)<this.lineClickTolerance;if(o||l)if(this.rectangles[0].horizontalPointsSelected&&this.rectangles[0].horizontalPointsSelected.length){let t=this.rectangles[0].horizontalPointsSelected.findIndex(t=>Math.round(t.startY)===s);t>-1?this.rectangles[0].horizontalPointsSelected.splice(t,1):i||this.addHorizontalLineAtMousePosition(e.startX,s,n,e)}else i||this.addHorizontalLineAtMousePosition(e.startX,s,n,e);else if(c||h)if(this.rectangles[0].verticalPointsSelected&&this.rectangles[0].verticalPointsSelected.length){let t=this.rectangles[0].verticalPointsSelected.findIndex(t=>Math.round(t.startX)===a);t>-1?this.rectangles[0].verticalPointsSelected.splice(t,1):this.addVerticalLineAtMousePosition(a,e.startY,r,e)}else this.addVerticalLineAtMousePosition(a,e.startY,r,e)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/e.scalingFactor,s=t.offsetY/e.scalingFactor,o=Math.abs(a-e.startX"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getRectangles",
                "method_begin": "getRectangles()",
                "method_end": "{return this.rectangles}",
                "range": [
                    1,
                    1
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addRectangle",
                "method_begin": "addRectangle(t)",
                "method_end": "{this.rectangles.push(t)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeRectangle",
                "method_begin": "removeRectangle(t)",
                "method_end": "{this.rectangles.splice(t,1)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "clearDownGrids",
                "method_begin": "clearDownGrids()",
                "method_end": "{this.rectangles=[]}",
                "range": [
                    1,
                    1
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "drawResizeSquare",
                "method_begin": "drawResizeSquare(t,e,i)",
                "method_end": "{this.ctx.fillStyle=i,this.ctx.beginPath(),this.ctx.arc(t,e,5,0,2*Math.PI),this.ctx.fill()}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "drawRectGridLines",
                "method_begin": "drawRectGridLines(t)",
                "method_end": "{t.horizontalPointsSelected.forEach(t=>{this.drawLineFromBoxBoundaryX(t,\"rect\")}),t.verticalPointsSelected.forEach(t=>{this.drawLineFromBoxBoundaryY(t,\"nohover\")}),this.drawResizeSquare(t.startX+t.width+this.ADD_WIDTH,t.startY-this.ADD_WIDTH,\"#157fff\"),this.drawResizeSquare(t.startX+t.width+this.ADD_WIDTH,t.startY+t.height,\"#157fff\"),this.drawResizeSquare(t.startX-this.ADD_WIDTH-this.ADD_WIDTH,t.startY-this.ADD_WIDTH,\"blue\")}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addVerticalLineAtMousePosition",
                "method_begin": "addVerticalLineAtMousePosition(t,e,i,n)",
                "method_end": "{let a={startX:r.RectangleManagerUtil.getShiftRateFromMousePosition(t,this.circleLineShiftSize),startY:e,endY:i,colour:n.colour};n.verticalPointsSelected.findIndex(t=>t.startX===a.startX)>-1||(n.verticalPointsSelected.push(a),this.drawLineFromBoxBoundaryY(a,\"nohover\"),n.undoLineList.push(!1))}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i",
                    "n"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addHorizontalLineAtMousePosition",
                "method_begin": "addHorizontalLineAtMousePosition(t,e,i,n)",
                "method_end": "{let a={startX:t,startY:r.RectangleManagerUtil.getShiftRateFromMousePosition(e,this.circleLineShiftSize),endX:i,colour:n.colour};n.horizontalPointsSelected.findIndex(t=>t.startY===a.startY)>-1||(n.horizontalPointsSelected.push(a),n.undoLineList.push(!0),this.drawLineFromBoxBoundaryX(a,\"rect\"))}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i",
                    "n"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteGridWhenRemoveButtonClicked",
                "method_begin": "deleteGridWhenRemoveButtonClicked(t,e)",
                "method_end": "{return!1}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "isMouseOnRemoveButtonForAnyGrid",
                "method_begin": "isMouseOnRemoveButtonForAnyGrid(t,e)",
                "method_end": "{let i=!1;return this.rectangleCreationManager.getRectangles().forEach(r=>{this.isMouseOnRemoveGridButton(r,t,e)&&(i=!0)}),i}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "isMouseOnMoveButtonForAnyGrid",
                "method_begin": "isMouseOnMoveButtonForAnyGrid(t,e)",
                "method_end": "{let i=!1;return this.rectangleCreationManager.getRectangles().forEach(r=>{this.isMouseOnMoveGridButton(r,t,e)&&(i=!0)}),i}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getRectForMouseOnBorder",
                "method_begin": "getRectForMouseOnBorder(t,e)",
                "method_end": "{return this.rectangleCreationManager.getRectangles().find(i=>this.checkForMouseOnBorderOfGrid(i,t,e))}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkForMouseHoverOnGrid",
                "method_begin": "checkForMouseHoverOnGrid(t,e,i,r)",
                "method_end": "{if(this.checkForMouseOnBorderOfGrid(t,e,i))this.showMouseCursorAsPointer(r,\"pointer\"),this.showCircleAndLineForMouseHoverOnBoundary(t,e,i,r);else if(this.isMouseOnRemoveGridButton(t,e,i))this.showMouseCursorAsPointer(r,\"pointer\");else{let n=this.findHorizontalLineIndexInGridFromMousePosition(t,e,i),a=this.findVerticalLineIndexInGridFromMousePosition(t,e,i);n!=this.NO_INDEX_FOUND||a!=this.NO_INDEX_FOUND?this.handleDeletionModeHoverAction(t,n,a,r):this.repaintLinesGridColouration(t)}}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i",
                    "r"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "repaintLinesGridColouration",
                "method_begin": "repaintLinesGridColouration(t)",
                "method_end": "{t.horizontalPointsSelected.forEach(e=>e.colour=t.colour),t.verticalPointsSelected.forEach(e=>e.colour=t.colour)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleDeletionModeHoverAction",
                "method_begin": "handleDeletionModeHoverAction(t,e,i,r)",
                "method_end": "{if(this.lineDeletionModeActive){if(e!=this.NO_INDEX_FOUND){t.horizontalPointsSelected[e].colour=\"#FF0000\"}else if(i!=this.NO_INDEX_FOUND){t.verticalPointsSelected[i].colour=\"#FF0000\"}this.showMouseCursorAsPointer(r,\"pointer\")}else this.showMouseCursorAsPointer(r,\"grab\")}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i",
                    "r"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "showMouseCursorAsPointer",
                "method_begin": "showMouseCursorAsPointer(t,e)",
                "method_end": "{t.target.style.cursor=e}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setLineDeletionMode",
                "method_begin": "setLineDeletionMode(t)",
                "method_end": "{this.lineDeletionModeActive=t}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setLineSelectionMode",
                "method_begin": "setLineSelectionMode(t)",
                "method_end": "{this.lineSelectionModeActive=t}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "isLineDeletionModeActive",
                "method_begin": "isLineDeletionModeActive()",
                "method_end": "{return this.lineDeletionModeActive}",
                "range": [
                    1,
                    1
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "isLineSelectionModeActive",
                "method_begin": "isLineSelectionModeActive()",
                "method_end": "{return this.lineSelectionModeActive}",
                "range": [
                    1,
                    1
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "previewCircleAndLineForBottomBorderOnHover",
                "method_begin": "previewCircleAndLineForBottomBorderOnHover(t,e,i,n,a)",
                "method_end": "{let s=-1,o=!1,l=this.rectangleCreationManager.getRectangles();if(l.length&&l[0].verticalPointsSelected&&l[0].verticalPointsSelected.length&&(s=l[0].verticalPointsSelected.findIndex(e=>Math.round(e.startX)===t),s>-1&&(o=!0)),o)return;let c=r.RectangleManagerUtil.getShiftRateFromMousePosition(t,this.circleLineShiftSize),h={startX:c,startY:e,endY:i,colour:n};this.rectangleCreationManager.drawSelectableCircleOnBoxBoundary(c,e,n),this.rectangleCreationManager.drawLineFromBoxBoundaryY(h,\"hover\")}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i",
                    "n",
                    "a"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "previewCircleAndLineForTopBorderOnHover",
                "method_begin": "previewCircleAndLineForTopBorderOnHover(t,e,i,n)",
                "method_end": "{let a=-1,s=!1,o=this.rectangleCreationManager.getRectangles();if(o.length&&o[0].verticalPointsSelected&&o[0].verticalPointsSelected.length&&(a=o[0].verticalPointsSelected.findIndex(e=>Math.round(e.startX)===t),a>-1&&(s=!0)),s)return;let l=r.RectangleManagerUtil.getShiftRateFromMousePosition(t,this.circleLineShiftSize),c={startX:l,startY:e,endY:i,colour:n};this.rectangleCreationManager.drawSelectableCircleOnBoxBoundary(l,e,n),this.rectangleCreationManager.drawLineFromBoxBoundaryY(c,\"hover\")}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i",
                    "n"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "previewCircleAndLineForRightBorderOnHover",
                "method_begin": "previewCircleAndLineForRightBorderOnHover(t,e,i,n,a)",
                "method_end": "{let s=-1,o=!1,l=this.rectangleCreationManager.getRectangles();if(l.length&&l[0].horizontalPointsSelected&&l[0].horizontalPointsSelected.length&&(s=l[0].horizontalPointsSelected.findIndex(e=>Math.round(e.startY)===t),s>-1&&(o=!0)),o)return;if(this.checkForNewTableRestriction())return;let c=r.RectangleManagerUtil.getShiftRateFromMousePosition(t,this.circleLineShiftSize),h={startX:e,startY:c,endX:i,colour:n};this.rectangleCreationManager.drawSelectableCircleOnBoxBoundary(i,c,n),this.rectangleCreationManager.drawLineFromBoxBoundaryX(h,\"hover\")}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i",
                    "n",
                    "a"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "previewCircleAndLineForLeftBorderOnHover",
                "method_begin": "previewCircleAndLineForLeftBorderOnHover(t,e,i,n)",
                "method_end": "{let a=-1,s=!1,o=this.rectangleCreationManager.getRectangles();if(o.length&&o[0].horizontalPointsSelected&&o[0].horizontalPointsSelected.length&&(a=o[0].horizontalPointsSelected.findIndex(e=>Math.round(e.startY)===t),a>-1&&(s=!0)),s)return;if(this.checkForNewTableRestriction())return;let l=r.RectangleManagerUtil.getShiftRateFromMousePosition(t,this.circleLineShiftSize),c={startX:e,startY:l,endX:i,colour:n};this.rectangleCreationManager.drawSelectableCircleOnBoxBoundary(e,l,n),this.rectangleCreationManager.drawLineFromBoxBoundaryX(c,\"hover\")}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i",
                    "n"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkForMouseOnBorderOfGrid",
                "method_begin": "checkForMouseOnBorderOfGrid(t,e,i)",
                "method_end": "{let r=t.startY*t.scalingFactor,n=t.startX*t.scalingFactor,a=t.height*t.scalingFactor+r,s=t.width*t.scalingFactor+n,o=Math.abs(e-n)<=this.lineClickTolerance||Math.abs(e-s)<=this.lineClickTolerance,l=Math.abs(i-r)<=this.lineClickTolerance||Math.abs(i-a)<=this.lineClickTolerance,c=e>n+5*t.scalingFactor&&e<s-5*t.scalingFactor,h=i>=r+5*t.scalingFactor&&i<=a-5*t.scalingFactor;return o&&h||l&&c}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkIfMouseExpandingOnRight",
                "method_begin": "checkIfMouseExpandingOnRight(t,e)",
                "method_end": "{let i=!1,r=this.rectangleCreationManager.getRectangles();return r.length&&(i=this.checkForMouseOnRightBorder(r[0],t,e)),i}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkIfMouseExpandingOnBottom",
                "method_begin": "checkIfMouseExpandingOnBottom(t,e)",
                "method_end": "{let i=!1,r=this.rectangleCreationManager.getRectangles();return r.length&&(i=this.checkForMouseOnBottomBorder(r[0],t,e)),i}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkForMouseOnRightBorder",
                "method_begin": "checkForMouseOnRightBorder(t,e,i)",
                "method_end": "{let r=t.startY,n=t.startX,a=t.height+r,s=t.width+n;return Math.abs(e-s)<=this.lineClickTolerance&&(i>=r&&i<=a)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkForMouseOnBottomBorder",
                "method_begin": "checkForMouseOnBottomBorder(t,e,i)",
                "method_end": "{let r=t.startY,n=t.startX,a=t.height+r,s=t.width+n;return Math.abs(i-a)<=this.lineClickTolerance&&(e>=n&&e<=s)}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkIfMouseOnCorner",
                "method_begin": "checkIfMouseOnCorner(t,e,i)",
                "method_end": "{let r=void 0,n=this.rectangleCreationManager.getRectangles();if(n.length){let a=n[0];this.checkCloseEnough(t,a.startX*a.scalingFactor+a.width*a.scalingFactor)&&this.checkCloseEnough(e,a.startY*a.scalingFactor)?(r=\"top-right\",this.showMouseCursorAsPointer(i,\"ne-resize\")):this.checkCloseEnough(t,a.startX*a.scalingFactor)&&this.checkCloseEnough(e,a.startY*a.scalingFactor)?(r=\"top-left\",this.showMouseCursorAsPointer(i,\"move\")):this.checkCloseEnough(t,a.startX*a.scalingFactor+a.width*a.scalingFactor)&&this.checkCloseEnough(e,a.startY*a.scalingFactor+a.height*a.scalingFactor)?(r=\"bottom-right\",this.showMouseCursorAsPointer(i,\"se-resize\")):this.checkCloseEnough(t,a.startX*a.scalingFactor)&&this.checkCloseEnough(e,a.startY*a.scalingFactor+a.height*a.scalingFactor)&&(r=\"bottom-left\")}return r}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkCloseEnough",
                "method_begin": "checkCloseEnough(t,e)",
                "method_end": "{return Math.abs(t-e)<this.ADD_WIDTH}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "buildTableRowsFromDrawnGrid",
                "method_begin": "buildTableRowsFromDrawnGrid(t,e,i)",
                "method_end": "{let r=t.childNodes;if(r.length>1)r.forEach(t=>this.buildTableRowsFromDrawnGrid(t,e,i));else if(1==r.length){let t=r[0],n=t.getBoundingClientRect(),a=n.left-this.canvasRect.left+window.scrollX,s=n.top-this.canvasRect.top+window.scrollY;this.isItemInsideBox(e,t,a,s)&&this.addGridItemToTable(a,s,e,i,t)}}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addGridItemToTable",
                "method_begin": "addGridItemToTable(t,e,i,r,n)",
                "method_end": "{let a=this.findGridPosition(t,e,i.horizontalPointsSelected,i.verticalPointsSelected),s=a[0],o=a[1];if(null!=r[s]){let t=r[s][o],e=\"\"!=t&&null!=t;r[s][o]=e?r[s][o]+\" \"+n.innerText:n.innerText}else r[s]=[]}",
                "range": [
                    1,
                    1
                ],
                "parameters": [
                    "t",
                    "e",
                    "i",
                    "r",
                    "n"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/react-grid-draw-ui/index.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/App.js": {
        "method_details_": [
            {
                "method_name": "App",
                "method_begin": "function App()",
                "method_end": ")",
                "range": [
                    12,
                    29
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/App.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/error",
                    "/>",
                    "/login",
                    "/>",
                    "/forgot-password",
                    "/>",
                    "/password/:token",
                    "/>",
                    "/home",
                    "/>",
                    "/*",
                    "/>",
                    "/Switch>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Auth.js": {
        "method_details_": [
            {
                "method_name": "Auth",
                "method_begin": "export const Auth = ({ component: Component, roles, ...rest }) => (",
                "method_end": ")",
                "range": [
                    6,
                    21
                ],
                "parameters": [
                    "{ component: Component, roles, ...rest }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Auth.js",
                "returnType": "<Redirect to={{ pathname: '/home/unauthorized' }} /> | <Component {...props} key={Date.now()} /> | <Redirect to={{ pathname: '/login', state: { initPath: props.location } }} />",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/home/unauthorized",
                    "/>",
                    "/>",
                    "//",
                    "/login",
                    "/>",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminHome.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = (headers) => {",
                "method_end": "}",
                "range": [
                    77,
                    88
                ],
                "parameters": [
                    "headers"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "(\n            <TableHead>\n                <TableRow>\n                    {serverHeaders.map((row, index) => (\n                        <TableCell key={'serverHeader' + index} className={classes.tableCellSuper}>{row.label}</TableCell>\n                    ))}\n                </TableRow>\n            </TableHead>\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item, type) => {",
                "method_end": "}",
                "range": [
                    90,
                    111
                ],
                "parameters": [
                    "item",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "msToHMS(item.ocrResponseInMs) | msToHMS(item.timeElapsed) | msToHMS(duration) | <TimeElapsed offsetTimestamp={stopwatchOffset} />",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//todays",
                    "//",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setFileForAction",
                "method_begin": "const setFileForAction = (row, index, status, data) => {",
                "method_end": "}",
                "range": [
                    113,
                    115
                ],
                "parameters": [
                    "row",
                    "index",
                    "status",
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelStatusChange",
                "method_begin": "const cancelStatusChange = () => {",
                "method_end": "}",
                "range": [
                    117,
                    119
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmStatusChange",
                "method_begin": "const confirmStatusChange = () => {",
                "method_end": "}",
                "range": [
                    121,
                    123
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (type, row, index) => {",
                "method_end": "}",
                "range": [
                    126,
                    164
                ],
                "parameters": [
                    "type",
                    "row",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "((pageNo - 1) * 100) + index + 1 | row.batchNumber | row.user && row.user.email | row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a') | row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a') | row.ocrRequestTime ? getTimeElapsed(row) : '-' | row.ocrResponseTime ? getTimeElapsed(row, 'ocrResponseTime') : '-' | (\n                    <SimpleButton label='Payload' style={{ marginLeft: '0' }} onClick={() => setFileForAction(row, index, 'OCR_PENDING', row.payloadObject)} />\n                ) | (\n                    <SimpleButton label='Force to failure' style={{ backgroundColor: '#fc525c', marginLeft: '0' }} onClick={() => setFileForAction(row, index, 'OCR_FAILED')} />\n                ) | row[`${type}`] !== undefined ? row[`${type}`] : '-'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    166,
                    171
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/admin-panel/logs/page/${pageNo",
                    "/home/admin-panel/logs/page/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderBatchSearch",
                "method_begin": "const renderBatchSearch = () => {",
                "method_end": "}",
                "range": [
                    173,
                    175
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "(<BatchSearch placeholder='Search by Batch ID' setSearchText={setSearchText} searchBatches={searchBatches} batchSearchText={batchSearchText} />)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    177,
                    188
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchBatches",
                "method_begin": "const searchBatches = (event) => {",
                "method_end": "}",
                "range": [
                    190,
                    197
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/admin-panel/logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    199,
                    226
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "(\n            adminStore.inProgress || totalLogs === 0 ? null :\n                <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                    <div className='colFlex flexCenter fullHeight bold'>\n                        Total Count: {totalLogs}\n                    </div>\n                    {totalLogs === 0  ? null :\n                        <div className='rowFlex'>\n                            <div className={classes.pgnDivider}>|</div>\n                            <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                                <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                            </div>\n                            <div className='colFlex flexCenter fullHeight'>\n                                {pageNo === 1 ? pageNo : ((pageNo - 1) * (100) + 1)}\n                                &nbsp; -&nbsp;\n                                {pageNo * 100 <= totalLogs ? (pageNo * 100) : totalLogs\n                                }\n                            </div>\n                            <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                                <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                            </div>\n                        </div>\n                    }\n\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refresh",
                "method_begin": "const refresh = () => {",
                "method_end": "}",
                "range": [
                    228,
                    232
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshCFiles",
                "method_begin": "const refreshCFiles = () => {",
                "method_end": "}",
                "range": [
                    234,
                    239
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AdminLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AutoScaleServer.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    17,
                    19
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AutoScaleServer.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChange",
                "method_begin": "const onChange = (val) => {",
                "method_end": "}",
                "range": [
                    21,
                    29
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AutoScaleServer.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    36,
                    40
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/AutoScaleServer.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/Card.js": {
        "method_details_": [
            {
                "method_name": "Card",
                "method_begin": "function Card({ id, name, index, fullWidth, equalWidth, moveCard, findCard, width, filter,item,  filtered, menuStyle, checkboxClass, align })",
                "method_end": ");",
                "range": [
                    47,
                    110
                ],
                "parameters": [
                    "{ id, name, index, fullWidth, equalWidth, moveCard, findCard, width, filter,item,  filtered, menuStyle, checkboxClass, align }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/Card.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>;",
                    "//",
                    "/div>",
                    "/></div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>}",
                    "/>}",
                    "//",
                    "//",
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/MenuItem>",
                    "/div>",
                    "/TableCell>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickFilter",
                "method_begin": "const onClickFilter = (e, type) => {",
                "method_end": "}",
                "range": [
                    53,
                    56
                ],
                "parameters": [
                    "e",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortList",
                "method_begin": "const sortList = (sortDirection, index, sortField) => {",
                "method_end": "}",
                "range": [
                    62,
                    64
                ],
                "parameters": [
                    "sortDirection",
                    "index",
                    "sortField"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/CreateEditServer.js": {
        "method_details_": [
            {
                "method_name": "handleServerChange",
                "method_begin": "const handleServerChange = (type, value) => {",
                "method_end": "}",
                "range": [
                    64,
                    67
                ],
                "parameters": [
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/CreateEditServer.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocFields",
                "method_begin": "const getDocFields = (index) => {",
                "method_end": "}",
                "range": [
                    70,
                    73
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/CreateEditServer.js",
                "returnType": "config.uploadTypes[index] && config.uploadTypes[index].mapping && config.uploadTypes[index].mapping.defaultFields ?\n            config.uploadTypes[index].mapping.defaultFields : []",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "disableSave",
                "method_begin": "const disableSave = () => {",
                "method_end": "}",
                "range": [
                    75,
                    109
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/CreateEditServer.js",
                "returnType": "disabled",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*if",
                    "/*if"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkTrialUserConditions",
                "method_begin": "const checkTrialUserConditions = () => {",
                "method_end": "}",
                "range": [
                    111,
                    151
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/CreateEditServer.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "saveMapping",
                "method_begin": "const saveMapping = () => {",
                "method_end": "}",
                "range": [
                    153,
                    199
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/CreateEditServer.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/^((https?:\\/\\/",
                    "/home/admin-panel/server-configuration",
                    "/home/admin-panel/server-configuration"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addKey",
                "method_begin": "const addKey = () => {",
                "method_end": "}",
                "range": [
                    201,
                    204
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/CreateEditServer.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addColumn",
                "method_begin": "const addColumn = () => {",
                "method_end": "}",
                "range": [
                    206,
                    209
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/CreateEditServer.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    211,
                    214
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/CreateEditServer.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/admin-panel/server-configuration"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderMappings",
                "method_begin": "const renderMappings = () => {",
                "method_end": "}",
                "range": [
                    216,
                    280
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/CreateEditServer.js",
                "returnType": "(\n            <div style={{ height: '100%', width: '90%' }}>\n                <div className={classes.mappingHeaders}>\n                    <div className={`${classes.ruleRow} mFont`} style={{ width: '10%' }}>Sl No.</div>\n                    <div className={`${classes.ruleRow} mFont`}>Key Name *</div>\n                    <div className={`${classes.ruleRow} mFont`} style={{ width: '65%' }}>Description</div>\n                    <div className={`${classes.ruleRow} mFont`} style={{ width: '30%' }}>Data type *</div>\n                    <div className={`${classes.ruleRow} mFont`} style={{ width: '8%' }}>\n                        <div className='colFlex flexCenter'>Mandatory</div>\n                        &nbsp;&nbsp;<Tooltip arrow placement='bottom' title={\"Check this box if the key is mandatory. Leaving it unchecked will make it an optional key.\"}><div className='colFlex flexCenter'><SvgIcon src={Images.info} /></div></Tooltip>\n                    </div>\n                </div>\n                <div className={classes.mappingForm} >\n                    {\n                        currentServer.mapping ? currentServer.mapping.map((row, index) => (\n                            <div key={index} className={classes.formRow}>\n                                <div style={{ width: '10%' }} className='mFont colFlex flexCenter'>\n                                    {index + 1}.\n                                </div>\n                                <div className={classes.rowField}>\n                                    <SimpleTextBox label='' placeholder='e.g. Date of Admission, Invoice Number' from='mapping' value={row.key} onChange={(e) => handleServerChange(index, 'key', e.target.value)} multiline={true} maxRows={1} />\n                                </div>\n                                <div className={classes.rowField} style={{ width: '65%' }}>\n                                    <SimpleTextBox placeholder=' e.g. Date when the bill was received , Transaction on the last business day of the month.' from='mapping' value={row.description} multiline={true} maxRows={1} onChange={(e) => handleServerChange(index, 'description', e.target.value)} />\n                                </div>\n                                <div className={classes.rowField} style={{ width: '30%' }}>\n                                    <SelectBox label={''} type='mapping' onChange={(e) => handleServerChange(index, 'dataType', e.target.value)}\n                                        value={row.dataType}\n                                        options={\n                                            ['string', 'date', 'alphanumeric', 'number'].map((field, fieldIndex) => (\n                                                <MenuItem key={'field' + index + fieldIndex} value={field} classes={{ selected: classes.selectedMenuItem }} className={classes.menuItem}>\n                                                    {field && modifyText(field)}\n                                                </MenuItem>\n                                            ))\n                                        }\n                                    />\n                                </div>\n                                <div className={classes.rowField} style={{ width: '8%', marginBottom: '0' }}>\n                                    <div className='fullHeight colFlex flexCenter' style={{ width: 'fit-content', marginLeft: '1vw' }}>\n                                        <Checkbox className={classes.checkbox}\n                                            checkedIcon={<CheckboxIcon checked={true} />}\n                                            checked={row.isRequired ? (row.isRequired.toString() === \"true\" ? true : false) : false}\n                                            icon={<CheckboxIcon checked={false} />}\n                                            onChange={(e, value) => handleServerChange(index, 'isRequired', value)}\n                                            color=\"primary\"\n                                            inputProps={{ classes: { root: classes.checkbox } }} />\n                                    </div>\n                                </div>\n                                <div className='colFlex flexCenter'><SvgIcon src={Images.delete} onClick={() => adminStore.deleteMappingKey(index)} /></div>\n                            </div>\n                        )) : null\n                    }\n\n                </div>\n                {currentServer.isDefaultDoc ? null :\n                    <div className='rowFlex'>\n                        <div style={{ width: currentServer.isTablePresent ? '90%' : '100%' }}> <div className={classes.addButton} onClick={addKey}>\n                            <div className='colFlex flexCenter'><SvgIcon src={Images.addValidation} /></div>\n                            <div className='colFlex flexCenter mFont'>Add Key</div>\n                        </div></div>\n                    </div>}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/></div></Tooltip>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/MenuItem>",
                    "/>",
                    "/div>",
                    "/>}",
                    "/>}",
                    "/>",
                    "/div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div></div>",
                    "/div>}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderColumnNames",
                "method_begin": "const renderColumnNames = () => {",
                "method_end": "}",
                "range": [
                    282,
                    308
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/CreateEditServer.js",
                "returnType": "(\n            <div style={{ height: '100%', width: '23%', marginLeft: '1%' }}>\n                <div className={classes.mappingHeaders}>\n                    <div className={`${classes.ruleRow} mFont`} style={{ width: '100%' }}>Columns *</div>\n                </div>\n                <div className={classes.mappingForm} >\n                    {\n                        currentServer.columns ? currentServer.columns.map((row, index) => (\n                            <div key={index + 'column'} className={classes.formRow}>\n                                <div className={classes.rowField} style={{ width: '100%' }}>\n                                    <SimpleTextBox disabled={currentServer.isDefaultDoc} label='' from='mapping' value={row} onChange={(e) => handleServerChange(index, 'columns', e.target.value)} multiline={true} maxRows={1} />\n                                </div>\n                                <div className='colFlex flexCenter'><SvgIcon src={Images.delete} onClick={() => adminStore.deleteColumn(index)} /></div>\n                            </div>\n                        )) : null\n                    }\n                </div>\n                {currentServer.isDefaultDoc ? null :\n                    <div className='rowFlex'>\n                        {currentServer.isTablePresent ?\n                            <div style={{ width: '100%', marginLeft: '1%' }}> <div className={classes.addButton} onClick={addColumn}>+ Add Column</div></div>\n                            : null}\n                    </div>}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/div></div>",
                    "/div>}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = (headers) => {",
                "method_end": "}",
                "range": [
                    68,
                    79
                ],
                "parameters": [
                    "headers"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "(\n            <TableHead>\n                <TableRow>\n                    {headers.map((row, index) => (\n                        <TableCell key={'serverHeader' + index} className={classes.tableCellSuper}>{row.label}</TableCell>\n                    ))}\n                </TableRow>\n            </TableHead>\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item, type) => {",
                "method_end": "}",
                "range": [
                    81,
                    102
                ],
                "parameters": [
                    "item",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "msToHMS(item.ocrResponseInMs) | msToHMS(item.timeElapsed) | msToHMS(duration) | <TimeElapsed offsetTimestamp={stopwatchOffset} />",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//todays",
                    "//",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setFileForAction",
                "method_begin": "const setFileForAction = (row, index, status) => {",
                "method_end": "}",
                "range": [
                    104,
                    106
                ],
                "parameters": [
                    "row",
                    "index",
                    "status"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelStatusChange",
                "method_begin": "const cancelStatusChange = () => {",
                "method_end": "}",
                "range": [
                    108,
                    110
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmStatusChange",
                "method_begin": "const confirmStatusChange = () => {",
                "method_end": "}",
                "range": [
                    112,
                    117
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (type, row, index) => {",
                "method_end": "}",
                "range": [
                    120,
                    159
                ],
                "parameters": [
                    "type",
                    "row",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "index + 1 | ((pageNo - 1) * 50) + index + 1 | row.batch && row.batch.name | row.user && row.user.email | row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a') | row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a') | row.ocrRequestTime ? getTimeElapsed(row) : '-' | row.ocrResponseTime ? getTimeElapsed(row, 'ocrResponseTime') : '-' | (\n                    <SimpleButton label='Retry' style={{ marginLeft: '0' }} onClick={() => setFileForAction(row, index, 'OCR_PENDING')} />\n                ) | (\n                    <SimpleButton label='Force to failure' style={{ backgroundColor: '#fc525c', marginLeft: '0' }} onClick={() => setFileForAction(row, index, 'OCR_FAILED')} />\n                ) | row[`${type}`] !== undefined ? row[`${type}`] : '-'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    161,
                    166
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/admin-panel/ocr-statistics/${ocrFilter}/${pageNo",
                    "/home/admin-panel/ocr-statistics/${ocrFilter}/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    168,
                    195
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "(\n            adminStore.inProgress || totalDocs === 0 ? null :\n                <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                    <div className='colFlex flexCenter fullHeight bold'>\n                        Total Count: {totalDocs}\n                    </div>\n                    {totalDocs === 0 || props.ocrFilter === 'OCR_INPROGRESS' ? null :\n                        <div className='rowFlex'>\n                            <div className={classes.pgnDivider}>|</div>\n                            <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                                <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                            </div>\n                            <div className='colFlex flexCenter fullHeight'>\n                                {pageNo === 1 ? pageNo : ((pageNo - 1) * (50) + 1)}\n                                &nbsp; -&nbsp;\n                                {pageNo * 50 <= totalDocs ? (pageNo * 50) : totalDocs\n                                }\n                            </div>\n                            <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                                <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                            </div>\n                        </div>\n                    }\n\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refresh",
                "method_begin": "const refresh = () => {",
                "method_end": "}",
                "range": [
                    197,
                    202
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshProgressFiles",
                "method_begin": "const refreshProgressFiles = () => {",
                "method_end": "}",
                "range": [
                    204,
                    209
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshCFiles",
                "method_begin": "const refreshCFiles = () => {",
                "method_end": "}",
                "range": [
                    211,
                    216
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleScroll",
                "method_begin": "const handleScroll = () => {",
                "method_end": "}",
                "range": [
                    218,
                    235
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/DocStatistics.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/OcrStatistics.js": {
        "method_details_": [
            {
                "method_name": "setFilter",
                "method_begin": "const setFilter = (row) => {",
                "method_end": "}",
                "range": [
                    144,
                    147
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/OcrStatistics.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/admin-panel/ocr-statistics/${row}/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderStats",
                "method_begin": "const renderStats = () => {",
                "method_end": "}",
                "range": [
                    150,
                    176
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/OcrStatistics.js",
                "returnType": "(\n            <div className={classes.statFlex}>\n                {\n                    Object.keys(stats).map((row, index) => (\n                        <div key={'ocrStats' + index} className={clsx({ [classes.healthCard]: true, [classes.activeCard]: row === ocrFilter })} onClick={() => setFilter(row)}>\n                            <div className='colFlex flexCenter'> <SvgIcon className={classes.icon} src={Images[stats[`${row}`].icon]} style={'width: 24; height: 24'} /></div>&nbsp;&nbsp;\n                            <div className='fullWidth lFont'>\n                                <div className='rowFlex spaceBetween'>\n                                    <div>\n                                        <div className='colFlex flexCenter semiBold'> {stats[`${row}`].label}</div>\n                                        <div className={'xsFont'}>{\n                                            row === 'OCR_QUEUE' ? '-':\n                                          (\n                                            row === 'CLASSIFICATION' ? abbreviateNumber((ocrStats.documentClassificationStatus && ocrStats.documentClassificationStatus.STARTED && ocrStats.documentClassificationStatus.STARTED.total) !== undefined ? ocrStats.documentClassificationStatus.STARTED.total : '0') :\n                                                ocrStats.documentsaiStatus[`${row}`] ? abbreviateNumber(ocrStats.documentsaiStatus[`${row}`].total) : '0'\n                                          )}</div>\n                                    </div>\n\n                                </div>\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/OcrStatus.js": {
        "method_details_": [
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    53,
                    55
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/OcrStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "saveWhiteListing",
                "method_begin": "const saveWhiteListing = () => {",
                "method_end": "}",
                "range": [
                    57,
                    83
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/OcrStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickDelete",
                "method_begin": "const onClickDelete = (index) => {",
                "method_end": "}",
                "range": [
                    85,
                    87
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/OcrStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setProcessingStatus",
                "method_begin": "const setProcessingStatus = () => {",
                "method_end": "}",
                "range": [
                    89,
                    97
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/OcrStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelKeyDialog",
                "method_begin": "const cancelKeyDialog = () => {",
                "method_end": "}",
                "range": [
                    99,
                    101
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/OcrStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelTenantChange",
                "method_begin": "const cancelTenantChange = () => {",
                "method_end": "}",
                "range": [
                    104,
                    106
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/OcrStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmTenantChange",
                "method_begin": "const confirmTenantChange = () => {",
                "method_end": "}",
                "range": [
                    108,
                    114
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/OcrStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ProcessingStatus.js": {
        "method_details_": [
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    50,
                    52
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ProcessingStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "saveWhiteListing",
                "method_begin": "const saveWhiteListing = () => {",
                "method_end": "}",
                "range": [
                    54,
                    80
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ProcessingStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickDelete",
                "method_begin": "const onClickDelete = (index) => {",
                "method_end": "}",
                "range": [
                    82,
                    84
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ProcessingStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setProcessingStatus",
                "method_begin": "const setProcessingStatus = () => {",
                "method_end": "}",
                "range": [
                    86,
                    94
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ProcessingStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelKeyDialog",
                "method_begin": "const cancelKeyDialog = () => {",
                "method_end": "}",
                "range": [
                    96,
                    98
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ProcessingStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/RequestFilters.js": {
        "method_details_": [
            {
                "method_name": "handleFilterChange",
                "method_begin": "const handleFilterChange=(value)=>{",
                "method_end": "}",
                "range": [
                    42,
                    45
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/RequestFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/admin-panel/requests/${value}/PENDING/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRadioFilters",
                "method_begin": "const renderRadioFilters = () => {",
                "method_end": "}",
                "range": [
                    47,
                    70
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/RequestFilters.js",
                "returnType": "(\n            <div className='rowFlex'  >\n                <FormControl component=\"fieldset\" style={{ width: '100%' }}>\n                    <RadioGroup\n                        aria-label=\"vType\"\n                        defaultValue=\"OCR\"\n                        name=\"radio-buttons-group\"\n                        className={classes.radioCont}\n                        value={requestFilter}\n                        onChange={(e) => handleFilterChange(e.target.value)}\n                    >\n                        {\n                            requestFilters.map((row, index) => (\n                                <FormControlLabel classes={{ label: `${classes.vRadio} mFont` }} className={classes.smallRadioButton} key={'vTypes' + index} value={row.value} control={<Radio color='primary' classes={{ root: classes.radioRoot }} />} label={row.label} />\n                            ))\n                        }\n                    </RadioGroup>\n                </FormControl>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/>",
                    "/RadioGroup>",
                    "/FormControl>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerDetails.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    51,
                    62
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerDetails.js",
                "returnType": "(\n            <TableHead>\n                <TableRow>\n                    {serverHeaders.map((row, index) => (\n                        <TableCell key={'serverHeader' + index}>{row.label}</TableCell>\n                    ))}\n                </TableRow>\n            </TableHead>\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerHealth.js": {
        "method_details_": [
            {
                "method_name": "renderServerHealth",
                "method_begin": "const renderServerHealth = () => {",
                "method_end": "}",
                "range": [
                    26,
                    49
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerHealth.js",
                "returnType": "(\n            <div className='rowFlex'>\n                {\n                    Object.keys(healthStatus).map((row, index) => (\n                        <div key={'healthStatus' + index} className={classes.healthCard}>\n                            <div className='colFlex flexCenter'> <SvgIcon className={classes.icon} src={healthStatus[row].status ? Images.serverUp : Images.serverDown} /></div>&nbsp;&nbsp;\n                            <div className='fullWidth lFont'>\n                                <div className='rowFlex spaceBetween'>\n                                    <div>\n                                        <div className='colFlex flexCenter semiBold'>  {healthStatus[row].name}</div>\n                                        <div className={'xsFont'}>{healthStatus[row].lastChecked && Moment(healthStatus[row].lastChecked).format('DD MMM YY, h:mm a')}</div>\n                                    </div>\n\n                                    <div className='colFlex flexCenter'><div className={`${healthStatus[row].status ? classes.serverUp : classes.serverDown} xsFont`}>{healthStatus[row].message}</div></div>\n                                </div>\n                            </div>\n                            {/*healthStatus[row].lastChecked*/}\n                        </div>\n                    ))\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div></div>",
                    "/div>",
                    "/div>",
                    "/*healthStatus[row].lastChecked*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js": {
        "method_details_": [
            {
                "method_name": "setBatchesPerPage",
                "method_begin": "const setBatchesPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    67,
                    70
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSortStart",
                "method_begin": "const onSortStart = (e) => {",
                "method_end": "}",
                "range": [
                    83,
                    85
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    105,
                    117
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    127,
                    129
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    131,
                    153
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} width={row.width} className={classes.tableHeader} align=\"left\">\n                                    {row.label}\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderProcessingStatus",
                "method_begin": "const renderProcessingStatus = (value) => {",
                "method_end": "}",
                "range": [
                    155,
                    166
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "(\n            // value < 100 ?\n            true ?\n                <div className={classes.processingLoader} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div> :\n                <div className={`${classes.processingLoader} ${classes.ocrComplete}`} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    168,
                    173
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/${pageNo",
                    "/home/configuration/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    175,
                    177
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchHeaders",
                "method_begin": "const setBatchHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    179,
                    181
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    183,
                    208
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalWorkflows}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (10) + 1)}\n                    -\n                    {pageNo * 10 <= totalWorkflows ? (pageNo * 10) : totalWorkflows\n                    }\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {/*<RowsPerPage value={10} setRowsPerPage={setBatchesPerPage} />*/}\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/*<RowsPerPage",
                    "/>*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatch",
                "method_begin": "const openBatch = (data) => {",
                "method_end": "}",
                "range": [
                    210,
                    218
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${data._id}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    220,
                    231
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickNewWorkflow",
                "method_begin": "const onClickNewWorkflow = () => {",
                "method_end": "}",
                "range": [
                    247,
                    250
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/input/new"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setWorkflowForDelete",
                "method_begin": "const setWorkflowForDelete = (index) => {",
                "method_end": "}",
                "range": [
                    252,
                    255
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    257,
                    265
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    267,
                    269
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header) => {",
                "method_end": "}",
                "range": [
                    271,
                    306
                ],
                "parameters": [
                    "row",
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "(<div>{row[`${header.name}`] && Moment(row[`${header.name}`]).format('DD MMM YY, h:mm a')}</div>) | (row.uploadedVia === undefined ?\n                    <div className={classes.uploadedVia}>\n                        <div><SvgIcon src={Images[`${uploadSources.upload.icon}`]} /></div>&nbsp;\n                        <div className='xsFont'>{uploadSources.upload.name}</div>\n                        {/*<div>{uploadSources[`${row.uploadedVia}`].type}</div>*/}\n                    </div>\n                    : null) | (\n                    <div className='rowFlex '>\n                        <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                            <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#33cb74' }} align=\"left\" width={row.processedPercentage + '%'} className={classes.percentageLine} />\n                            </div>\n                        </div>\n                        <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>\n                    </div>\n                ) | <div onClick={() => adminStore.exportXls(true, row._id)}\n                    className={clsx({ ['custom-btn btn-3']: true, [classes.disProcessBtn]: row.processedPercentage < 100, sFont: true })}><span style={{ padding: '1vh 1vw' }}>{row.exportedFromUpload ? 'Process Again' : 'Process Now'}</span></div> | <div className={classes.rowLink} onClick={() => openBatch(row)}>{row[`${header.name}`]}</div> | <div >{row.workFlow && row.workFlow.name}</div> | getTimeElapsed(row) | (<div>{row[`${header.name}`]}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span></div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickEdit",
                "method_begin": "const onClickEdit = (id) => {",
                "method_end": "}",
                "range": [
                    308,
                    311
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/input/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refresh",
                "method_begin": "const refresh = () => {",
                "method_end": "}",
                "range": [
                    314,
                    316
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmReboot",
                "method_begin": "const confirmReboot = () => {",
                "method_end": "}",
                "range": [
                    318,
                    323
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelReboot",
                "method_begin": "const cancelReboot = () => {",
                "method_end": "}",
                "range": [
                    325,
                    327
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerMappings.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    70,
                    92
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} width={row.width} className={classes.tableHeader} align=\"left\">\n                                    {row.label}\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderProcessingStatus",
                "method_begin": "const renderProcessingStatus = (value) => {",
                "method_end": "}",
                "range": [
                    94,
                    105
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "(\n            // value < 100 ?\n            true ?\n                <div className={classes.processingLoader} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div> :\n                <div className={`${classes.processingLoader} ${classes.ocrComplete}`} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    107,
                    112
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/${pageNo",
                    "/home/configuration/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    114,
                    116
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchHeaders",
                "method_begin": "const setBatchHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    118,
                    120
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setWorkflowForDelete",
                "method_begin": "const setWorkflowForDelete = (index) => {",
                "method_end": "}",
                "range": [
                    135,
                    138
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmRelease",
                "method_begin": "const confirmRelease = () => {",
                "method_end": "}",
                "range": [
                    140,
                    145
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmHold",
                "method_begin": "const confirmHold = () => {",
                "method_end": "}",
                "range": [
                    147,
                    152
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelRelease",
                "method_begin": "const cancelRelease = () => {",
                "method_end": "}",
                "range": [
                    154,
                    156
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelHold",
                "method_begin": "const cancelHold = () => {",
                "method_end": "}",
                "range": [
                    158,
                    160
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmReboot",
                "method_begin": "const confirmReboot = () => {",
                "method_end": "}",
                "range": [
                    162,
                    167
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelReboot",
                "method_begin": "const cancelReboot = () => {",
                "method_end": "}",
                "range": [
                    169,
                    171
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refresh",
                "method_begin": "const refresh = () => {",
                "method_end": "}",
                "range": [
                    173,
                    175
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelAutoScale",
                "method_begin": "const cancelAutoScale = () => {",
                "method_end": "}",
                "range": [
                    177,
                    179
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmAutoScale",
                "method_begin": "const confirmAutoScale = (servers) => {",
                "method_end": "}",
                "range": [
                    181,
                    187
                ],
                "parameters": [
                    "servers"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatusFilter.js": {
        "method_details_": [
            {
                "method_name": "handleStatusChange",
                "method_begin": "const handleStatusChange = (value) => {",
                "method_end": "}",
                "range": [
                    26,
                    28
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatusFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleAllocationChange",
                "method_begin": "const handleAllocationChange = (value) => {",
                "method_end": "}",
                "range": [
                    32,
                    34
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/ServerStatusFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeam.js": {
        "method_details_": [
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    54,
                    95
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeam.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "saveTeam",
                "method_begin": "const saveTeam = () => {",
                "method_end": "}",
                "range": [
                    98,
                    115
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeam.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-teams/all/${teamStore.pageNo}",
                    "/home/configuration/manage-teams/all/${teamStore.pageNo}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (type, value) => {",
                "method_end": "}",
                "range": [
                    117,
                    126
                ],
                "parameters": [
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeam.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSupervisors",
                "method_begin": "const setSupervisors = (val) => {",
                "method_end": "}",
                "range": [
                    128,
                    130
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeam.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCustomers",
                "method_begin": "const setCustomers = (val) => {",
                "method_end": "}",
                "range": [
                    132,
                    134
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeam.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setIndexers",
                "method_begin": "const setIndexers = (val, index, type) => {",
                "method_end": "}",
                "range": [
                    136,
                    146
                ],
                "parameters": [
                    "val",
                    "index",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeam.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addIndexer",
                "method_begin": "const addIndexer = () => {",
                "method_end": "}",
                "range": [
                    148,
                    152
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeam.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteIndexer",
                "method_begin": "const deleteIndexer = (index) => {",
                "method_end": "}",
                "range": [
                    154,
                    162
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeam.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*if(temp.length"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    165,
                    167
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeam.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-teams/all/${teamStore.pageNo}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getIndexerList",
                "method_begin": "const getIndexerList = (val) => {",
                "method_end": "}",
                "range": [
                    169,
                    173
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeam.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeamOld.js": {
        "method_details_": [
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    52,
                    82
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeamOld.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "saveTeam",
                "method_begin": "const saveTeam = () => {",
                "method_end": "}",
                "range": [
                    85,
                    102
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeamOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-teams-legacy/all/${teamStore.pageNo}",
                    "/home/configuration/manage-teams-legacy/all/${teamStore.pageNo}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (type, value) => {",
                "method_end": "}",
                "range": [
                    104,
                    113
                ],
                "parameters": [
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeamOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSupervisors",
                "method_begin": "const setSupervisors = (val) => {",
                "method_end": "}",
                "range": [
                    115,
                    117
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeamOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCustomers",
                "method_begin": "const setCustomers = (val) => {",
                "method_end": "}",
                "range": [
                    119,
                    121
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeamOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    126,
                    128
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CreateTeamOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-teams-legacy/all/${teamStore.pageNo}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CustomerInput.js": {
        "method_details_": [
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (value) => {",
                "method_end": "}",
                "range": [
                    95,
                    98
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/CustomerInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/IndexerInput.js": {
        "method_details_": [
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (value) => {",
                "method_end": "}",
                "range": [
                    93,
                    96
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/IndexerInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/MultiUserInput.js": {
        "method_details_": [
            {
                "method_name": "setChangedValue",
                "method_begin": "const setChangedValue = (val) => {",
                "method_end": "}",
                "range": [
                    101,
                    111
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/MultiUserInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "filterOptions",
                "method_begin": "const filterOptions = (options, state) => {",
                "method_end": "};",
                "range": [
                    116,
                    138
                ],
                "parameters": [
                    "options",
                    "state"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/MultiUserInput.js",
                "returnType": "results | results | results",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (value) => {",
                "method_end": "}",
                "range": [
                    140,
                    143
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/MultiUserInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/SingleSupInput.js": {
        "method_details_": [
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (value) => {",
                "method_end": "}",
                "range": [
                    112,
                    115
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/SingleSupInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/SupervisorInput.js": {
        "method_details_": [
            {
                "method_name": "onKeyDown",
                "method_begin": 6194,
                "method_end": 6416,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/SupervisorInput.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (value) => {",
                "method_end": "}",
                "range": [
                    100,
                    120
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/SupervisorInput.js",
                "returnType": "null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/SupervisorInputOld.js": {
        "method_details_": [
            {
                "method_name": "onKeyDown",
                "method_begin": 5861,
                "method_end": 6083,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/SupervisorInputOld.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (value) => {",
                "method_end": "}",
                "range": [
                    100,
                    116
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/SupervisorInputOld.js",
                "returnType": "null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamInput.js": {
        "method_details_": [
            {
                "method_name": "setChangedValue",
                "method_begin": "const setChangedValue = (val) => {",
                "method_end": "}",
                "range": [
                    107,
                    117
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "filterOptions",
                "method_begin": "const filterOptions = (options, state) => {",
                "method_end": "};",
                "range": [
                    122,
                    144
                ],
                "parameters": [
                    "options",
                    "state"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamInput.js",
                "returnType": "results | results | results",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (value) => {",
                "method_end": "}",
                "range": [
                    146,
                    149
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js": {
        "method_details_": [
            {
                "method_name": "setUsersPerPage",
                "method_begin": "const setUsersPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    57,
                    63
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-teams/all/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUserDetails",
                "method_begin": "const viewUserDetails = (item) => {",
                "method_end": "}",
                "range": [
                    65,
                    68
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    80,
                    82
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    102,
                    114
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    116,
                    118
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    120,
                    126
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    138,
                    176
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "(\n            <SortableHead axis=\"x\" distance={5} onSortEnd={onReorderEnd} >\n                {/*adminCheck() ?\n                    <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                        <Checkbox\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            checked={selectAllDocs}\n                            icon={<CheckboxIcon checked={false} />}\n                            onChange={(event, value) => onChangeSelectAll(event, value)}\n                            color=\"primary\"\n                            inputProps={{ classes: { root: classes.checkbox } }} />\n                    </TableCell> : null*/}\n                {\n                    teamHeaders.map((row, index) => (\n\n                        <Card\n                            index={index}\n                            item={row}\n                            filter={row.filter}\n                            filtered={getFilterStatus(row)}\n                            key={row.id} id={`${row.id}`}\n                            align={row.align}\n                            equalWidth={getWidth()}\n                            menuStyle={classes.filterMenu}\n                            checkboxClass={classes.checkbox}\n                            name={row.label} moveCard={moveCard} findCard={findCard} />\n\n                    ))\n                }\n                <TableCell align=\"left\" style={{ width: '5%' }}>Actions </TableCell>\n                { /*<TableCell align=\"left\" style={{ width: '5%' }}>\n                    <ColumnConfig headers={teamHeaders.filter(checkFilter)} onChange={onHeaderChange} />\n                </TableCell>*/}\n            </SortableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*adminCheck(",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/}",
                    "/>",
                    "/TableCell>",
                    "/*<TableCell",
                    "/>",
                    "/TableCell>*/}",
                    "/SortableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkFilter",
                "method_begin": "const checkFilter = (header) => {",
                "method_end": "}",
                "range": [
                    178,
                    180
                ],
                "parameters": [
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "!(header.disable.includes(trialFilter))",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    183,
                    188
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-teams/all/${pageNo",
                    "/home/configuration/manage-teams/all/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    190,
                    195
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    197,
                    220
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalTeams}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    Page {pageNo} of {Math.ceil(totalTeams / teamsPerPage)}\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={teamsPerPage} setRowsPerPage={setUsersPerPage} />\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    257,
                    259
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "Math.ceil(100 / teamHeaders.length) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    261,
                    332
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "(<div>{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.updatedAt && Moment(row.updatedAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.trialEndDate && Moment(row.trialEndDate).format('DD MMM YY, h:mm a')}</div>) | (<div>{((pageNo - 1) * teamsPerPage) + index + 1}</div>) | (<div>{row.reviewPercent}</div>) | (\n                    <div className={classes.docName} onClick={() => props.history.push(`/home/configuration/manage-teams/create/${row._id}`)}>\n                        <div data-tip data-for={'preview' + index} className={filterType === 'generic' ? '' : classes.rowLink} >{row[`${header.type}`]}</div>\n                    </div>\n                ) | (\n                    <div>\n                        <div data-tip data-for={'indexerArray' + index} className='rowFlex' style={{ flexWrap: 'wrap', width: 'fit-content' }}>\n                            {row.indexers ? row.indexers.length : 0}\n                            {/*row.indexerArray && row.indexerArray.map((row, index) => (\n                            <div key={row.email} className={classes.email}>{row.email}</div>\n                        ))*/}\n                        </div>\n                        {/* <ReactTooltip id={'indexerArray' + index} data-place='right' place='right' effect='solid'>\n                            <div className='rowFlex ' style={{ maxWidth: '200px', flexWrap: 'wrap' }}>\n                                {row.indexerArray && row.indexerArray.map((t, tind) => (\n                                    <div key={\"indexerName\" + tind + index} className={`${classes.teamNameTag} xsFont`}>{t.email + (tind + 1 === row.indexerArray.length ? '' : ',')}</div>\n                                ))}\n                            </div>\n                        </ReactTooltip>*/}\n                    </div>\n\n                ) | (\n                    <div>\n                        <div data-tip data-for={'customersArray' + index} className='rowFlex' style={{ flexWrap: 'wrap', width: 'fit-content' }}>\n                            {row.customers ? row.customers.length : 0}\n                            {/*row.indexerArray && row.indexerArray.map((row, index) => (\n                                <div key={row.email} className={classes.email}>{row.email}</div>\n                            ))*/}\n                        </div>\n                        {/* <ReactTooltip id={'customersArray' + index} data-place='right' place='right' effect='solid'>\n                            <div className='rowFlex ' style={{ maxWidth: '200px', flexWrap: 'wrap' , maxHeight: '200px'}}>\n                                {row.customersArray && row.customersArray.map((t, tind) => (\n                                    <div key={\"cusName\" + tind + index} className={`${classes.teamNameTag} xsFont`}>{t}</div>\n                                ))}\n                            </div>\n                        </ReactTooltip>*/}\n                    </div>\n\n                ) | (\n                    <div className='rowFlex' style={{ flexWrap: 'wrap' }}>\n                        {row.supervisors ? row.supervisors.length : 0}\n                        {/*row.superVisorId && row.superVisorId.map((row, index) => (\n                            <div key={row.email} className={classes.email}>{row.email}</div>\n                        ))*/}\n\n                    </div>\n                ) | (<div>{row[`${header.type}`] ? row[`${header.type}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/home/configuration/manage-teams/create/${row._id}",
                    "/div>",
                    "/div>",
                    "/*row.indexerArray",
                    "/div>",
                    "/}",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>",
                    "/ReactTooltip>*/}",
                    "/div>",
                    "/*row.indexerArray",
                    "/div>",
                    "/}",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>",
                    "/ReactTooltip>*/}",
                    "/div>",
                    "/*row.superVisorId",
                    "/div>",
                    "/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeTeamDialog",
                "method_begin": "const closeTeamDialog = () => {",
                "method_end": "}",
                "range": [
                    334,
                    337
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTeamForDelete",
                "method_begin": "const setTeamForDelete = (item) => {",
                "method_end": "}",
                "range": [
                    339,
                    342
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCreate",
                "method_begin": "const onClickCreate = () => {",
                "method_end": "}",
                "range": [
                    344,
                    347
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    349,
                    353
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteTeam",
                "method_begin": "const confirmDeleteTeam = () => {",
                "method_end": "}",
                "range": [
                    355,
                    366
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js": {
        "method_details_": [
            {
                "method_name": "setUsersPerPage",
                "method_begin": "const setUsersPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    57,
                    63
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-teams-legacy/all/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUserDetails",
                "method_begin": "const viewUserDetails = (item) => {",
                "method_end": "}",
                "range": [
                    65,
                    68
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    80,
                    82
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    102,
                    114
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    116,
                    118
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    120,
                    126
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    138,
                    176
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "(\n            <SortableHead axis=\"x\" distance={5} onSortEnd={onReorderEnd} >\n                {/*adminCheck() ?\n                    <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                        <Checkbox\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            checked={selectAllDocs}\n                            icon={<CheckboxIcon checked={false} />}\n                            onChange={(event, value) => onChangeSelectAll(event, value)}\n                            color=\"primary\"\n                            inputProps={{ classes: { root: classes.checkbox } }} />\n                    </TableCell> : null*/}\n                {\n                    oldTeamHeaders.map((row, index) => (\n\n                        <Card\n                            index={index}\n                            item={row}\n                            filter={row.filter}\n                            filtered={getFilterStatus(row)}\n                            key={row.id} id={`${row.id}`}\n                            align={row.align}\n                            equalWidth={getWidth()}\n                            menuStyle={classes.filterMenu}\n                            checkboxClass={classes.checkbox}\n                            name={row.label} moveCard={moveCard} findCard={findCard} />\n\n                    ))\n                }\n                <TableCell align=\"left\" style={{ width: '5%' }}>Actions </TableCell>\n                { /*<TableCell align=\"left\" style={{ width: '5%' }}>\n                    <ColumnConfig headers={oldTeamHeaders.filter(checkFilter)} onChange={onHeaderChange} />\n                </TableCell>*/}\n            </SortableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*adminCheck(",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/}",
                    "/>",
                    "/TableCell>",
                    "/*<TableCell",
                    "/>",
                    "/TableCell>*/}",
                    "/SortableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkFilter",
                "method_begin": "const checkFilter = (header) => {",
                "method_end": "}",
                "range": [
                    178,
                    180
                ],
                "parameters": [
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "!(header.disable.includes(trialFilter))",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    183,
                    188
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-teams-legacy/all/${pageNo",
                    "/home/configuration/manage-teams-legacy/all/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    190,
                    195
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    197,
                    220
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalTeams}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    Page {pageNo} of {Math.ceil(totalTeams / teamsPerPage)}\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={teamsPerPage} setRowsPerPage={setUsersPerPage} />\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    257,
                    259
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "Math.ceil(100 / oldTeamHeaders.length) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    261,
                    330
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "(<div>{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.updatedAt && Moment(row.updatedAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.trialEndDate && Moment(row.trialEndDate).format('DD MMM YY, h:mm a')}</div>) | (<div>{((pageNo - 1) * teamsPerPage) + index + 1}</div>) | (<div>{row.reviewPercent}</div>) | (\n                    <div className={classes.docName} onClick={() => props.history.push(`/home/configuration/manage-teams-legacy/create/${row._id}`)}>\n                        <div data-tip data-for={'preview' + index} className={filterType === 'generic' ? '' : classes.rowLink} >{row[`${header.type}`]}</div>\n                    </div>\n                ) | (\n                    <div>\n                        <div data-tip data-for={'indexerArray' + index} className='rowFlex' style={{ flexWrap: 'wrap', width: 'fit-content' }}>\n                            {row.indexerArray ? row.indexerArray.length : 0}\n                            {/*row.indexerArray && row.indexerArray.map((row, index) => (\n                            <div key={row.email} className={classes.email}>{row.email}</div>\n                        ))*/}\n                        </div>\n                        {/* <ReactTooltip id={'indexerArray' + index} data-place='right' place='right' effect='solid'>\n                            <div className='rowFlex ' style={{ maxWidth: '200px', flexWrap: 'wrap' }}>\n                                {row.indexerArray && row.indexerArray.map((t, tind) => (\n                                    <div key={\"indexerName\" + tind + index} className={`${classes.teamNameTag} xsFont`}>{t.email + (tind + 1 === row.indexerArray.length ? '' : ',')}</div>\n                                ))}\n                            </div>\n                        </ReactTooltip>*/}\n                    </div>\n\n                ) | (\n                    <div>\n                        <div data-tip data-for={'customersArray' + index} className='rowFlex' style={{ flexWrap: 'wrap', width: 'fit-content' }}>\n                            {row.customersArray ? row.customersArray.length : 0}\n                            {/*row.indexerArray && row.indexerArray.map((row, index) => (\n                                <div key={row.email} className={classes.email}>{row.email}</div>\n                            ))*/}\n                        </div>\n                        {/* <ReactTooltip id={'customersArray' + index} data-place='right' place='right' effect='solid'>\n                            <div className='rowFlex ' style={{ maxWidth: '200px', flexWrap: 'wrap' , maxHeight: '200px'}}>\n                                {row.customersArray && row.customersArray.map((t, tind) => (\n                                    <div key={\"cusName\" + tind + index} className={`${classes.teamNameTag} xsFont`}>{t}</div>\n                                ))}\n                            </div>\n                        </ReactTooltip>*/}\n                    </div>\n\n                ) | (\n                    <div className='rowFlex' style={{ flexWrap: 'wrap' }}>\n                        {row.superVisorId ? row.superVisorId.length : 0}\n                        \n\n                    </div>\n                ) | (<div>{row[`${header.type}`] ? row[`${header.type}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/home/configuration/manage-teams-legacy/create/${row._id}",
                    "/div>",
                    "/div>",
                    "/*row.indexerArray",
                    "/div>",
                    "/}",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>",
                    "/ReactTooltip>*/}",
                    "/div>",
                    "/*row.indexerArray",
                    "/div>",
                    "/}",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>",
                    "/ReactTooltip>*/}",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeTeamDialog",
                "method_begin": "const closeTeamDialog = () => {",
                "method_end": "}",
                "range": [
                    332,
                    335
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTeamForDelete",
                "method_begin": "const setTeamForDelete = (item) => {",
                "method_end": "}",
                "range": [
                    337,
                    340
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCreate",
                "method_begin": "const onClickCreate = () => {",
                "method_end": "}",
                "range": [
                    342,
                    345
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    347,
                    351
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteTeam",
                "method_begin": "const confirmDeleteTeam = () => {",
                "method_end": "}",
                "range": [
                    353,
                    360
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TeamMgmt/TeamListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js": {
        "method_details_": [
            {
                "method_name": "setUsersPerPage",
                "method_begin": "const setUsersPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    58,
                    64
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/admin-panel/requests/${requestFilter}/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUserDetails",
                "method_begin": "const viewUserDetails = (item) => {",
                "method_end": "}",
                "range": [
                    66,
                    71
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    82,
                    84
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    104,
                    116
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    118,
                    120
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    122,
                    128
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    140,
                    178
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "(\n            <SortableHead axis=\"x\" distance={5} onSortEnd={onReorderEnd} >\n                {adminCheck() ?\n                    <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                        <Checkbox\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            checked={selectAllDocs}\n                            icon={<CheckboxIcon checked={false} />}\n                            onChange={(event, value) => onChangeSelectAll(event, value)}\n                            color=\"primary\"\n                            inputProps={{ classes: { root: classes.checkbox } }} />\n                    </TableCell> : null}\n                {\n                    requestHeaders.map((row, index) => (\n                        (!row.selected || row.disable.includes(requestFilter)) ? null :\n                            <Card\n                                index={index}\n                                item={row}\n                                filter={row.filter}\n                                filtered={getFilterStatus(row)}\n                                key={row.id} id={`${row.id}`}\n                                align={row.align}\n                                equalWidth={getWidth()}\n                                menuStyle={classes.filterMenu}\n                                checkboxClass={classes.checkbox}\n                                width={row.width} name={row.label} moveCard={moveCard} findCard={findCard} />\n\n                    ))\n                }\n                {statusFilter === 'PENDING' ? <TableCell align=\"left\" style={{ width: '5%' }}>Actions </TableCell> : null}\n               {/* <TableCell align=\"left\" style={{ width: '5%' }}>\n                    <ColumnConfig headers={requestHeaders.filter(checkFilter)} onChange={onHeaderChange} />\n                </TableCell>*/}\n            </SortableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/>",
                    "/TableCell>",
                    "/*",
                    "/>",
                    "/TableCell>*/}",
                    "/SortableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkFilter",
                "method_begin": "const checkFilter = (header) => {",
                "method_end": "}",
                "range": [
                    180,
                    182
                ],
                "parameters": [
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "!(header.disable.includes(requestFilter))",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    185,
                    190
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/admin-panel/requests/${requestFilter}/${pageNo",
                    "/home/admin-panel/requests/${requestFilter}/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    192,
                    197
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    199,
                    225
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalUsers}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (usersPerPage) + 1)}\n                    -\n                    {pageNo * usersPerPage <= totalUsers ? (pageNo * usersPerPage) : totalUsers\n                    }\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={usersPerPage} setRowsPerPage={setUsersPerPage} />\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    302,
                    309
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "approveRequest",
                "method_begin": "const approveRequest = (item, index, type) => {",
                "method_end": "}",
                "range": [
                    311,
                    321
                ],
                "parameters": [
                    "item",
                    "index",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    323,
                    370
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "(<div>{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.trialEndDate && Moment(row.trialEndDate).format('DD MMM YY, h:mm a')}</div>) | (<div>{((pageNo - 1) * usersPerPage) + index + 1}</div>) | (\n                    //&& row.approvalDate === null\n                    !row.status && !row.isTrialAccountSuspended && requestFilter === 'requests' ?\n                        <div className='rowFlex' style={{ pointerEvents: createProgress ? 'none' : 'all' }}>\n                            <SimpleButton style={{ marginLeft: '0' }} progress={currentUser._id === row._id && approvalType === 'approve' && createProgress} label='Approve' onClick={(e) => approveRequest(row, index, 'approve')} />&nbsp;&nbsp;\n                            <SimpleButton progress={currentUser._id === row._id && approvalType === 'reject' && createProgress} label='Reject' onClick={(e) => approveRequest(row, index, 'reject')} />\n                        </div> :\n                        'Rejected'\n                ) | (\n                    <div className='rowFlex' data-tip={'increaseValidity' + index} data-for={'increaseValidity' + index}>\n                        {<input className={classes.trialInput} onChange={(e) => adminStore.handleTrialUserChange(index, 'increaseValidity', e.target.value)} type='number' value={row.increaseValidity} />} <div className='colFlex flexCenter'>days</div>\n                        {false ? <ReactTooltip id={'increaseValidity' + index}>Click on the lock icon to edit</ReactTooltip> : null}\n                    </div>) | (row.setting && row.setting.storageLimit >= 0 ?\n                    <div className='rowFlex' data-tip={'storageLimit' + index} data-for={'storageLimit' + index}>\n                        {<input className={classes.trialInput} onChange={(e) => adminStore.handleTrialUserChange(index, 'storageLimit', e.target.value)} type='number' value={row.setting.storageLimit} />}<div className='colFlex flexCenter'>MB</div>\n                    </div> : null) | (\n                    <div className='rowFlex' data-tip={'increaseLimit' + index} data-for={'increaseLimit' + index}>\n                        {<input className={classes.trialInput} onChange={(e) => adminStore.handleTrialUserChange(index, 'increaseLimit', e.target.value)} type='number' value={row.increaseLimit} />}<div className='colFlex flexCenter'>MB</div>\n                    </div>\n                ) | (row.setting && row.setting.storageUsed >= 0 ?\n                    <div>{row.setting.storageUsed} of <span className='bold'>{row.setting.storageLimit} MB</span> </div> : null) | (\n                    <div className={classes.docName} onClick={() => viewUserDetails(row)}>\n                        <div data-tip data-for={'preview' + index} className={filterType === 'generic' ? '' : classes.rowLink} >{row[`${header.type}`]}</div>\n                    </div>\n                ) | (<div>{row[`${header.type}`] ? row[`${header.type}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "//&&",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>}",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/>}<div",
                    "/div>",
                    "/div>",
                    "/>}<div",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUserDialog",
                "method_begin": "const closeUserDialog = () => {",
                "method_end": "}",
                "range": [
                    372,
                    375
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialRequestList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js": {
        "method_details_": [
            {
                "method_name": "setUsersPerPage",
                "method_begin": "const setUsersPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    57,
                    63
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/admin-panel/manageUsers/${trialFilter}/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUserDetails",
                "method_begin": "const viewUserDetails = (item) => {",
                "method_end": "}",
                "range": [
                    65,
                    70
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    81,
                    83
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    103,
                    115
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    117,
                    119
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    121,
                    127
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    139,
                    177
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "(\n            <SortableHead axis=\"x\" distance={5} onSortEnd={onReorderEnd} >\n                {adminCheck() ?\n                    <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                        <Checkbox\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            checked={selectAllDocs}\n                            icon={<CheckboxIcon checked={false} />}\n                            onChange={(event, value) => onChangeSelectAll(event, value)}\n                            color=\"primary\"\n                            inputProps={{ classes: { root: classes.checkbox } }} />\n                    </TableCell> : null}\n                {\n                    userHeaders.map((row, index) => (\n                        (!row.selected || row.disable.includes(trialFilter)) ? null :\n                            <Card\n                                index={index}\n                                item={row}\n                                filter={row.filter}\n                                filtered={getFilterStatus(row)}\n                                key={row.id} id={`${row.id}`}\n                                align={row.align}\n                                equalWidth={getWidth()}\n                                menuStyle={classes.filterMenu}\n                                checkboxClass={classes.checkbox}\n                                width={row.width} name={row.label} moveCard={moveCard} findCard={findCard} />\n\n                    ))\n                }\n                {trialFilter !== 'requests' ? <TableCell align=\"left\" style={{ width: '5%' }}>Actions </TableCell> : null}\n               { /*<TableCell align=\"left\" style={{ width: '5%' }}>\n                    <ColumnConfig headers={userHeaders.filter(checkFilter)} onChange={onHeaderChange} />\n                </TableCell>*/}\n            </SortableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/>",
                    "/TableCell>",
                    "/*<TableCell",
                    "/>",
                    "/TableCell>*/}",
                    "/SortableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkFilter",
                "method_begin": "const checkFilter = (header) => {",
                "method_end": "}",
                "range": [
                    179,
                    181
                ],
                "parameters": [
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "!(header.disable.includes(trialFilter))",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    184,
                    189
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/admin-panel/manageUsers/${trialFilter}/${pageNo",
                    "/home/admin-panel/manageUsers/${trialFilter}/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    191,
                    196
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    198,
                    224
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalUsers}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (usersPerPage) + 1)}\n                    -\n                    {pageNo * usersPerPage <= totalUsers ? (pageNo * usersPerPage) : totalUsers\n                    }\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={usersPerPage} setRowsPerPage={setUsersPerPage} />\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    303,
                    310
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "approveRequest",
                "method_begin": "const approveRequest = (item, index, type) => {",
                "method_end": "}",
                "range": [
                    312,
                    322
                ],
                "parameters": [
                    "item",
                    "index",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    324,
                    371
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "(<div>{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.trialEndDate && Moment(row.trialEndDate).format('DD MMM YY, h:mm a')}</div>) | (<div>{((pageNo - 1) * usersPerPage) + index + 1}</div>) | (\n                    //&& row.approvalDate === null\n                    !row.status && !row.isTrialAccountSuspended && trialFilter === 'requests' ?\n                        <div className='rowFlex' style={{ pointerEvents: createProgress ? 'none' : 'all' }}>\n                            <SimpleButton style={{ marginLeft: '0' }} progress={currentUser._id === row._id && approvalType === 'approve' && createProgress} label='Approve' onClick={(e) => approveRequest(row, index, 'approve')} />&nbsp;&nbsp;\n                            <SimpleButton progress={currentUser._id === row._id && approvalType === 'reject' && createProgress} label='Reject' onClick={(e) => approveRequest(row, index, 'reject')} />\n                        </div> :\n                        'Rejected'\n                ) | (\n                    <div className='rowFlex' data-tip={'increaseValidity' + index} data-for={'increaseValidity' + index}>\n                        {<input className={classes.trialInput} onChange={(e) => adminStore.handleTrialUserChange(index, 'increaseValidity', e.target.value)} type='number' value={row.increaseValidity} />} <div className='colFlex flexCenter'>days</div>\n                        {false ? <ReactTooltip id={'increaseValidity' + index}>Click on the lock icon to edit</ReactTooltip> : null}\n                    </div>) | (row.setting && row.setting.storageLimit >= 0 ?\n                    <div className='rowFlex' data-tip={'storageLimit' + index} data-for={'storageLimit' + index}>\n                        {<input className={classes.trialInput} onChange={(e) => adminStore.handleTrialUserChange(index, 'storageLimit', e.target.value)} type='number' value={row.setting.storageLimit} />}<div className='colFlex flexCenter'>MB</div>\n                    </div> : null) | (\n                    <div className='rowFlex' data-tip={'increaseLimit' + index} data-for={'increaseLimit' + index}>\n                        {<input className={classes.trialInput} onChange={(e) => adminStore.handleTrialUserChange(index, 'increaseLimit', e.target.value)} type='number' value={row.increaseLimit} />}<div className='colFlex flexCenter'>MB</div>\n                    </div>\n                ) | (row.setting && row.setting.storageUsed >= 0 ?\n                    <div>{row.setting.storageUsed} of <span className='bold'>{row.setting.storageLimit} MB</span> </div> : null) | (\n                    <div className={classes.docName} onClick={() => viewUserDetails(row)}>\n                        <div data-tip data-for={'preview' + index} className={filterType === 'generic' ? '' : classes.rowLink} >{row[`${header.type}`]}</div>\n                    </div>\n                ) | (<div>{row[`${header.type}`] ? row[`${header.type}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "//&&",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>}",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/>}<div",
                    "/div>",
                    "/div>",
                    "/>}<div",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUserDialog",
                "method_begin": "const closeUserDialog = () => {",
                "method_end": "}",
                "range": [
                    373,
                    376
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/TrialUserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserDetails.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    19,
                    22
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserDetails.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRequestDetails",
                "method_begin": "const renderRequestDetails = () => {",
                "method_end": "}",
                "range": [
                    26,
                    58
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserDetails.js",
                "returnType": "(\n            <DialogContent className='mFont'>\n                <div>\n                    <div className={classes.mappingRow} >\n                        <div className={classes.mappingKey}> Name</div>\n                        <div className={classes.mappingValue}> {user.firstName}</div>\n                    </div>\n                    <div className={classes.mappingRow} >\n                        <div className={classes.mappingKey}> Email</div>\n                        <div className={classes.mappingValue}> {user.email}</div>\n                    </div>\n                    <div className={classes.mappingRow} >\n                        <div className={classes.mappingKey}>Company</div>\n                        <div className={classes.mappingValue}> {user.companyName}</div>\n                    </div>\n                    <div className={classes.mappingRow} >\n                        <div className={classes.mappingKey}>Job Title</div>\n                        <div className={classes.mappingValue}> {user.jobTitle}</div>\n                    </div>\n                    <div className={classes.mappingRow} >\n                        <div className={classes.mappingKey}>Use Case</div>\n                        <div className={classes.mappingValue}> {user.useCase}</div>\n                    </div>\n\n                </div>\n                <br />\n                <div className={classes.buttonContainer}>\n                    <SimpleButton label='Close' onClick={props.onClose} />\n                </div>\n            </DialogContent>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/DialogContent>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserFilters.js": {
        "method_details_": [
            {
                "method_name": "handleFilterChange",
                "method_begin": "const handleFilterChange=(value)=>{",
                "method_end": "}",
                "range": [
                    42,
                    45
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/admin-panel/manageUsers/${value}/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRadioFilters",
                "method_begin": "const renderRadioFilters = () => {",
                "method_end": "}",
                "range": [
                    47,
                    70
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserFilters.js",
                "returnType": "(\n            <div className='rowFlex'  >\n                <FormControl component=\"fieldset\" style={{ width: '100%' }}>\n                    <RadioGroup\n                        aria-label=\"vType\"\n                        defaultValue=\"OCR\"\n                        name=\"radio-buttons-group\"\n                        className={classes.radioCont}\n                        value={trialFilter}\n                        onChange={(e) => handleFilterChange(e.target.value)}\n                    >\n                        {\n                            userFilters.map((row, index) => (\n                                <FormControlLabel classes={{ label: `${classes.vRadio} mFont` }} className={classes.smallRadioButton} key={'vTypes' + index} value={row.value} control={<Radio color='primary' classes={{ root: classes.radioRoot }} />} label={row.label} />\n                            ))\n                        }\n                    </RadioGroup>\n                </FormControl>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/>",
                    "/RadioGroup>",
                    "/FormControl>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUser.js": {
        "method_details_": [
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    29,
                    90
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUser.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*if"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    92,
                    109
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUser.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (type, value) => {",
                "method_end": "}",
                "range": [
                    137,
                    167
                ],
                "parameters": [
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUser.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSupervisors",
                "method_begin": "const setSupervisors = (val) => {",
                "method_end": "}",
                "range": [
                    169,
                    171
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUser.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTeamName",
                "method_begin": "const setTeamName = (val) => {",
                "method_end": "}",
                "range": [
                    173,
                    175
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUser.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setRandomPassword",
                "method_begin": "const setRandomPassword = () => {",
                "method_end": "}",
                "range": [
                    179,
                    181
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUser.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    183,
                    186
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUser.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUserOld.js": {
        "method_details_": [
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    29,
                    90
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUserOld.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    92,
                    109
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUserOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (type, value) => {",
                "method_end": "}",
                "range": [
                    137,
                    167
                ],
                "parameters": [
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUserOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSupervisors",
                "method_begin": "const setSupervisors = (val) => {",
                "method_end": "}",
                "range": [
                    169,
                    171
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUserOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTeamName",
                "method_begin": "const setTeamName = (val) => {",
                "method_end": "}",
                "range": [
                    173,
                    175
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUserOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setRandomPassword",
                "method_begin": "const setRandomPassword = () => {",
                "method_end": "}",
                "range": [
                    179,
                    181
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUserOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    183,
                    186
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/CreateEditUserOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/ResetUserPwd.js": {
        "method_details_": [
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    23,
                    35
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/ResetUserPwd.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    37,
                    46
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/ResetUserPwd.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleChange",
                "method_begin": "const handleChange = (type, value) => {",
                "method_end": "}",
                "range": [
                    63,
                    68
                ],
                "parameters": [
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/ResetUserPwd.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setRandomPassword",
                "method_begin": "const setRandomPassword = () => {",
                "method_end": "}",
                "range": [
                    70,
                    72
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/ResetUserPwd.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/RoleFilter.js": {
        "method_details_": [
            {
                "method_name": "handleRoleChange",
                "method_begin": "const handleRoleChange = (value) => {",
                "method_end": "}",
                "range": [
                    52,
                    56
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/RoleFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js": {
        "method_details_": [
            {
                "method_name": "setUsersPerPage",
                "method_begin": "const setUsersPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    71,
                    77
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-users/all/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUserDetails",
                "method_begin": "const viewUserDetails = (item) => {",
                "method_end": "}",
                "range": [
                    79,
                    85
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    97,
                    99
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    119,
                    131
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    133,
                    135
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    137,
                    143
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    155,
                    196
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow>\n\n                    {/*adminCheck() ?\n                    <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                        <Checkbox\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            checked={selectAllDocs}\n                            icon={<CheckboxIcon checked={false} />}\n                            onChange={(event, value) => onChangeSelectAll(event, value)}\n                            color=\"primary\"\n                            inputProps={{ classes: { root: classes.checkbox } }} />\n                    </TableCell> : null*/}\n                    {\n                        userHeaders.map((row, index) => (\n\n                            <Card\n                                index={index}\n                                item={row}\n                                filter={row.filter}\n                                filtered={getFilterStatus(row)}\n                                key={row.id} id={`${row.id}`}\n                                align={row.align}\n                                equalWidth={getWidth()}\n                                menuStyle={classes.filterMenu}\n                                checkboxClass={classes.checkbox}\n                                width={row.width} name={row.label} moveCard={moveCard} findCard={findCard} />\n\n                        ))\n                    }\n                    <TableCell align=\"left\" style={{ width: '5%' }}>Actions </TableCell>\n                    { /*<TableCell align=\"left\" style={{ width: '5%' }}>\n                    <ColumnConfig headers={userHeaders.filter(checkFilter)} onChange={onHeaderChange} />\n                </TableCell>*/}\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*adminCheck(",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/}",
                    "/>",
                    "/TableCell>",
                    "/*<TableCell",
                    "/>",
                    "/TableCell>*/}",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkFilter",
                "method_begin": "const checkFilter = (header) => {",
                "method_end": "}",
                "range": [
                    198,
                    200
                ],
                "parameters": [
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "!(header.disable.includes(trialFilter))",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    203,
                    208
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-users/all/${pageNo",
                    "/home/configuration/manage-users/all/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    210,
                    215
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    217,
                    240
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalUsers}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    Page {pageNo} of {Math.ceil(totalUsers / usersPerPage)}\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={usersPerPage} setRowsPerPage={setUsersPerPage} />\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    264,
                    271
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "approveRequest",
                "method_begin": "const approveRequest = (item, index, type) => {",
                "method_end": "}",
                "range": [
                    273,
                    283
                ],
                "parameters": [
                    "item",
                    "index",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getRoleName",
                "method_begin": "const getRoleName = (id) => {",
                "method_end": "}",
                "range": [
                    285,
                    293
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "roles[ind].role && userRoles[`${temp}`] && userRoles[`${temp}`].label",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    295,
                    338
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "(<div>{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.updatedAt && Moment(row.updatedAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{((pageNo - 1) * usersPerPage) + index + 1}</div>) | (\n                    <div className='rowFlex'>\n                        {row.teams && row.teams.length === 1 ? <div className={`${classes.teamName} sFont`} >{row.teams[0].teamName}</div> : (\n                            row.teams && row.teams.length > 1 ? <div className={'rowFlex'}><div className={`${classes.teamName} sFont`} >{row.teams[0].teamName}</div><div data-tip={'teamList' + index} data-for={'teamList' + index} className='colFlex flexCenter bold'>&nbsp;+{row.teams.length - 1}</div></div> : <div>-</div>\n                        )}\n\n                        <ReactTooltip id={'teamList' + index} data-place='right' place='right' effect='solid'>\n                            <div className='rowFlex' style={{ flexWrap: 'wrap', maxWidth: '200px' }}>\n                                {row.teams && row.teams.map((t, tind) => (\n                                    tind > 0 ?\n                                        <div key={\"teamName\" + tind + index} className={`${classes.teamNameTag} xsFont`}>{t.teamName}</div> : null\n                                ))}\n                            </div>\n                        </ReactTooltip>\n\n                    </div>\n\n                ) | (\n                    <div onClick={() => viewUserDetails(row)}>\n                        <div data-tip data-for={'preview' + index} className={filterType === 'generic' ? '' : classes.rowLink} >{row[`${header.type}`] + ' ' + (row.lastName ? row.lastName : '')}</div>\n                    </div>\n                ) | (\n                    <div >\n                        {row.roleId && getRoleName(row.roleId)}\n                    </div>\n                ) | (<div>{row[`${header.type}`] ? row[`${header.type}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div><div",
                    "/div></div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUserDialog",
                "method_begin": "const closeUserDialog = () => {",
                "method_end": "}",
                "range": [
                    340,
                    344
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setNewSupervisor",
                "method_begin": "const setNewSupervisor = (val) => {",
                "method_end": "}",
                "range": [
                    346,
                    356
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/her",
                    "/>",
                    "/>Please",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUserForDelete",
                "method_begin": "const setUserForDelete = (item) => {",
                "method_end": "}",
                "range": [
                    358,
                    380
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/her",
                    "/>",
                    "/>Please",
                    "/div>",
                    "/>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUserForReset",
                "method_begin": "const setUserForReset = (item) => {",
                "method_end": "}",
                "range": [
                    382,
                    387
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCreate",
                "method_begin": "const onClickCreate = () => {",
                "method_end": "}",
                "range": [
                    390,
                    393
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelReset",
                "method_begin": "const cancelReset = () => {",
                "method_end": "}",
                "range": [
                    395,
                    399
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    401,
                    408
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteUser",
                "method_begin": "const confirmDeleteUser = () => {",
                "method_end": "}",
                "range": [
                    410,
                    440
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*if",
                    "/her",
                    "/>",
                    "/>Please",
                    "/div>",
                    "/>",
                    "/>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmReset",
                "method_begin": "const confirmReset = () => {",
                "method_end": "}",
                "range": [
                    442,
                    447
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "allowDelete",
                "method_begin": "const allowDelete = (item) => {",
                "method_end": "}",
                "range": [
                    449,
                    462
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserList.js",
                "returnType": "false | false | true",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js": {
        "method_details_": [
            {
                "method_name": "setUsersPerPage",
                "method_begin": "const setUsersPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    71,
                    77
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-users/all/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUserDetails",
                "method_begin": "const viewUserDetails = (item) => {",
                "method_end": "}",
                "range": [
                    79,
                    85
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    97,
                    99
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    119,
                    131
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    133,
                    135
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    137,
                    143
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    155,
                    196
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "(\n            <TableHead>\n                <TableRow>\n\n                    {/*adminCheck() ?\n                    <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                        <Checkbox\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            checked={selectAllDocs}\n                            icon={<CheckboxIcon checked={false} />}\n                            onChange={(event, value) => onChangeSelectAll(event, value)}\n                            color=\"primary\"\n                            inputProps={{ classes: { root: classes.checkbox } }} />\n                    </TableCell> : null*/}\n                    {\n                        userHeaders.map((row, index) => (\n\n                            <Card\n                                index={index}\n                                item={row}\n                                filter={row.filter}\n                                filtered={getFilterStatus(row)}\n                                key={row.id} id={`${row.id}`}\n                                align={row.align}\n                                equalWidth={getWidth()}\n                                menuStyle={classes.filterMenu}\n                                checkboxClass={classes.checkbox}\n                                width={row.width} name={row.label} moveCard={moveCard} findCard={findCard} />\n\n                        ))\n                    }\n                    <TableCell align=\"left\" style={{ width: '5%' }}>Actions </TableCell>\n                    { /*<TableCell align=\"left\" style={{ width: '5%' }}>\n                    <ColumnConfig headers={userHeaders.filter(checkFilter)} onChange={onHeaderChange} />\n                </TableCell>*/}\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*adminCheck(",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/}",
                    "/>",
                    "/TableCell>",
                    "/*<TableCell",
                    "/>",
                    "/TableCell>*/}",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkFilter",
                "method_begin": "const checkFilter = (header) => {",
                "method_end": "}",
                "range": [
                    198,
                    200
                ],
                "parameters": [
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "!(header.disable.includes(trialFilter))",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    203,
                    208
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-users/all/${pageNo",
                    "/home/configuration/manage-users/all/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    210,
                    215
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    217,
                    240
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalUsers}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    Page {pageNo} of {Math.ceil(totalUsers / usersPerPage)}\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={usersPerPage} setRowsPerPage={setUsersPerPage} />\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    264,
                    271
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "approveRequest",
                "method_begin": "const approveRequest = (item, index, type) => {",
                "method_end": "}",
                "range": [
                    273,
                    283
                ],
                "parameters": [
                    "item",
                    "index",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getRoleName",
                "method_begin": "const getRoleName = (id) => {",
                "method_end": "}",
                "range": [
                    285,
                    293
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "roles[ind].role && userRoles[`${temp}`] && userRoles[`${temp}`].label",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    295,
                    338
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "(<div>{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.updatedAt && Moment(row.updatedAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{((pageNo - 1) * usersPerPage) + index + 1}</div>) | (\n                    <div className='rowFlex'>\n                        {row.teams && row.teams.length === 1 ? <div className={`${classes.teamName} sFont`} >{row.teams[0].teamName}</div> : (\n                            row.teams && row.teams.length > 1 ? <div className={'rowFlex'}><div className={`${classes.teamName} sFont`} >{row.teams[0].teamName}</div><div data-tip={'teamList' + index} data-for={'teamList' + index} className='colFlex flexCenter bold'>&nbsp;+{row.teams.length - 1}</div></div> : <div>-</div>\n                        )}\n\n                        <ReactTooltip id={'teamList' + index} data-place='right' place='right' effect='solid'>\n                            <div className='rowFlex' style={{ flexWrap: 'wrap', maxWidth: '200px' }}>\n                                {row.teams && row.teams.map((t, tind) => (\n                                    tind > 0 ?\n                                        <div key={\"teamName\" + tind + index} className={`${classes.teamNameTag} xsFont`}>{t.teamName}</div> : null\n                                ))}\n                            </div>\n                        </ReactTooltip>\n\n                    </div>\n\n                ) | (\n                    <div onClick={() => viewUserDetails(row)}>\n                        <div data-tip data-for={'preview' + index} className={filterType === 'generic' ? '' : classes.rowLink} >{row[`${header.type}`] + ' ' + (row.lastName ? row.lastName : '')}</div>\n                    </div>\n                ) | (\n                    <div >\n                        {row.roleId && getRoleName(row.roleId)}\n                    </div>\n                ) | (<div>{row[`${header.type}`] ? row[`${header.type}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div><div",
                    "/div></div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUserDialog",
                "method_begin": "const closeUserDialog = () => {",
                "method_end": "}",
                "range": [
                    340,
                    344
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setNewSupervisor",
                "method_begin": "const setNewSupervisor = (val) => {",
                "method_end": "}",
                "range": [
                    346,
                    356
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/her",
                    "/>",
                    "/>Please",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUserForDelete",
                "method_begin": "const setUserForDelete = (item) => {",
                "method_end": "}",
                "range": [
                    358,
                    380
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/her",
                    "/>",
                    "/>Please",
                    "/div>",
                    "/>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUserForReset",
                "method_begin": "const setUserForReset = (item) => {",
                "method_end": "}",
                "range": [
                    382,
                    387
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCreate",
                "method_begin": "const onClickCreate = () => {",
                "method_end": "}",
                "range": [
                    390,
                    393
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelReset",
                "method_begin": "const cancelReset = () => {",
                "method_end": "}",
                "range": [
                    395,
                    399
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    401,
                    408
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteUser",
                "method_begin": "const confirmDeleteUser = () => {",
                "method_end": "}",
                "range": [
                    410,
                    440
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/her",
                    "/>",
                    "/>Please",
                    "/div>",
                    "/>",
                    "/>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmReset",
                "method_begin": "const confirmReset = () => {",
                "method_end": "}",
                "range": [
                    442,
                    447
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "allowDelete",
                "method_begin": "const allowDelete = (item) => {",
                "method_end": "}",
                "range": [
                    449,
                    461
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserMgmt/UserListOld.js",
                "returnType": "false | false | true",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserSearch.js": {
        "method_details_": [
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    21,
                    37
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserSearch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-users/all/1",
                    "/home/admin-panel/manageUsers/${from",
                    "/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchDocs",
                "method_begin": "const searchDocs = (event) => {",
                "method_end": "}",
                "range": [
                    40,
                    54
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/UserSearch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/manage-users/all/1",
                    "/home/admin-panel/manageUsers/${from",
                    "/1"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js": {
        "method_details_": [
            {
                "method_name": "setBatchesPerPage",
                "method_begin": "const setBatchesPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    58,
                    61
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSortStart",
                "method_begin": "const onSortStart = (e) => {",
                "method_end": "}",
                "range": [
                    74,
                    76
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    96,
                    108
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    118,
                    120
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    122,
                    144
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} width={row.width} className={classes.tableHeader} align=\"left\">\n                                    {row.label}\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderProcessingStatus",
                "method_begin": "const renderProcessingStatus = (value) => {",
                "method_end": "}",
                "range": [
                    146,
                    157
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "(\n            // value < 100 ?\n            true ?\n                <div className={classes.processingLoader} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div> :\n                <div className={`${classes.processingLoader} ${classes.ocrComplete}`} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    159,
                    164
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/${pageNo",
                    "/home/configuration/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    166,
                    168
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchHeaders",
                "method_begin": "const setBatchHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    170,
                    172
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    174,
                    199
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalWorkflows}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (10) + 1)}\n                    -\n                    {pageNo * 10 <= totalWorkflows ? (pageNo * 10) : totalWorkflows\n                    }\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {/*<RowsPerPage value={10} setRowsPerPage={setBatchesPerPage} />*/}\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/*<RowsPerPage",
                    "/>*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatch",
                "method_begin": "const openBatch = (data) => {",
                "method_end": "}",
                "range": [
                    201,
                    209
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${data._id}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    211,
                    222
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickNewWorkflow",
                "method_begin": "const onClickNewWorkflow = () => {",
                "method_end": "}",
                "range": [
                    235,
                    238
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/input/new"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setWorkflowForDelete",
                "method_begin": "const setWorkflowForDelete = (index) => {",
                "method_end": "}",
                "range": [
                    240,
                    243
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    245,
                    253
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    255,
                    257
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header) => {",
                "method_end": "}",
                "range": [
                    259,
                    294
                ],
                "parameters": [
                    "row",
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "(<div>{row[`${header.name}`] && Moment(row[`${header.name}`]).format('DD MMM YY, h:mm a')}</div>) | (row.uploadedVia === undefined ?\n                    <div className={classes.uploadedVia}>\n                        <div><SvgIcon src={Images[`${uploadSources.upload.icon}`]} /></div>&nbsp;\n                        <div className='xsFont'>{uploadSources.upload.name}</div>\n                        {/*<div>{uploadSources[`${row.uploadedVia}`].type}</div>*/}\n                    </div>\n                    : null) | (\n                    <div className='rowFlex '>\n                        <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                            <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#33cb74' }} align=\"left\" width={row.processedPercentage + '%'} className={classes.percentageLine} />\n                            </div>\n                        </div>\n                        <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>\n                    </div>\n                ) | <div onClick={() => workflowStore.exportXls(true, row._id)}\n                    className={clsx({ ['custom-btn btn-3']: true, [classes.disProcessBtn]: row.processedPercentage < 100, sFont: true })}><span style={{ padding: '1vh 1vw' }}>{row.exportedFromUpload ? 'Process Again' : 'Process Now'}</span></div> | <div className={classes.rowLink} onClick={() => openBatch(row)}>{row[`${header.name}`]}</div> | <div >{row.workFlow && row.workFlow.name}</div> | getTimeElapsed(row) | (<div>{row[`${header.name}`]}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span></div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickEdit",
                "method_begin": "const onClickEdit = (id) => {",
                "method_end": "}",
                "range": [
                    296,
                    299
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/AdminPanel/WorkflowServerConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/input/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiBatchFilter.js": {
        "method_details_": [
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    40,
                    48
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiBatchFilter.js",
                "returnType": "`${batchList[i][type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleBatchChange",
                "method_begin": "const handleBatchChange = (value) => {",
                "method_end": "}",
                "range": [
                    76,
                    89
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiBatchFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/api/page/1/batch/${value}/passed",
                    "/home/document/api/page/1/batch/${value}/rejected",
                    "/home/document/api/page/1/batch/${value}/all",
                    "/home/document/api/page/1/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setIdentificationFilter",
                "method_begin": "const setIdentificationFilter = () => {",
                "method_end": "}",
                "range": [
                    91,
                    99
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiBatchFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/${from",
                    "/page/1/batch/${batchFilter}/all"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDetailedFilters.js": {
        "method_details_": [
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    46,
                    56
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDetailedFilters.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%` | '0%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUnidentifiedFiles",
                "method_begin": "const viewUnidentifiedFiles = () => {",
                "method_end": "}",
                "range": [
                    58,
                    65
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDetailedFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${batchFilter}/bucket"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleFilterChange",
                "method_begin": "const handleFilterChange = (value) => {",
                "method_end": "}",
                "range": [
                    67,
                    75
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDetailedFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/api/page/1/batch/${batchFilter}/all",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleRejectedFilterChange",
                "method_begin": "const handleRejectedFilterChange = (value) => {",
                "method_end": "}",
                "range": [
                    77,
                    92
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDetailedFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/api/page/1/batch/${batchFilter}/rejected",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getRejectedNumber",
                "method_begin": "const getRejectedNumber = () => {",
                "method_end": "}",
                "range": [
                    94,
                    102
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDetailedFilters.js",
                "returnType": "currentBatch.nonIdentified | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRadioFilters",
                "method_begin": "const renderRadioFilters = () => {",
                "method_end": "}",
                "range": [
                    105,
                    156
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDetailedFilters.js",
                "returnType": "(\n\n                <div className='rowFlex'>\n                    <FormControl component=\"fieldset\" style={{ width: '100%' }}>\n                        <RadioGroup\n                            aria-label=\"vType\"\n                            defaultValue=\"OCR\"\n                            name=\"radio-buttons-group\"\n                            className={classes.radioCont}\n                            value={feedbackFilter}\n                            onChange={(e) => handleRejectedFilterChange(e.target.value)}\n                        >\n                            {\n                                rejectedFilters.map((row, index) => (\n                                    <FormControlLabel classes={{ label: `${classes.vRadio} mFont` }} className={classes.smallRadioButton} key={'vTypes' + index} value={row.value} control={<Radio color='primary' classes={{ root: classes.radioRoot }} />}\n                                        label={index === 0 ?\n                                            <div className='rowFlex'><div>{row.label}</div>&nbsp;&nbsp;<Tooltip title={`Recommended by AI engine for feedback out of ${getRejectedNumber()} Rejected files`}><div className='colFlex flexCenter'><SvgIcon style='width: 15;height:15' src={Images.info} /></div></Tooltip></div>\n                                            : row.label}\n                                    />\n                                ))\n                            }\n                        </RadioGroup>\n                    </FormControl>\n                </div>\n            ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "/*",
                    "/>}",
                    "/>",
                    "/RadioGroup>",
                    "/FormControl>",
                    "/div>",
                    "/>}",
                    "/div>&nbsp;&nbsp;<Tooltip",
                    "/></div></Tooltip></div>",
                    "/>",
                    "/RadioGroup>",
                    "/FormControl>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    158,
                    166
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDetailedFilters.js",
                "returnType": "`${batchList[i][type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setIdentificationFilter",
                "method_begin": "const setIdentificationFilter = (type) => {",
                "method_end": "}",
                "range": [
                    168,
                    194
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDetailedFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//viewUnidentifiedFiles(",
                    "//return",
                    "/home/document/api/page/1/batch/${batchFilter}/passed",
                    "/home/document/api/page/1/batch/${batchFilter}/rejected",
                    "/home/document/api/page/1/batch/${batchFilter}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTooltip",
                "method_begin": "const getTooltip = (type) => {",
                "method_end": "}",
                "range": [
                    196,
                    200
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDetailedFilters.js",
                "returnType": "'We are still working. Please review the Passed Files while we fetch the Rejected Files' | ''",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocActions.js": {
        "method_details_": [
            {
                "method_name": "deleteDocs",
                "method_begin": "const deleteDocs = () => {",
                "method_end": "}",
                "range": [
                    23,
                    28
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    30,
                    37
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = () => {",
                "method_end": "}",
                "range": [
                    38,
                    48
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocActions.js",
                "returnType": "batchList[i].processedPercentage | 0 | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    50,
                    52
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocs",
                "method_begin": "const exportDocs = () => {",
                "method_end": "}",
                "range": [
                    54,
                    65
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadDocs",
                "method_begin": "const downloadDocs = () => {",
                "method_end": "}",
                "range": [
                    67,
                    72
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTriggerStyles",
                "method_begin": "const getTriggerStyles = () => {",
                "method_end": "}",
                "range": [
                    74,
                    78
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocActions.js",
                "returnType": "'stroke: ##666666' | 'stroke: #e5e5e5'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "triggerAiProcess",
                "method_begin": "const triggerAiProcess = () => {",
                "method_end": "}",
                "range": [
                    80,
                    84
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "giveFeedback",
                "method_begin": "const giveFeedback = () => {",
                "method_end": "}",
                "range": [
                    86,
                    93
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/training/api/${feedbackFilter",
                    "/batch/${batchId}/${documentList[0]._id}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocFilters.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocHome.js": {
        "method_details_": [
            {
                "method_name": "refreshPage",
                "method_begin": "const refreshPage = () => {",
                "method_end": "}",
                "range": [
                    105,
                    153
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//apiStore.selectTableHeader(false,",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    155,
                    162
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocHome.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js": {
        "method_details_": [
            {
                "method_name": "setDocsPerPage",
                "method_begin": "const setDocsPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    57,
                    80
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/${batchFilter}/all",
                    "/${batchFilter}/passed",
                    "/${batchFilter}/rejected",
                    "/home/document/page/1/${routeExtension}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onMouseEnter",
                "method_begin": "const onMouseEnter = (row) => {",
                "method_end": "}",
                "range": [
                    91,
                    94
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onMouseLeave",
                "method_begin": "const onMouseLeave = () => {",
                "method_end": "}",
                "range": [
                    96,
                    99
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    103,
                    105
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    125,
                    137
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    139,
                    141
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    143,
                    149
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    161,
                    197
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "(\n            <SortableHead axis=\"x\" distance={5} onSortEnd={onReorderEnd} >\n                {adminCheck() ?\n                    <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                        <Checkbox\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            checked={selectAllDocs}\n                            icon={<CheckboxIcon checked={false} />}\n                            onChange={(event, value) => onChangeSelectAll(event, value)}\n                            color=\"primary\"\n                            inputProps={{ classes: { root: classes.checkbox } }} />\n                    </TableCell> : null}\n                {\n                    tableHeader.map((row, index) => (\n                        !row.selected ? null :\n                            <Card\n                                index={index}\n                                filter={row.filter}\n                                filtered={getFilterStatus(row)}\n                                key={row.id} id={`${row.id}`}\n                                align={row.align}\n                                fullWidth={getWidth()}\n                                menuStyle={classes.filterMenu}\n                                checkboxClass={classes.checkbox}\n                                width={row.width} name={row.label} moveCard={moveCard} findCard={findCard} />\n\n                    ))\n                }\n                <TableCell align=\"left\" style={{ width: '5%' }}>\n                    <ColumnConfig filterType={filterType} onComplete={apiStore.setTableHeaders}  from='documents' headers={tableHeader} onChange={onHeaderChange} />\n                </TableCell>\n            </SortableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/>",
                    "/>",
                    "/TableCell>",
                    "/SortableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    201,
                    221
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/${batchFilter}/all",
                    "/${batchFilter}/passed",
                    "/${batchFilter}/rejected",
                    "/home/document/api/page/${pageNo",
                    "/batch/${batchFilter}/rejected",
                    "/home/document/api/page/${pageNo",
                    "/batch/${batchFilter}/rejected"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    223,
                    228
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    230,
                    256
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalDocs}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (docsPerPage) + 1)}\n                    -\n                    {pageNo * docsPerPage <= totalDocs ? (pageNo * docsPerPage) : totalDocs\n                    }\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={docsPerPage} setRowsPerPage={setDocsPerPage} />\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocument",
                "method_begin": "const openDocument = (row) => {",
                "method_end": "}",
                "range": [
                    258,
                    283
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/passed/batch/${batchFilter}/${row._id}",
                    "/home/training/api/resolved/batch/${batchFilter}/${row._id}",
                    "/home/training/api/feedback/batch/${batchFilter}/${row._id}",
                    "/home/document/all/batch/${batchFilter}/${row._id}",
                    "/home/document/all/batch/${batchFilter}/${row._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocStatus",
                "method_begin": "const renderDocStatus = (value, status, row) => {",
                "method_end": "}",
                "range": [
                    311,
                    336
                ],
                "parameters": [
                    "value",
                    "status",
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "(\n                <div className={classes.docStatus} style={{ color: trainingStatus[`${value}`].fcolor }}>\n                    {trainingStatus[`${value}`].feedbackLabel}\n                </div>\n            ) | (\n                <div className={classes.docStatus} style={{ color: value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].color : trainingStatus[`${status}`].color }}>\n                    {value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].feedbackLabel : trainingStatus[`${status}`].label}\n                </div>\n            ) | (\n            <div className={classes.docStatus} style={{ color: value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].color : trainingStatus[`${status}`].color }}>\n                {/* <div className='colFlex flexCenter' >\n                <div className={classes.dot} style={{ backgroundColor: trainingStatus[`${value}`].color }}></div>\n            </div>*/}\n                {\n                    ocrStatusFilter === 'OCR_COMPLETE' ?\n                        (value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].feedbackLabel : (row.isNonTableFlag && row.isTableFlag ? trainingStatus[`${status}`].label : trainingStatus[`${status}`].feedbackLabel)) :\n                        trainingStatus[`${value}`].label\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>*/}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRank",
                "method_begin": "const renderRank = (row) => {",
                "method_end": "}",
                "range": [
                    338,
                    349
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "(\n            <div className={` semiBold`} style={{ backgroundColor: 'transparent', color: temp.color, fontSize: 'inherit' }}>\n                {temp.label}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "rejectedFilesPresent",
                "method_begin": "const rejectedFilesPresent = () => {",
                "method_end": "}",
                "range": [
                    351,
                    358
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "currentBatch.feedbackApplied | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    360,
                    367
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRejectedReason",
                "method_begin": "const renderRejectedReason = (buckets, index) => {",
                "method_end": "}",
                "range": [
                    369,
                    388
                ],
                "parameters": [
                    "buckets",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "(\n            <React.Fragment>\n                <div data-tip data-for={'rejectionReason' + index} style={{ textDecoration: 'underline', width: 'fit-content' }}>\n                    {buckets.length}&nbsp; found\n                </div>\n                <ReactTooltip id={'rejectionReason' + index} place='right' effect='solid' className={classes.reasonTooltip}>\n                    <div >\n                        <ul>\n                            {\n                                buckets.map((row, bucketIndex) => (\n                                    <li key={index + 'bucket' + bucketIndex} className='sFont'>{classDetails[`${row.bucketId}`]}</li>\n                                ))\n                            }\n                        </ul>\n                    </div>\n                </ReactTooltip>\n            </React.Fragment>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/li>",
                    "/ul>",
                    "/div>",
                    "/ReactTooltip>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToResolvedFiles",
                "method_begin": "const goToResolvedFiles = () => {",
                "method_end": "}",
                "range": [
                    390,
                    393
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    395,
                    440
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "(<div>{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.createdAt && Moment(row.reviewedOn).format('DD MMM YY, h:mm a')}</div>) | <div className={classes.processBtn}>Process</div> | row.confidenceScore ? renderConfidenceScore(row.confidenceScore) : 'N/A' | row.aiStatus && renderDocStatus(row.aiStatus, row.status, row) | renderRank(row) | row.buckets && row.buckets.length ? renderRejectedReason(row.buckets, index) : '-' | (\n                    row.docType && row.docType.toLowerCase().startsWith('#new_format') ?\n                        <div className='rowFlex'>\n                            <div className='colFlex flexCenter'>\n                                {row.docType}\n                            </div>&nbsp;\n                            <div className='colFlex flexCenter' data-tip data-for={'newFormat' + index}><SvgIcon src={Images.info} /></div>\n                            <ReactTooltip clickable={true} id={'newFormat' + index} place='right' effect='solid' className={'xsFont'} >\n                                <div>This seems to be a new document type<br /> which is yet to be configured</div>\n                            </ReactTooltip>\n                        </div>\n                        :\n                        row.docType\n                ) | (\n                    <div className={classes.docName}>\n                        <div data-tip data-for={'preview' + index} className={classes.rowLink} onClick={() => openDocument(row)}>{row[`${header.type}`]}</div>\n                        <CopyToClipboard text={row[`${header.type}`]} className={classes.copyButton}\n                            onCopy={() => commonStore.handleOpenSnackBar('Document name copied to clipboard', 'info')}>\n                            <SvgIcon src={Images.copy} />\n                        </CopyToClipboard>\n                        { <FilePreview index={index} data={row} />}\n                    </div>\n                ) | (<div>{row[`${header.type}`] ? row[`${header.type}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/A",
                    "/div>&nbsp;",
                    "/></div>",
                    "/>",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/CopyToClipboard>",
                    "/>}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderConfidenceScore",
                "method_begin": "const renderConfidenceScore = (value) => {",
                "method_end": "}",
                "range": [
                    442,
                    453
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiDocListing.js",
                "returnType": "(\n            <div className='rowFlex'>\n                <div style={{ width: '25%' }} className='colFlex flexCenter'>\n                    <div className={classes.percentageBar} >\n                        <hr align=\"left\" width={value + '%'} className={classes.percentageLine} style={{ backgroundColor: getCfScoreColors('percent', value) }} />\n                    </div>\n                </div>\n                <div className={classes.cfScore}>{value + '%'}</div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiHeaderStats.js": {
        "method_details_": [
            {
                "method_name": "CustomSvgIcon",
                "method_begin": "function CustomSvgIcon(props)",
                "method_end": ");",
                "range": [
                    23,
                    30
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiHeaderStats.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    58,
                    76
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiHeaderStats.js",
                "returnType": "batchAnalytics.processedPercentage | 0 | `c${batchList[i].processedPercentage} p50` | `${batchList[i].processedPercentage}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentage",
                "method_begin": "const getPercentage = (type) => {",
                "method_end": "}",
                "range": [
                    78,
                    88
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiHeaderStats.js",
                "returnType": "`c${batchList[i].processedPercentage} p50` | `${batchList[i].processedPercentage}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    90,
                    120
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiHeaderStats.js",
                "returnType": "batchAnalytics[`${type}`] | getTimeElapsed(currentBatch.timeElapsed) | getTimeElapsed(currentBatch.ocrTime * 1000) | Math.ceil((currentBatch.identified / currentBatch.docCount) * 100) | Math.round(currentBatch.accuracy) | `${currentBatch[type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getResolvedPercentage",
                "method_begin": "const getResolvedPercentage = () => {",
                "method_end": "}",
                "range": [
                    122,
                    129
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiHeaderStats.js",
                "returnType": "Math.ceil((currentBatch.feedbackApplied / (currentBatch.nonIdentified + currentBatch.feedbackApplied)) * 100) | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchAnalytics",
                "method_begin": "const getBatchAnalytics = (type) => {",
                "method_end": "}",
                "range": [
                    131,
                    149
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiHeaderStats.js",
                "returnType": "`${batchAnalytics[type]}` | `${batchList[i].analytics[type]}` | 0 | 0 | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getAutomationPercent",
                "method_begin": "const getAutomationPercent = () => {",
                "method_end": "}",
                "range": [
                    151,
                    162
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiHeaderStats.js",
                "returnType": "percent | '0'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (time) => {",
                "method_end": "}",
                "range": [
                    164,
                    166
                ],
                "parameters": [
                    "time"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiHeaderStats.js",
                "returnType": "msToHMS(time)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderStats",
                "method_begin": "const renderStats = () => {",
                "method_end": "}",
                "range": [
                    168,
                    206
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/ApiHeaderStats.js",
                "returnType": "(\n            <div className={clsx({ [classes.statContainer]: true, [classes.blurredStats]: batchFilter === ' ' })}>\n                <AnimatedDiv className={classes.statCard}>\n                    <SvgIcon className={classes.icon} src={Images.unidentified} />\n                    <div className='fullWidth lFont'>\n                        Rejected Files\n                        <div className={`${classes.fileCount} mFont`}>{getBatchDetails('nonIdentified')}</div>\n                    </div>\n                </AnimatedDiv>\n                <AnimatedDiv className={classes.statCard}>\n                    <SvgIcon className={classes.icon} src={Images.fgiven} />\n                    <div className='fullWidth lFont'>\n                        Feedback Given\n                        <div className={`${classes.fileCount} mFont`}>{getBatchDetails('feedbackGiven')}</div>\n                    </div>\n                </AnimatedDiv>\n                <AnimatedDiv className={classes.statCard}>\n                    <SvgIcon className={classes.icon} src={Images.fapplied} />\n                    <div className='fullWidth lFont'>\n                        Resolved\n                        <div className={`${classes.fileCount} mFont`}>{getResolvedPercentage() + `%`}</div>\n                    </div>\n                </AnimatedDiv>\n                <AnimatedDiv className={classes.statCard}>\n                    <SvgIcon className={classes.icon} src={Images.hourglass} />\n                    <div className='fullWidth lFont'>\n                        Feedback Time\n                        <div className='rowFlex'>\n                            <div className={`${classes.fileCount} mFont`}>{getBatchDetails('ocrTime')}</div>\n                            <div className={`${classes.subText} xsFont`}>HH:MM:SS</div>\n                        </div>\n                    </div>\n                </AnimatedDiv>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/Card.js": {
        "method_details_": [
            {
                "method_name": "Card",
                "method_begin": "function Card({ id, name, index, fullWidth,moveCard, findCard, width, filter, filtered, menuStyle, checkboxClass, align })",
                "method_end": ");",
                "range": [
                    47,
                    101
                ],
                "parameters": [
                    "{ id, name, index, fullWidth,moveCard, findCard, width, filter, filtered, menuStyle, checkboxClass, align }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/Card.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>;",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/>}",
                    "/>}",
                    "//",
                    "//",
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/MenuItem>",
                    "/div>",
                    "/TableCell>}",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickFilter",
                "method_begin": "const onClickFilter = (e, type) => {",
                "method_end": "}",
                "range": [
                    53,
                    57
                ],
                "parameters": [
                    "e",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiDocs/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js": {
        "method_details_": [
            {
                "method_name": "onSortStart",
                "method_begin": "const onSortStart = (e) => {",
                "method_end": "}",
                "range": [
                    67,
                    68
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    88,
                    109
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "true | false | true | false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    112,
                    114
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    116,
                    123
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "Math.ceil(97 / (count - 1)) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    127,
                    163
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "(\n            <TableHead >\n                <TableRow>\n                    {\n                        logsHeaders.map((row, index) => (\n                            !row.selected ? null :\n                                <LogCard\n                                    index={index}\n                                    item={row}\n                                    filter={row.filter}\n                                    equalWidth={getWidth()}\n                                    filtered={getFilterStatus(row)}\n                                    key={row.id} id={`${row.id}`}\n                                    menuStyle={classes.filterMenu}\n                                    checkboxClass={classes.checkbox}\n                                    headers={logsHeaders}\n                                    onHeaderClick={onHeaderClick}\n                                    align={row.align}\n                                    width={row.width} name={row.label}\n                                    configList={configListUpload}\n                                    rowFocus={rowFocus}\n                                    classes={classes}\n                                    handleWorkflowChange={props.handleWorkflowChange}\n                                    handleStatusCodeChange={props.handleStatusCodeChange}\n                                />\n\n                        ))\n                    }\n                    <TableCell align=\"left\" style={{ width: '5%' }}>\n                        <ColumnConfig onComplete={setLogHeaders} headers={logsHeaders} onChange={onHeaderChange} onReorderEnd={onReorderEnd} />\n                    </TableCell>\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    166,
                    168
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setLogHeaders",
                "method_begin": "const setLogHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    170,
                    172
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    174,
                    202
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalBatches}\n                </div>\n                {\n                    totalBatches === 0 ? null :\n                        <div className='rowFlex'>\n                            <div className={classes.pgnDivider}>|</div>\n                            <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                                <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => props.goToPage('prev')} />\n                            </div>\n                            <div className='colFlex flexCenter fullHeight'>\n                                Page {logPageNo} of {Math.ceil(totalBatches / logsPerPage)}\n                            </div>\n\n                            <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                                <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => props.goToPage('next')} />\n                            </div>\n                            <div className={classes.pgnDivider}>|</div>\n                            <div className='colFlex flexCenter fullHeight'>\n                                <RowsPerPage value={logsPerPage} setRowsPerPage={props.setLogsPerPage} />\n                            </div>\n                        </div>\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    205,
                    216
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getResponseTime",
                "method_begin": "const getResponseTime = (item) => {",
                "method_end": "}",
                "range": [
                    218,
                    225
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "isFilterApplied",
                "method_begin": "const isFilterApplied = () => {",
                "method_end": "}",
                "range": [
                    230,
                    233
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "true",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    235,
                    291
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "(<div>{row[`${header.name}`] && Moment(row[`${header.name}`]).format('DD MMM YY, h:mm a')}</div>) | (<div>{row[`${header.name}`] && Moment(new Date(row[`${header.name}`])).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.responseTime && getResponseTime(row)}</div>) | (<div onClick={() => props.openDocument(row)} className={row.document && row.document.fileOriginalName ? classes.rowLink : ''}>{row.document && row.document.fileOriginalName ? row.document.fileOriginalName : '-'}</div>) | (<div>{row.externalId}</div>) | (<div>{((logPageNo - 1) * logsPerPage) + index + 1}</div>) | (row.status ? (trainingStatus[`${row.status}`] && trainingStatus[`${row.status}`].apiStatus) : trainingStatus['OCR_PENDING'].apiStatus) | (row.uploadedVia === undefined ?\n                    <div className={classes.uploadedVia}>\n                        <div><SvgIcon src={Images[`${uploadSources.upload.icon}`]} /></div>&nbsp;\n                        <div className='xsFont'>{uploadSources.upload.name}</div>\n                        {/*<div>{uploadSources[`${row.uploadedVia}`].typeo}</div>*/}\n                    </div>\n                    : null) | (\n                    <div className='rowFlex '>\n                        <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                            <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#33cb74' }} align=\"left\" width={row.processedPercentage + '%'} className={classes.percentageLine} />\n                            </div>\n                        </div>\n                        <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>\n                    </div>\n                ) | (\n                    <div\n                        className={clsx({ ['custom-btn btn-3']: true, sFont: true })} onClick={() => propStore.setCurrentApi(row)}><span >View Payload</span>\n                    </div>\n                ) | (\n                    <div data-tip={'preview' + index} data-for={'preview' + index} className={classes.rowLink} onClick={() => props.openDocument(row)} >{row[`${header.name}`]}\n                        {row.response && row.response.length ? <FilePreview from='apiLog' index={index} data={row.response[0]} /> : null}\n                    </div>\n                ) | <div >{row.workflow && row.workflow.workflow ? row.workflow.workflow : '-'}</div> | getTimeElapsed(row) | (<div>{row[`${header.name}`]}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatchDialog",
                "method_begin": "const openBatchDialog = (value) => {",
                "method_end": "}",
                "range": [
                    293,
                    295
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogs.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogsHome.js": {
        "method_details_": [
            {
                "method_name": "setLogsPerPage",
                "method_begin": "const setLogsPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    57,
                    63
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api/logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleWorkflowChange",
                "method_begin": "const handleWorkflowChange = () => {",
                "method_end": "}",
                "range": [
                    66,
                    71
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api/logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleStatusCodeChange",
                "method_begin": "const handleStatusCodeChange = () => {",
                "method_end": "}",
                "range": [
                    73,
                    78
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api/logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    80,
                    90
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api/logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    94,
                    99
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api/logs/page/${logPageNo",
                    "/home/api/logs/page/${logPageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderUploadButton",
                "method_begin": "const renderUploadButton = () => {",
                "method_end": "}",
                "range": [
                    122,
                    128
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogsHome.js",
                "returnType": "(\n            <div className={`rowFlex ${classes.uploadButton} ${classes.viewBatchBtn}`} onClick={() => props.history.push('/home/api/batch/page/1')} >\n                Training Batches\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api/batch/page/1",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocument",
                "method_begin": "const openDocument = (item) => {",
                "method_end": "}",
                "range": [
                    131,
                    135
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api/document/${item.response._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatchDialog",
                "method_begin": "const openBatchDialog = (value) => {",
                "method_end": "}",
                "range": [
                    138,
                    140
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderBatchButton",
                "method_begin": "const renderBatchButton = () => {",
                "method_end": "}",
                "range": [
                    142,
                    151
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogsHome.js",
                "returnType": "(\n            <div className='colFlex flexCenter' style={{ position: 'relative' }}>\n                <div className={`rowFlex ${classes.uploadButton}`} onClick={() => openBatchDialog(true)}>\n                    Train My Model\n                </div>\n                {batchDialog ? <CreateBatch setBatchDialog={openBatchDialog} /> : null}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchLogs",
                "method_begin": "const searchLogs = (event) => {",
                "method_end": "}",
                "range": [
                    153,
                    160
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api/logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js": {
        "method_details_": [
            {
                "method_name": "setBatchesPerPage",
                "method_begin": "const setBatchesPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    51,
                    54
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSortStart",
                "method_begin": "const onSortStart = (e) => {",
                "method_end": "}",
                "range": [
                    67,
                    69
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    89,
                    101
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    111,
                    113
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    115,
                    122
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleWorkflowChange",
                "method_begin": "const handleWorkflowChange = () => {",
                "method_end": "}",
                "range": [
                    124,
                    130
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    132,
                    164
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "(\n            <SortableHead axis=\"x\" distance={5} onSortEnd={onReorderEnd} onSortStart={onSortStart} >\n                {\n                    batchHeaders.map((row, index) => (\n                        !row.selected ? null :\n                            <Card\n                                index={index}\n                                filter={row.filter}\n                                equalWidth={getWidth()}\n                                filtered={getFilterStatus(row)}\n                                key={row.id} id={`${row.id}`}\n                                menuStyle={classes.filterMenu}\n                                checkboxClass={classes.checkbox}\n                                headers={batchHeaders}\n                                onHeaderClick={onHeaderClick}\n                                align={row.align}\n                                width={row.width} name={row.label}\n                                configList={configListUpload}\n                                rowFocus={rowFocus}\n                                classes={classes}\n                                handleWorkflowChange={handleWorkflowChange}\n                            />\n\n                    ))\n                }\n                <TableCell align=\"left\" style={{ width: '5%' }}>\n                    <ColumnConfig headers={batchHeaders} onComplete={apiStore.setBatchHeaders} onChange={onHeaderChange} onReorderEnd={onReorderEnd} />\n                </TableCell>\n            </SortableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/TableCell>",
                    "/SortableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderProcessingStatus",
                "method_begin": "const renderProcessingStatus = (value) => {",
                "method_end": "}",
                "range": [
                    166,
                    177
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "(\n            // value < 100 ?\n            true ?\n                <div className={classes.processingLoader} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div> :\n                <div className={`${classes.processingLoader} ${classes.ocrComplete}`} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    179,
                    184
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/${pageNo",
                    "/home/upload/page/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    186,
                    188
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchHeaders",
                "method_begin": "const setBatchHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    190,
                    192
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    194,
                    221
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalBatches}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (batchesPerPage) + 1)}\n                    -\n                    {pageNo * batchesPerPage <= totalBatches ? (pageNo * batchesPerPage) : totalBatches\n                    }\n                </div>\n\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={batchesPerPage} setRowsPerPage={setBatchesPerPage} />\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatch",
                "method_begin": "const openBatch = (data) => {",
                "method_end": "}",
                "range": [
                    223,
                    235
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/api/page/1/batch/${data.batchName}/rejected"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    237,
                    248
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatchDialog",
                "method_begin": "const openBatchDialog = (value) => {",
                "method_end": "}",
                "range": [
                    277,
                    280
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderUploadButton",
                "method_begin": "const renderUploadButton = () => {",
                "method_end": "}",
                "range": [
                    282,
                    291
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "(\n            <div className='colFlex flexCenter' style={{ position: 'relative' }}>\n                <div className={`rowFlex ${classes.uploadButton}`} onClick={() => props.history.push('/home/api/logs/page/1')}>\n                    View API Logs\n                </div>\n                {batchDialog ? <CreateBatch setBatchDialog={openBatchDialog} /> : null}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api/logs/page/1",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    293,
                    335
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/ApiUploadList.js",
                "returnType": "(<div>{row[`${header.name}`] && Moment(row[`${header.name}`]).format('DD MMM YY, h:mm a')}</div>) | (row.uploadedVia === undefined ?\n                    <div className={classes.uploadedVia}>\n                        <div><SvgIcon src={Images[`${uploadSources.upload.icon}`]} /></div>&nbsp;\n                        <div className='xsFont'>{uploadSources.upload.name}</div>\n                        {/*<div>{uploadSources[`${row.uploadedVia}`].type}</div>*/}\n                    </div>\n                    : null) | (\n                    <div className='rowFlex '>\n                        <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                            <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#33cb74' }} align=\"left\" width={row.processedPercentage + '%'} className={classes.percentageLine} />\n                            </div>\n                        </div>\n                        <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>\n                    </div>\n                ) | <div style={{ cursor: row.processedPercentage < 100 ? 'not-allowed' : 'pointer' }}>\n                    <div onClick={() => apiStore.exportXls(true, row._id)}\n                        className={clsx({ ['custom-btn btn-3']: true, [classes.disProcessBtn]: row.processedPercentage < 100, sFont: true })}><span >{row.exportedFromUpload ? 'Process Again' : 'Process Now'}</span></div>\n                </div> | (\n                    <div className={classes.rowLink} onClick={() => openBatch(row)}>{row[`${header.name}`]}</div>\n                ) | (<div>{((pageNo - 1) * batchesPerPage) + index + 1}</div>) | <div >{row.workFlow && row.workFlow.name}</div> | getTimeElapsed(row) | (<div>{row[`${header.name}`]}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span></div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/BatchCreationHelp.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    20,
                    23
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/BatchCreationHelp.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/Card.js": {
        "method_details_": [
            {
                "method_name": "Card",
                "method_begin": "function Card({ id, name, width, filter, equalWidth, filtered, menuStyle, checkboxClass, index, headers, align, configList, rowFocus, classes, handleWorkflowChange })",
                "method_end": ");",
                "range": [
                    34,
                    119
                ],
                "parameters": [
                    "{ id, name, width, filter, equalWidth, filtered, menuStyle, checkboxClass, index, headers, align, configList, rowFocus, classes, handleWorkflowChange }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/Card.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/>;",
                    "/span></div>",
                    "/></div>",
                    "/div>",
                    "/>}",
                    "/>}",
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/MenuItem>",
                    "/AnimatedDiv>",
                    "/TableCell></ClickAwayListener>}",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickFilter",
                "method_begin": "const onClickFilter = (e, type) => {",
                "method_end": "}",
                "range": [
                    41,
                    46
                ],
                "parameters": [
                    "e",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlewWfChange",
                "method_begin": "const handlewWfChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    69,
                    75
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/CreateBatch.js": {
        "method_details_": [
            {
                "method_name": "setRange",
                "method_begin": "const setRange = (type) => {",
                "method_end": "}",
                "range": [
                    76,
                    109
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/CreateBatch.js",
                "returnType": "false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createBatch",
                "method_begin": "const createBatch = () => {",
                "method_end": "}",
                "range": [
                    111,
                    122
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/CreateBatch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCalendarOpen",
                "method_begin": "const handleCalendarOpen = (type) => {",
                "method_end": "}",
                "range": [
                    124,
                    135
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/CreateBatch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCalendarClose",
                "method_begin": "const handleCalendarClose = (type) => {",
                "method_end": "}",
                "range": [
                    137,
                    146
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/CreateBatch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogCard.js": {
        "method_details_": [
            {
                "method_name": "LogCard",
                "method_begin": "function LogCard({ item, id, name, width, filter, equalWidth, filtered, menuStyle, checkboxClass, index, headers, align, configList, rowFocus, classes, handleWorkflowChange, handleStatusCodeChange })",
                "method_end": ");",
                "range": [
                    37,
                    194
                ],
                "parameters": [
                    "{ item, id, name, width, filter, equalWidth, filtered, menuStyle, checkboxClass, index, headers, align, configList, rowFocus, classes, handleWorkflowChange, handleStatusCodeChange }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogCard.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>;",
                    "/span></div>",
                    "/></div>",
                    "/*",
                    "/>",
                    "/>",
                    "/div>",
                    "/}",
                    "/div>",
                    "/*",
                    "/>",
                    "/}",
                    "/>}",
                    "/>}",
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/MenuItem>",
                    "/AnimatedDiv>",
                    "/>}",
                    "/>}",
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/MenuItem>",
                    "/AnimatedDiv>",
                    "/TableCell></ClickAwayListener>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortList",
                "method_begin": "const sortList = (sortDirection, index, sortField) => {",
                "method_end": "}",
                "range": [
                    45,
                    47
                ],
                "parameters": [
                    "sortDirection",
                    "index",
                    "sortField"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogCard.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickFilter",
                "method_begin": "const onClickFilter = (e, type) => {",
                "method_end": "}",
                "range": [
                    49,
                    65
                ],
                "parameters": [
                    "e",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogCard.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setDateRange",
                "method_begin": "const setDateRange = (value) => {",
                "method_end": "}",
                "range": [
                    67,
                    70
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogCard.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDatePicker",
                "method_begin": "const openDatePicker = (value) => {",
                "method_end": "}",
                "range": [
                    76,
                    78
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogCard.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlewWfChange",
                "method_begin": "const handlewWfChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    97,
                    103
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogCard.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleStatusChange",
                "method_begin": "const handleStatusChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    105,
                    111
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogCard.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeAllMenus",
                "method_begin": "const closeAllMenus = () => {",
                "method_end": "}",
                "range": [
                    113,
                    117
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogCard.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogSearch.js": {
        "method_details_": [
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    20,
                    22
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogSearch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js": {
        "method_details_": [
            {
                "method_name": "onSortStart",
                "method_begin": "const onSortStart = (e) => {",
                "method_end": "}",
                "range": [
                    67,
                    68
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    88,
                    109
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "true | false | true | false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    112,
                    114
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    116,
                    123
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "Math.ceil(97 / (count - 1)) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    127,
                    163
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "(\n            <TableHead >\n                <TableRow>\n                    {\n                        logsHeaders.map((row, index) => (\n                            !row.selected ? null :\n                                <LogCard\n                                    index={index}\n                                    item={row}\n                                    filter={row.filter}\n                                    equalWidth={getWidth()}\n                                    filtered={getFilterStatus(row)}\n                                    key={row.id} id={`${row.id}`}\n                                    menuStyle={classes.filterMenu}\n                                    checkboxClass={classes.checkbox}\n                                    headers={logsHeaders}\n                                    onHeaderClick={onHeaderClick}\n                                    align={row.align}\n                                    width={row.width} name={row.label}\n                                    configList={configListUpload}\n                                    rowFocus={rowFocus}\n                                    classes={classes}\n                                    handleWorkflowChange={props.handleWorkflowChange}\n                                    handleStatusCodeChange={props.handleStatusCodeChange}\n                                />\n\n                        ))\n                    }\n                    <TableCell align=\"left\" style={{ width: '5%' }}>\n                        <ColumnConfig onComplete={setLogHeaders} headers={logsHeaders} onChange={onHeaderChange} onReorderEnd={onReorderEnd} />\n                    </TableCell>\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    166,
                    168
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setLogHeaders",
                "method_begin": "const setLogHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    170,
                    172
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    174,
                    205
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalBatches}\n                </div>\n                {\n                    totalBatches === 0 ? null :\n                        <div className='rowFlex'>\n                            <div className={classes.pgnDivider}>|</div>\n                            <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                                <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => props.goToPage('prev')} />\n                            </div>\n                            <div className='colFlex flexCenter fullHeight'>\n                                {logPageNo === 1 ? logPageNo : ((logPageNo - 1) * (logsPerPage) + 1)}\n                                -\n                                {logPageNo * logsPerPage <= totalBatches ? (logPageNo * logsPerPage) : totalBatches\n                                }\n                            </div>\n\n                            <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                                <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => props.goToPage('next')} />\n                            </div>\n                            <div className={classes.pgnDivider}>|</div>\n                            <div className='colFlex flexCenter fullHeight'>\n                                <RowsPerPage value={logsPerPage} setRowsPerPage={props.setLogsPerPage} />\n                            </div>\n                        </div>\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    208,
                    219
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getResponseTime",
                "method_begin": "const getResponseTime = (item) => {",
                "method_end": "}",
                "range": [
                    221,
                    228
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "isFilterApplied",
                "method_begin": "const isFilterApplied = () => {",
                "method_end": "}",
                "range": [
                    233,
                    236
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "true",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    238,
                    294
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "(<div>{row[`${header.name}`] && Moment(row[`${header.name}`]).format('DD MMM YY, h:mm a')}</div>) | (<div>{row[`${header.name}`] && Moment(new Date(row[`${header.name}`])).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.responseTime && getResponseTime(row)}</div>) | (<div onClick={() => props.openDocument(row)} className={row.document && row.document.fileOriginalName ? classes.rowLink : ''}>{row.document && row.document.fileOriginalName ? row.document.fileOriginalName : '-'}</div>) | (<div>{row.externalId}</div>) | (<div>{((logPageNo - 1) * logsPerPage) + index + 1}</div>) | (row.status ? (trainingStatus[`${row.status}`] && trainingStatus[`${row.status}`].apiStatus) : trainingStatus['OCR_PENDING'].apiStatus) | (row.uploadedVia === undefined ?\n                    <div className={classes.uploadedVia}>\n                        <div><SvgIcon src={Images[`${uploadSources.upload.icon}`]} /></div>&nbsp;\n                        <div className='xsFont'>{uploadSources.upload.name}</div>\n                        {/*<div>{uploadSources[`${row.uploadedVia}`].typeo}</div>*/}\n                    </div>\n                    : null) | (\n                    <div className='rowFlex '>\n                        <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                            <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#33cb74' }} align=\"left\" width={row.processedPercentage + '%'} className={classes.percentageLine} />\n                            </div>\n                        </div>\n                        <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>\n                    </div>\n                ) | (\n                    <div\n                        className={clsx({ ['custom-btn btn-3']: true, sFont: true })} onClick={() => propStore.setCurrentApi(row)}><span >View Payload</span>\n                    </div>\n                ) | (\n                    <div data-tip={'preview' + index} data-for={'preview' + index} className={classes.rowLink} onClick={() => props.openDocument(row)} >{row[`${header.name}`]}\n                        {row.response && row.response.length ? <FilePreview from='apiLog' index={index} data={row.response[0]} /> : null}\n                    </div>\n                ) | <div >{row.workflow && row.workflow.workflow ? row.workflow.workflow : '-'}</div> | getTimeElapsed(row) | (<div>{row[`${header.name}`]}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatchDialog",
                "method_begin": "const openBatchDialog = (value) => {",
                "method_end": "}",
                "range": [
                    296,
                    298
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/LogsProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/UploadDateFilter.js": {
        "method_details_": [
            {
                "method_name": "setRange",
                "method_begin": "const setRange = (type) => {",
                "method_end": "}",
                "range": [
                    62,
                    97
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/UploadDateFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setStartDate",
                "method_begin": "const setStartDate = (date) => {",
                "method_end": "}",
                "range": [
                    99,
                    103
                ],
                "parameters": [
                    "date"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/UploadDateFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setEndDate",
                "method_begin": "const setEndDate = (date) => {",
                "method_end": "}",
                "range": [
                    105,
                    109
                ],
                "parameters": [
                    "date"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/UploadDateFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "clearDateFilter",
                "method_begin": "const clearDateFilter = () => {",
                "method_end": "}",
                "range": [
                    111,
                    114
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/UploadDateFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCalendarOpen",
                "method_begin": "const handleCalendarOpen = (type) => {",
                "method_end": "}",
                "range": [
                    116,
                    127
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/UploadDateFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCalendarClose",
                "method_begin": "const handleCalendarClose = (type) => {",
                "method_end": "}",
                "range": [
                    129,
                    138
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ApiFlow/UploadDateFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Auth/ForgotPassword.js": {
        "method_details_": [
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    32,
                    45
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Auth/ForgotPassword.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onLoginButtonClick",
                "method_begin": "const onLoginButtonClick = (e) => {",
                "method_end": "}",
                "range": [
                    52,
                    75
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Auth/ForgotPassword.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Auth/Login.js": {
        "method_details_": [
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    40,
                    70
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Auth/Login.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkIfLinkIsAccessible",
                "method_begin": "const checkIfLinkIsAccessible = (link, role) => {",
                "method_end": "}",
                "range": [
                    99,
                    108
                ],
                "parameters": [
                    "link",
                    "role"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Auth/Login.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onLoginButtonClick",
                "method_begin": "const onLoginButtonClick = (e) => {",
                "method_end": "}",
                "range": [
                    112,
                    162
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Auth/Login.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "/home/document-api/page/1/searchQuery",
                    "/home/document-api/page/1/searchQuery",
                    "/home/document-api/page/1",
                    "/home/document-api/page/1/",
                    "/home/document-api/page/1/review",
                    "/home/multitab",
                    "/home/multitab/",
                    "/home/document-api/page/1/review",
                    "/home/document-api/page/1/review",
                    "//",
                    "/home/document-api/page/1/all",
                    "/home/admin-panel/server-status",
                    "/home/document-qc/page/1/review",
                    "/home/document-api/page/1/review"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickShowPassword",
                "method_begin": "const onClickShowPassword = () => {",
                "method_end": "}",
                "range": [
                    164,
                    166
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Auth/Login.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Auth/ResetForgotPassword.js": {
        "method_details_": [
            {
                "method_name": "resetPassword",
                "method_begin": "const resetPassword = (e) => {",
                "method_end": "}",
                "range": [
                    54,
                    104
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Auth/ResetForgotPassword.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/^(?=.*[0-9]",
                    "/\\s/;",
                    "/*",
                    "/login",
                    "//",
                    "//",
                    "//",
                    "/*this.props.userStore.resetPassword(password1",
                    "/home/dashboard"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/ BatchSearch.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js": {
        "method_details_": [
            {
                "method_name": "onSortStart",
                "method_begin": "const onSortStart = (e) => {",
                "method_end": "}",
                "range": [
                    77,
                    79
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    99,
                    111
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    114,
                    116
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    119,
                    126
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchSortDirection",
                "method_begin": "const setBatchSortDirection = (val) => {",
                "method_end": "}",
                "range": [
                    128,
                    133
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    136,
                    174
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "(\n            <TableHead axis=\"x\" distance={5} onSortEnd={onReorderEnd} onSortStart={onSortStart} >\n                {\n                    batchHeaders.map((row, index) => (\n                        !row.selected ? null :\n\n                            <TableCell style={{ width: row.label === 'S.No.' ? '3%' : getWidth(), padding: '2vh 1vw' }} align={row.align} >\n                                <div style={{ display: 'flex', justifyContent: row.align === 'center' ? 'center' : '' }}>\n                                    <div className='colFlex flexCenter'>\n                                        <span data-for={row.name === 'Batch ID' ? 'batchIdHeader' : ''} ref={row.name === 'Batch ID' ? batchIdRef : null} data-tip={name === 'Batch ID' ? 'batchIdHeader' : ''}>{row.label}</span></div>\n                                    {\n                                        !row.allowSort ? null :\n                                            <div className='colFlex' style={{ marginLeft: '1vh' }}>\n                                                <SvgIcon className={classes.sortIcons} style={`fill : ${batchSortDirection == 'ASC' ? 'black' : ''}; width: 13;height: 13;`} src={Images.up}\n                                                    onClick={(e) => setBatchSortDirection('ASC')}\n\n                                                />\n                                                <SvgIcon className={classes.sortIcons} style={`fill : ${batchSortDirection == 'DESC' ? 'black' : ''};width: 13;height: 13;margin-top: -4px`} src={Images.down}\n                                                    onClick={(e) => setBatchSortDirection('DESC')}\n                                                />\n                                            </div>\n                                    }\n\n                                </div>\n\n\n                            </TableCell>\n\n\n                    ))\n                }\n                <TableCell align=\"left\" style={{ width: '5%' }}>\n                    <ColumnConfig headers={batchHeaders} onComplete={propStore.setBatchHeaders} onChange={onHeaderChange} onReorderEnd={onReorderEnd} />\n                </TableCell>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span></div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/>",
                    "/TableCell>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    178,
                    180
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchHeaders",
                "method_begin": "const setBatchHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    182,
                    184
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    186,
                    212
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalBatches}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => props.goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {batchPageNo === 1 ? batchPageNo : ((batchPageNo - 1) * (batchesPerPage) + 1)}\n                    -\n                    {batchPageNo * batchesPerPage <= totalBatches ? (batchPageNo * batchesPerPage) : totalBatches\n                    }\n                </div>\n\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => props.goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={batchesPerPage} setRowsPerPage={props.setBatchesPerPage} />\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    216,
                    235
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli) | <TimeElapsed offsetTimestamp={stopwatchOffset} />",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//",
                    "//todays",
                    "//",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    260,
                    337
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "(<div>{row[`${header.name}`] && Moment(row[`${header.name}`]).format('DD MMM YY, h:mm a')}</div>) | (row.uploadedVia === undefined ?\n                    <div className={classes.uploadedVia}>\n                        <div><SvgIcon src={Images[`${uploadSources.upload.icon}`]} /></div>&nbsp;\n                        <div className='xsFont'>{uploadSources.upload.name}</div>\n                        {/*<div>{uploadSources[`${row.uploadedVia}`].type}</div>*/}\n                    </div>\n                    : null) | (<div>\n                    <div data-tip data-for={'docCount' + index}\n                    //className={classes.docCount}\n                    >{row.filesUploadedCount}</div>\n\n                    {/*row.processedPercentage == 100 ? <ReactTooltip id={'docCount' + index} place='right' effect='solid' className={classes.reasonTooltip} >\n                        <div >\n                            <ul>\n                                <li className='sFont'>Passed : {row.identifiedCount}</li>\n                                <li className='sFont'>Rejected : {row.nonIdentifiedCount}</li>\n                            </ul>\n                        </div>\n                    </ReactTooltip> : null*/}\n                </div>\n                ) | (<div>{((batchPageNo - 1) * batchesPerPage) + index + 1}</div>) | row.filesUploadedCount - row.ocrFailedCount | (\n                        <div>\n                            <div className={classes.rowLink} onClick={() => props.history.push(`/home/ocr-failure/page/1?batchName=${row.name}`)}>{row.ocrFailedCount}</div>\n                        </div>\n                    ) | (<div>{row.ocrFailedCount}</div>) | (\n                    <div className='rowFlex '>\n                        <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                            {row.processedPercentage == 100 ? <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#33cb74' }} align=\"left\" width={row.processedPercentage + '%'} className={classes.percentageLine} />\n                            </div> :\n                                <LinearProgress classes={{ root: classes.progressRoot1, barColorPrimary: classes.barColorPrimary }} />\n                            }\n                        </div>\n                        {/*  <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>*/}\n                    </div>\n                ) | <div data-for={'exportBtn' + index} data-tip={'exportBtn' + index} style={{ cursor: (row.processedPercentage < 100) ? 'not-allowed' : 'pointer' }}>\n                    <div onClick={() => propStore.exportXls(true, row._id, index)}\n                        className={clsx({ ['custom-btn btn-3']: true, [classes.disProcessBtn]: (row.processedPercentage < 100), sFont: true })}><span >{row.exportedFromUpload ? 'Export Again' : 'Quick Export'}</span></div>\n                    {row.processedPercentage < 100 ? <ReactTooltip id={'exportBtn' + index}>Please wait for OCR processing to complete</ReactTooltip> : null}\n                </div> | (\n                    <div>\n                        <div data-tip data-for={'batchList' + index} className={clsx({ [classes.rowLink]: true, [classes.disRowLink]: row.processedPercentage < 100 })} onClick={() => props.openBatch(row)}>{row[`${header.name}`]}</div>\n                        {row.processedPercentage >= 100 || row.step > 0 ?\n                            null\n                            : <ReactTooltip id={'batchList' + index} className='reactTooltip' place='right'><div className='xsFont'>{row.processedPercentage < 100 ? (row.processedPercentage == 0 ? <span>We are experiencing high traffic at this time. <br />Your batch is in queue and OCR shall begin shortly.</span> : 'OCR in progress') : ''}</div></ReactTooltip>}\n                    </div>\n                ) | <div >{row.workFlow && (row.workFlow.name ? row.workFlow.name : row.workFlow.workflow)}</div> | getTimeElapsed(row) | (<div>{row[`${header.name}`] !== undefined ? row[`${header.name}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "//className={classes.docCount}",
                    "/div>",
                    "/*row.processedPercentage",
                    "/li>",
                    "/li>",
                    "/ul>",
                    "/div>",
                    "/ReactTooltip>",
                    "/}",
                    "/div>",
                    "/div>",
                    "/home/ocr-failure/page/1?batchName=${row.name}",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/*",
                    "/div>*/}",
                    "/div>",
                    "/span></div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/>Your",
                    "/span>",
                    "/div></ReactTooltip>}",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "const cancelUpload = () => {",
                "method_end": "}",
                "range": [
                    339,
                    341
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    345,
                    347
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/BatchListProgress.js",
                "returnType": "0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/Card.js": {
        "method_details_": [
            {
                "method_name": "Card",
                "method_begin": "function Card({ id, name, width, filter, equalWidth, filtered, menuStyle, checkboxClass, index, headers, align, configList, rowFocus, classes, handleWorkflowChange, onHeaderClick })",
                "method_end": ");",
                "range": [
                    36,
                    106
                ],
                "parameters": [
                    "{ id, name, width, filter, equalWidth, filtered, menuStyle, checkboxClass, index, headers, align, configList, rowFocus, classes, handleWorkflowChange, onHeaderClick }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/Card.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span></div>",
                    "/></div>",
                    "/div>",
                    "/>}",
                    "/>}",
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/MenuItem>",
                    "/AnimatedDiv>",
                    "/TableCell>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickFilter",
                "method_begin": "const onClickFilter = (e, type) => {",
                "method_end": "}",
                "range": [
                    42,
                    45
                ],
                "parameters": [
                    "e",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlewWfChange",
                "method_begin": "const handlewWfChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    61,
                    67
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/ReviewFilter.js": {
        "method_details_": [
            {
                "method_name": "getTooltip",
                "method_begin": "const getTooltip = (type) => {",
                "method_end": "}",
                "range": [
                    46,
                    60
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/ReviewFilter.js",
                "returnType": "'' | 'We are still working. Please review the Passed Files while we fetch the Rejected Files' | 'Please complete the review process' | 'Please complete the review process' | ''",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "reviewFilterChange",
                "method_begin": "const reviewFilterChange = (val) => {",
                "method_end": "}",
                "range": [
                    63,
                    66
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/ReviewFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/${props.listType",
                    "/page/1/${val}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/SortingCalendar.js": {
        "method_details_": [
            {
                "method_name": "setDateRange",
                "method_begin": "const setDateRange = (ranges) => {",
                "method_end": "}",
                "range": [
                    21,
                    34
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/SortingCalendar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js": {
        "method_details_": [
            {
                "method_name": "onSortStart",
                "method_begin": "const onSortStart = (e) => {",
                "method_end": "}",
                "range": [
                    80,
                    82
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    102,
                    114
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    117,
                    119
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    122,
                    129
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchSortDirection",
                "method_begin": "const setBatchSortDirection = (val) => {",
                "method_end": "}",
                "range": [
                    131,
                    136
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    139,
                    177
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "(\n            <TableHead axis=\"x\" distance={5} onSortEnd={onReorderEnd} onSortStart={onSortStart} >\n                {\n                    batchHeaders.map((row, index) => (\n                        !row.selected || (row.name === 'reprocess' && propStore.reviewFilter === 'completed') || (row.disabled && row.disabled.includes(userStore.user && userStore.user.role)) ? null :\n\n                            <TableCell style={{ width: row.label === 'S.No.' ? '3%' : getWidth(), padding: '2vh 1vw' }} align={row.align} >\n                                <div style={{ display: 'flex', justifyContent: row.align === 'center' ? 'center' : '' }}>\n                                    <div className='colFlex flexCenter'>\n                                        <span data-for={row.name === 'Batch ID' ? 'batchIdHeader' : ''} ref={row.name === 'Batch ID' ? batchIdRef : null} data-tip={name === 'Batch ID' ? 'batchIdHeader' : ''}>{row.label}</span></div>\n                                    {\n                                        !row.allowSort ? null :\n                                            <div className='colFlex' style={{ marginLeft: '1vh' }}>\n                                                <SvgIcon className={classes.sortIcons} style={`fill : ${batchSortDirection == 'ASC' ? 'black' : ''}; width: 13;height: 13;`} src={Images.up}\n                                                    onClick={(e) => setBatchSortDirection('ASC')}\n\n                                                />\n                                                <SvgIcon className={classes.sortIcons} style={`fill : ${batchSortDirection == 'DESC' ? 'black' : ''};width: 13;height: 13;margin-top: -4px`} src={Images.down}\n                                                    onClick={(e) => setBatchSortDirection('DESC')}\n                                                />\n                                            </div>\n                                    }\n\n                                </div>\n\n\n                            </TableCell>\n\n\n                    ))\n                }\n                <TableCell align=\"left\" style={{ width: '5%' }}>\n                    <ColumnConfig role={userStore.user && userStore.user.role} headers={batchHeaders} onComplete={propStore.setBatchHeaders} onChange={onHeaderChange} onReorderEnd={onReorderEnd} />\n                </TableCell>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span></div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/>",
                    "/TableCell>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    181,
                    183
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchHeaders",
                "method_begin": "const setBatchHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    185,
                    187
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    189,
                    213
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalBatches}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => props.goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    Page {batchPageNo} of {Math.ceil(totalBatches / batchesPerPage)}\n\n                </div>\n\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => props.goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={batchesPerPage} setRowsPerPage={props.setBatchesPerPage} />\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    217,
                    236
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli) | <TimeElapsed offsetTimestamp={stopwatchOffset} />",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//",
                    "//todays",
                    "//",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    245,
                    351
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "(<div>{row[`${header.name}`] && Moment(row[`${header.name}`]).format('DD MMM YY, h:mm a')}</div>) | (row.uploadedVia === undefined ?\n                    <div className={classes.uploadedVia}>\n                        <div><SvgIcon src={Images[`${uploadSources.upload.icon}`]} /></div>&nbsp;\n                        <div className='xsFont'>{uploadSources.upload.name}</div>\n                        {/*<div>{uploadSources[`${row.uploadedVia}`].type}</div>*/}\n                    </div>\n                    : null) | (<div>\n                    <div data-tip data-for={'docCount' + index}\n                    //className={classes.docCount}\n                    >{row.filesUploadedCount}</div>\n\n                    {/*row.processedPercentage == 100 ? <ReactTooltip id={'docCount' + index} place='right' effect='solid' className={classes.reasonTooltip} >\n                        <div >\n                            <ul>\n                                <li className='sFont'>Passed : {row.identifiedCount}</li>\n                                <li className='sFont'>Rejected : {row.nonIdentifiedCount}</li>\n                            </ul>\n                        </div>\n                    </ReactTooltip> : null*/}\n                </div>\n                ) | (<div>{((batchPageNo - 1) * batchesPerPage) + index + 1}</div>) | row.filesUploadedCount - row.ocrFailedCount | (\n                        <div>\n                            <div className={classes.rowLink} onClick={() => props.history.push(`/home/ocr-failure/page/1?batchName=${row.name}`)}>{row.ocrFailedCount}</div>\n                        </div>\n                    ) | (<div>{row.ocrFailedCount}</div>) | (\n                    <div className='rowFlex '>\n                        <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                            {row.processedPercentage == 100 ? <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#33cb74' }} align=\"left\" width={row.processedPercentage + '%'} className={classes.percentageLine} />\n                            </div> :\n                                (row.pausedStatus ?\n                                    <hr style={{ backgroundColor: '#fc525c' }} align=\"left\" width={'100%'} className={classes.percentageLine} />\n\n                                    : <LinearProgress classes={{ root: classes.progressRoot1, barColorPrimary: classes.barColorPrimary }} />)\n                            }\n                        </div>\n                        {/*  <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>*/}\n                    </div>\n                ) | (\n                    <div className='rowFlex'>\n                        {constants.label === 'mark-live' ? null : <div data-for={'exportBtn' + index} data-tip={'exportBtn' + index} style={{ cursor: (row.processedPercentage < 100) ? 'not-allowed' : 'pointer', marginRight: '1vw' }}>\n                            <div onClick={() => propStore.exportXls(true, row._id, index)}\n                                className={clsx({ ['custom-btn btn-3']: true, [classes.disProcessBtn]: (row.processedPercentage < 100 || row.filesUploadedCount === 0), sFont: true })}><span >{row.exportedFromUpload ? 'Export Again' : 'Export'}</span></div>\n                            {row.processedPercentage < 100 ? <ReactTooltip id={'exportBtn' + index}>Please wait for OCR processing to complete</ReactTooltip> : null}\n                        </div>}\n                        {(roleAccess.admin.findIndex(x => x === (userStore.user && userStore.user.role)) > -1) ? <div data-for={'reprocess' + index} data-tip={'reprocess' + index} style={{ cursor: (row.processedPercentage < 100 || row.qcStatus !== 'PENDING' || row.filesUploadedCount === 0) ? 'not-allowed' : 'pointer' }}>\n                            <div onClick={() => setCurrentBatch({ type: 'reprocess', data: row })}\n                                className={clsx({ ['custom-btn btn-3 btn-3-1']: true, [classes.disProcessBtn]: (row.processedPercentage < 100 || row.ocrFailedCount || row.qcStatus !== 'PENDING' || row.filesUploadedCount === 0), sFont: true })}><span >{'Reprocess'}</span></div>\n\n                        </div> : null}\n                    </div>\n                ) | <div style={{ cursor: (row.processedPercentage < 100) ? 'not-allowed' : 'pointer' }}>\n                    <div onClick={() => propStore.reprocessBatch(row._id, index)}\n                        className={clsx({ ['custom-btn btn-3']: true, [classes.disProcessBtn]: (row.processedPercentage < 100), sFont: true })}><span >{row.reprocess ? 'Please wait..' : 'Reprocess'}</span></div>\n                </div> | (\n                    <div className={classes.docName}>\n                        <div data-tip data-for={'batchList' + index} className={clsx({ [classes.rowLink]: true, [classes.disRowLink]: row.processedPercentage < 100 || row.filesUploadedCount == 0 })} onClick={() => props.openBatch(row)}>{row[`${header.name}`]}</div>\n                        {row.filesUploadedCount === 0 ?\n                            <ReactTooltip id={'batchList' + index} className='reactTooltip' place='right'><div className='xsFont'><span>All files in this batch have been deleted.</span> </div></ReactTooltip> :\n                            (row.processedPercentage >= 100 || row.step > 0 ?\n                                null\n                                : <ReactTooltip id={'batchList' + index} className='reactTooltip' place='right'><div className='xsFont'>{row.processedPercentage < 100 ? (row.processedPercentage == 0 ?\n                                    (row.pausedStatus ? <span>Processing is paused for <b>{row.uploadedDocType}</b>.<br />{roleAccess.admin.includes(userStore.user && userStore.user.role) ?\n                                     <span>Please upload the updated vendor list<br/> to resume processing.</span>:\n                                     <span>Please contact your Admin to <br/>update the vendor list.</span>\n                                      }</span> : <span>We are experiencing high traffic at this time. <br />Your batch is in queue and OCR shall begin shortly.</span>)\n                                    : 'OCR in progress') : ''}</div></ReactTooltip>)}\n                        {(roleAccess.admin.findIndex(x => x === (userStore.user && userStore.user.role)) > -1) && row.filesUploadedCount > 0 ?\n                            <div className={classes.copyButton}>\n                                <SvgIcon src={Images.delete} style={'width: 14;height:14;fill:gray;'} onClick={() => setCurrentBatch({ type: 'delete', data: row })} />\n                            </div> : null}\n                    </div>\n                ) | <div >{row.workFlow && (row.workFlow.name ? row.workFlow.name : row.workFlow.workflow)}</div> | getTimeElapsed(row) | (<div>{row[`${header.name}`] !== undefined ? row[`${header.name}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "//className={classes.docCount}",
                    "/div>",
                    "/*row.processedPercentage",
                    "/li>",
                    "/li>",
                    "/ul>",
                    "/div>",
                    "/ReactTooltip>",
                    "/}",
                    "/div>",
                    "/div>",
                    "/home/ocr-failure/page/1?batchName=${row.name}",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/*",
                    "/div>*/}",
                    "/div>",
                    "/span></div>",
                    "/ReactTooltip>",
                    "/div>}",
                    "/span></div>",
                    "/div>",
                    "/div>",
                    "/span></div>",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/div></ReactTooltip>",
                    "/b>.<br",
                    "/>{roleAccess.admin.includes(userStore.user",
                    "/>",
                    "/span>:",
                    "/>update",
                    "/span>",
                    "/span>",
                    "/>Your",
                    "/span>",
                    "/div></ReactTooltip>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "const cancelUpload = () => {",
                "method_end": "}",
                "range": [
                    353,
                    355
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    359,
                    361
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDelete",
                "method_begin": "const confirmDelete = () => {",
                "method_end": "}",
                "range": [
                    363,
                    371
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmReprocess",
                "method_begin": "const confirmReprocess = () => {",
                "method_end": "}",
                "range": [
                    373,
                    381
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    383,
                    385
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadDialog.js": {
        "method_details_": [
            {
                "method_name": "setWorkflow",
                "method_begin": "const setWorkflow = (value) => {",
                "method_end": "}",
                "range": [
                    48,
                    53
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickSelect",
                "method_begin": "const onClickSelect = () => {",
                "method_end": "}",
                "range": [
                    57,
                    60
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderUploadTypes",
                "method_begin": "const renderUploadTypes = () => {",
                "method_end": "}",
                "range": [
                    62,
                    73
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadDialog.js",
                "returnType": "(\n            Object.keys(sources).map((row, index) => (\n                <div\n                    className={clsx({ 'sFont': true, [classes.uploadSource]: true, [classes.activeSource]: sources[row].type === uploadSource })}\n                    key={'sources' + index}\n                    onClick={() => setUploadSource(sources[row].type)}>\n                    {sources[row].label}\n                </div>\n            ))\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickAddWorkflow",
                "method_begin": "const onClickAddWorkflow = () => {",
                "method_end": "}",
                "range": [
                    76,
                    81
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/input/new"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "const cancelUpload = () => {",
                "method_end": "}",
                "range": [
                    83,
                    86
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Batch/UploadDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ApiConfig/ApiConfig.js": {
        "method_details_": [
            {
                "method_name": "onWhitelistAllIps",
                "method_begin": "const onWhitelistAllIps = (value) => {",
                "method_end": "}",
                "range": [
                    47,
                    52
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ApiConfig/ApiConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    55,
                    57
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ApiConfig/ApiConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "saveWhiteListing",
                "method_begin": "const saveWhiteListing = () => {",
                "method_end": "}",
                "range": [
                    59,
                    85
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ApiConfig/ApiConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickDelete",
                "method_begin": "const onClickDelete = (index) => {",
                "method_end": "}",
                "range": [
                    87,
                    89
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ApiConfig/ApiConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "generateApiKey",
                "method_begin": "const generateApiKey = () => {",
                "method_end": "}",
                "range": [
                    91,
                    99
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ApiConfig/ApiConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelKeyDialog",
                "method_begin": "const cancelKeyDialog = () => {",
                "method_end": "}",
                "range": [
                    101,
                    103
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ApiConfig/ApiConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ApiConfig/ViewPayload.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigDialog.js": {
        "method_details_": [
            {
                "method_name": "renderComponent",
                "method_begin": "const renderComponent = () => {",
                "method_end": "}",
                "range": [
                    36,
                    57
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigDialog.js",
                "returnType": "<InputSource clickContinue={clickContinue} step={1} /> | <InputSource clickContinue={clickContinue} step={2} /> | <OcrConfig clickContinue={clickContinue} screen={configScreens[currentPage]} component={'SELF'} /> | <OcrConfig clickContinue={clickContinue} screen={configScreens[currentPage]} component={<OcrAliasForm />} /> | <OcrConfig clickContinue={clickContinue} screen={configScreens[currentPage]} component={<OcrApiForm />} /> | <OutputSource step={5} /> | <OutputPreview /> | <OutputSource step={6} /> | <OutputPreview />",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/>",
                    "/>}",
                    "/>",
                    "/>}",
                    "/>",
                    "/>",
                    "/>",
                    "/>",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderFormActions",
                "method_begin": "const renderFormActions = () => {",
                "method_end": "}",
                "range": [
                    59,
                    99
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigDialog.js",
                "returnType": "<SimpleButton label='Continue' onClick={clickContinue} disabled={configName === ''} /> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={inputType === ''} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={!docTypes.length} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={checkOcrAliasForm()} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={!checkOcrApiForm()} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={checkOcrAliasForm()} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={checkOcrAliasForm()} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Confirm' onClick={clickContinue} progress={createProgress} />\n                </div>",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkOcrAliasForm",
                "method_begin": "const checkOcrAliasForm = () => {",
                "method_end": "}",
                "range": [
                    105,
                    112
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigDialog.js",
                "returnType": "invalid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkOcrApiForm",
                "method_begin": "const checkOcrApiForm = () => {",
                "method_end": "}",
                "range": [
                    114,
                    123
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigDialog.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "clickContinue",
                "method_begin": "const clickContinue = () => {",
                "method_end": "}",
                "range": [
                    125,
                    167
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "clickBack",
                "method_begin": "const clickBack = () => {",
                "method_end": "}",
                "range": [
                    169,
                    171
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigFooter.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigHome.js": {
        "method_details_": [
            {
                "method_name": "onCardClick",
                "method_begin": "const onCardClick = (row) => {",
                "method_end": "}",
                "range": [
                    25,
                    36
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/home/configuration/manage-users/all/1"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigStepper.js": {
        "method_details_": [
            {
                "method_name": "ColorlibStepIcon",
                "method_begin": "function ColorlibStepIcon(props)",
                "method_end": ");",
                "range": [
                    78,
                    115
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigStepper.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>,",
                    "/>,",
                    "/>,",
                    "/>,",
                    "/>,",
                    "/>,",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    177,
                    200
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/ConfigStepper.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}>",
                    "/StepLabel>",
                    "/Step>",
                    "/Stepper>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/CreateDbConfig.js": {
        "method_details_": [
            {
                "method_name": "handleConfigChange",
                "method_begin": "const handleConfigChange = (type, value) => {",
                "method_end": "}",
                "range": [
                    46,
                    50
                ],
                "parameters": [
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/CreateDbConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCancel",
                "method_begin": "const onClickCancel = () => {",
                "method_end": "}",
                "range": [
                    52,
                    55
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/CreateDbConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkValidUrl",
                "method_begin": "const checkValidUrl = (value) => {",
                "method_end": "}",
                "range": [
                    57,
                    72
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/CreateDbConfig.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    74,
                    125
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/CreateDbConfig.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/(https?:\\/\\/(?:www\\.|(?!www",
                    "/^(102[0-3]|10[0-1]\\d|[1-9][0-9]{0,2}|0"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSubmit",
                "method_begin": "const onSubmit = () => {",
                "method_end": "}",
                "range": [
                    128,
                    144
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/CreateDbConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js": {
        "method_details_": [
            {
                "method_name": "setBatchesPerPage",
                "method_begin": "const setBatchesPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    65,
                    68
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    98,
                    110
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    120,
                    122
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    124,
                    146
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row.label}\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderProcessingStatus",
                "method_begin": "const renderProcessingStatus = (value) => {",
                "method_end": "}",
                "range": [
                    148,
                    159
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "(\n            // value < 100 ?\n            true ?\n                <div className={classes.processingLoader} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div> :\n                <div className={`${classes.processingLoader} ${classes.ocrComplete}`} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    161,
                    166
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/${workflowFilter}/${pageNo",
                    "/home/configuration/${workflowFilter}/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    168,
                    170
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchHeaders",
                "method_begin": "const setBatchHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    172,
                    174
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    176,
                    202
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "null | (\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalWebhookConfigs}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (10) + 1)}\n                    -\n                    {pageNo * 10 <= totalWebhookConfigs ? (pageNo * 10) : totalWebhookConfigs\n                    }\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {/*<RowsPerPage value={10} setRowsPerPage={setBatchesPerPage} />*/}\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/*<RowsPerPage",
                    "/>*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatch",
                "method_begin": "const openBatch = (data) => {",
                "method_end": "}",
                "range": [
                    204,
                    212
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${data._id}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    214,
                    225
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickNewConfig",
                "method_begin": "const onClickNewConfig = () => {",
                "method_end": "}",
                "range": [
                    236,
                    239
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelCreate",
                "method_begin": "const cancelCreate = () => {",
                "method_end": "}",
                "range": [
                    241,
                    244
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeTestResult",
                "method_begin": "const closeTestResult = () => {",
                "method_end": "}",
                "range": [
                    246,
                    250
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setWebhookForDelete",
                "method_begin": "const setWebhookForDelete = (row, type) => {",
                "method_end": "}",
                "range": [
                    252,
                    255
                ],
                "parameters": [
                    "row",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    257,
                    266
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    268,
                    270
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header) => {",
                "method_end": "}",
                "range": [
                    272,
                    307
                ],
                "parameters": [
                    "row",
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "(<div>{row[`${header.name}`] && Moment(row[`${header.name}`]).format('DD MMM YY, h:mm a')}</div>) | (row.uploadedVia === undefined ?\n                    <div className={classes.uploadedVia}>\n                        <div><SvgIcon src={Images[`${uploadSources.upload.icon}`]} /></div>&nbsp;\n                        <div className='xsFont'>{uploadSources.upload.name}</div>\n                        {/*<div>{uploadSources[`${row.uploadedVia}`].type}</div>*/}\n                    </div>\n                    : null) | (\n                    <div className='rowFlex '>\n                        <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                            <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#33cb74' }} align=\"left\" width={row.processedPercentage + '%'} className={classes.percentageLine} />\n                            </div>\n                        </div>\n                        <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>\n                    </div>\n                ) | <div onClick={() => configStore.exportXls(true, row._id)}\n                    className={clsx({ ['custom-btn btn-3']: true, [classes.disProcessBtn]: row.processedPercentage < 100, sFont: true })}><span style={{ padding: '1vh 1vw' }}>{row.exportedFromUpload ? 'Process Again' : 'Process Now'}</span></div> | <div className={classes.rowLink} onClick={() => openBatch(row)}>{row[`${header.name}`]}</div> | <div >{row.workFlow && row.workFlow.name}</div> | getTimeElapsed(row) | (<div>{row[`${header.name}`]}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span></div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickEdit",
                "method_begin": "const onClickEdit = (value) => {",
                "method_end": "}",
                "range": [
                    309,
                    312
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "testDb",
                "method_begin": "const testDb = (value) => {",
                "method_end": "}",
                "range": [
                    314,
                    328
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DbConfig/DbTest.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DocumentConfig/ConfigList.js": {
        "method_details_": [
            {
                "method_name": "handlePageClick",
                "method_begin": "const handlePageClick = (data) => {",
                "method_end": "};",
                "range": [
                    42,
                    46
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DocumentConfig/ConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    53,
                    70
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DocumentConfig/ConfigList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n                    {\n                        tableHeaders.map((row, index) => (\n                            (\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row}\n                                </TableCell>\n                            )\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    72,
                    75
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DocumentConfig/ConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    77,
                    79
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DocumentConfig/ConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentConfig",
                "method_begin": "const setCurrentConfig = (index) => {",
                "method_end": "}",
                "range": [
                    81,
                    83
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DocumentConfig/ConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setConfigForDelete",
                "method_begin": "const setConfigForDelete = (index) => {",
                "method_end": "}",
                "range": [
                    85,
                    88
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/DocumentConfig/ConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/CreateIpConfig.js": {
        "method_details_": [
            {
                "method_name": "handleConfigChange",
                "method_begin": "const handleConfigChange = (type, value) => {",
                "method_end": "}",
                "range": [
                    46,
                    56
                ],
                "parameters": [
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/CreateIpConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCancel",
                "method_begin": "const onClickCancel = () => {",
                "method_end": "}",
                "range": [
                    58,
                    61
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/CreateIpConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkValidUrl",
                "method_begin": "const checkValidUrl = (value) => {",
                "method_end": "}",
                "range": [
                    63,
                    78
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/CreateIpConfig.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    80,
                    118
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/CreateIpConfig.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/(https?:\\/\\/(?:www\\.|(?!www",
                    "/^(102[0-3]|10[0-1]\\d|[1-9][0-9]{0,2}|0"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSubmit",
                "method_begin": "const onSubmit = () => {",
                "method_end": "}",
                "range": [
                    121,
                    137
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/CreateIpConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js": {
        "method_details_": [
            {
                "method_name": "setBatchesPerPage",
                "method_begin": "const setBatchesPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    69,
                    72
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    102,
                    114
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    124,
                    126
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    128,
                    150
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row.label}\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderProcessingStatus",
                "method_begin": "const renderProcessingStatus = (value) => {",
                "method_end": "}",
                "range": [
                    152,
                    163
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "(\n            // value < 100 ?\n            true ?\n                <div className={classes.processingLoader} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div> :\n                <div className={`${classes.processingLoader} ${classes.ocrComplete}`} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    165,
                    170
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/${workflowFilter}/${pageNo",
                    "/home/configuration/${workflowFilter}/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    172,
                    174
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchHeaders",
                "method_begin": "const setBatchHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    176,
                    178
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    180,
                    206
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "null | (\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalIpConfigs}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (10) + 1)}\n                    -\n                    {pageNo * 10 <= totalIpConfigs ? (pageNo * 10) : totalIpConfigs\n                    }\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {/*<RowsPerPage value={10} setRowsPerPage={setBatchesPerPage} />*/}\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/*<RowsPerPage",
                    "/>*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatch",
                "method_begin": "const openBatch = (data) => {",
                "method_end": "}",
                "range": [
                    208,
                    216
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${data._id}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    218,
                    229
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickNewConfig",
                "method_begin": "const onClickNewConfig = () => {",
                "method_end": "}",
                "range": [
                    240,
                    243
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelCreate",
                "method_begin": "const cancelCreate = () => {",
                "method_end": "}",
                "range": [
                    245,
                    248
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeTestResult",
                "method_begin": "const closeTestResult = () => {",
                "method_end": "}",
                "range": [
                    250,
                    254
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setWebhookForDelete",
                "method_begin": "const setWebhookForDelete = (row, type) => {",
                "method_end": "}",
                "range": [
                    256,
                    259
                ],
                "parameters": [
                    "row",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    261,
                    270
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    272,
                    274
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header) => {",
                "method_end": "}",
                "range": [
                    276,
                    311
                ],
                "parameters": [
                    "row",
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "(<div>{row[`${header.name}`] && Moment(row[`${header.name}`]).format('DD MMM YY, h:mm a')}</div>) | (row.uploadedVia === undefined ?\n                    <div className={classes.uploadedVia}>\n                        <div><SvgIcon src={Images[`${uploadSources.upload.icon}`]} /></div>&nbsp;\n                        <div className='xsFont'>{uploadSources.upload.name}</div>\n                        {/*<div>{uploadSources[`${row.uploadedVia}`].type}</div>*/}\n                    </div>\n                    : null) | (\n                    <div className='rowFlex '>\n                        <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                            <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#33cb74' }} align=\"left\" width={row.processedPercentage + '%'} className={classes.percentageLine} />\n                            </div>\n                        </div>\n                        <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>\n                    </div>\n                ) | <div onClick={() => configStore.exportXls(true, row._id)}\n                    className={clsx({ ['custom-btn btn-3']: true, [classes.disProcessBtn]: row.processedPercentage < 100, sFont: true })}><span style={{ padding: '1vh 1vw' }}>{row.exportedFromUpload ? 'Process Again' : 'Process Now'}</span></div> | <div className={classes.rowLink} onClick={() => openBatch(row)}>{row[`${header.name}`]}</div> | <div >{row.workFlow && row.workFlow.name}</div> | getTimeElapsed(row) | (<div>{row[`${header.name}`]}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span></div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickEdit",
                "method_begin": "const onClickEdit = (value) => {",
                "method_end": "}",
                "range": [
                    313,
                    316
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "testIpConfig",
                "method_begin": "const testIpConfig = (value) => {",
                "method_end": "}",
                "range": [
                    318,
                    332
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startReadingFiles",
                "method_begin": "const startReadingFiles = (value) => {",
                "method_end": "}",
                "range": [
                    334,
                    348
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputConfig/IpTest.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputSource.js": {
        "method_details_": [
            {
                "method_name": "renderTooltip",
                "method_begin": "const renderTooltip = (row) => {",
                "method_end": "}",
                "range": [
                    35,
                    41
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputSource.js",
                "returnType": "(\n            <div className={'rowFlex'}>\n                <SvgIcon src={Images.error} style={\"fill : black \"} />\n                <div>&nbsp;&nbsp;{inputSourceDesc[`${row}`]}</div></div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div></div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleInputSourceChange",
                "method_begin": "const handleInputSourceChange = (value) => {",
                "method_end": "}",
                "range": [
                    43,
                    45
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/InputSource.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/ConfigFilters.js": {
        "method_details_": [
            {
                "method_name": "handleFilterChange",
                "method_begin": "const handleFilterChange = (value) => {",
                "method_end": "}",
                "range": [
                    40,
                    50
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/ConfigFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/document/${value}/1",
                    "/home/configuration/workflow/${value}/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRadioFilters",
                "method_begin": "const renderRadioFilters = () => {",
                "method_end": "}",
                "range": [
                    52,
                    84
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/ConfigFilters.js",
                "returnType": "(\n            <div className='rowFlex'  >\n                <FormControl component=\"fieldset\" style={{ width: '100%' }}>\n                    <RadioGroup\n                        aria-label=\"vType\"\n                        defaultValue=\"OCR\"\n                        name=\"radio-buttons-group\"\n                        className={classes.radioCont}\n                        value={type === 'docConfig' ? configFilter : workflowFilter}\n                        onChange={(e) => handleFilterChange(e.target.value)}\n                    >\n                        {\n                            (type === 'docConfig' ? docConfigFilter : workflowFilters).map((row, index) => (\n                                <FormControlLabel classes={{ label: `${classes.vRadio} mFont` }} className={classes.smallRadioButton} key={'vTypes' + index} value={row.value}\n                                    control={<Radio color='primary' classes={{ root: classes.radioRoot }} />}\n                                    label={\n                                        <div className='rowFlex mFont'>\n                                            <div>{row.label}</div>&nbsp;\n                                            <div data-for={row.value + index} data-tip={row.value + index} className='colFlex flexCenter'>  <SvgIcon src={Images.info} style={'width:12;height:12;'} />\n                                                <ReactTooltip id={row.value + index}>{row.helperMessage}</ReactTooltip>\n                                            </div>\n                                        </div>\n                                    } />\n                            ))\n                        }\n                    </RadioGroup>\n                </FormControl>\n            </div>\n        ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/div>&nbsp;",
                    "/>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/RadioGroup>",
                    "/FormControl>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js": {
        "method_details_": [
            {
                "method_name": "handleMappingChange",
                "method_begin": "const handleMappingChange = (index, type, value, keyType) => {",
                "method_end": "}",
                "range": [
                    99,
                    125
                ],
                "parameters": [
                    "index",
                    "type",
                    "value",
                    "keyType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocFields",
                "method_begin": "const getDocFields = (index) => {",
                "method_end": "}",
                "range": [
                    127,
                    130
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "config.uploadTypes[index] && config.uploadTypes[index].mapping && config.uploadTypes[index].mapping.defaultFields ?\n            config.uploadTypes[index].mapping.defaultFields : []",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "disableSave",
                "method_begin": "const disableSave = () => {",
                "method_end": "}",
                "range": [
                    132,
                    172
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "disabled",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkTrialUserConditions",
                "method_begin": "const checkTrialUserConditions = () => {",
                "method_end": "}",
                "range": [
                    174,
                    213
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    215,
                    382
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "errorObj | errorObj | errorObj | errorObj | errorObj | errorObj",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//Check",
                    "/*",
                    "//Check",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "saveMapping",
                "method_begin": "const saveMapping = () => {",
                "method_end": "}",
                "range": [
                    384,
                    520
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*if"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addKey",
                "method_begin": "const addKey = (e) => {",
                "method_end": "}",
                "range": [
                    523,
                    527
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addColumn",
                "method_begin": "const addColumn = (e, type) => {",
                "method_end": "}",
                "range": [
                    529,
                    533
                ],
                "parameters": [
                    "e",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index, type) => {",
                "method_end": "}",
                "range": [
                    536,
                    658
                ],
                "parameters": [
                    "row",
                    "header",
                    "index",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "(\n                    <SimpleTextBox disabled={type !== 'columns' && currentMapping.externalDataPresent && vendorFields.includes(row.key)} rootClass={classes.inputField} noBorder={true} label='' placeholder='e.g. Date of Admission, Invoice Number' from='mapping' value={row.key} onChange={(e) => handleMappingChange(index, type, e.target.value, header.type)} multiline={true} maxRows={1} />\n                ) | (\n                    <SimpleTextBox disabled={type !== 'columns' && currentMapping.externalDataPresent && vendorFields.includes(row.exportKey)} rootClass={classes.inputField} noBorder={true} label='' placeholder='e.g. invoice_num' from='mapping' value={row.exportKey} onChange={(e) => handleMappingChange(index, type, e.target.value, header.type)} multiline={true} maxRows={1} />\n                ) | (<SimpleTextBox disabled={type !== 'columns' && currentMapping.externalDataPresent && vendorFields.includes(row.key)} rootClass={classes.inputField} noBorder={true} placeholder=' e.g. Date when the bill was received , Transaction on the last business day of the month.' from='mapping' value={row.description} multiline={true} maxRows={1} onChange={(e) => handleMappingChange(index, type, e.target.value, header.type)} />\n                ) | (\n                    <SelectBox disabled={type !== 'columns' && currentMapping.externalDataPresent && vendorFields.includes(row.key)} noBorder={true} label={''} onChange={(e) => handleMappingChange(index, type, e.target.value, header.type)}\n                        value={row.dataType}\n                        options={\n                            ['string', 'date', 'alphanumeric', 'number'].map((field, fieldIndex) => (\n                                <MenuItem key={'field' + index + fieldIndex} value={field} classes={{ selected: classes.selectedMenuItem }} className={classes.menuItem}>\n                                    {field && modifyText(field)}\n                                </MenuItem>\n                            ))\n                        }\n                    />\n                ) | (\n                    <SimpleTextBox rootClass={classes.inputField} noBorder={true}\n                        disabled={(user && user.role) !== 'SUPER_ADMIN'}\n                        from='mapping' value={row.threshHoldConfidenceScore} multiline={true} maxRows={1} onChange={(e) => handleMappingChange(index, type, e.target.value, header.type)} />\n\n                ) | (\n                    <div className='rowFlex'>\n                        <div className='fullHeight colFlex flexCenter' style={{ width: 'fit-content', marginLeft: '1vw' }}>\n                            <Checkbox className={classes.checkbox}\n                                disabled={type !== 'columns' && currentMapping.externalDataPresent && vendorFields.includes(row.key)}\n                                checkedIcon={<CheckboxIcon checked={true} disabled={type !== 'columns' && currentMapping.externalDataPresent && vendorFields.includes(row.key)} />}\n                                checked={row.isRequired ? (row.isRequired.toString() === \"true\" ? true : false) : false}\n                                icon={<CheckboxIcon checked={false} />}\n                                onChange={(e, value) => handleMappingChange(index, type, value, header.type)}\n                                color=\"primary\"\n                                inputProps={{ classes: { root: classes.checkbox } }} />\n                        </div>\n                        {currentMapping.isDefaultDoc || (type !== 'columns' && currentMapping.externalDataPresent && vendorFields.includes(row.key)) ? null : <div className='colFlex flexCenter'><SvgIcon src={Images.delete} onClick={() => type === 'columns' ? mappingStore.deleteColumn(index) : mappingStore.deleteMappingKey(index)} /></div>}\n\n                    </div>\n                ) | (\n                    <div className='rowFlex'>\n                        <div className='fullHeight colFlex flexCenter' style={{ width: 'fit-content', marginLeft: '1vw' }}>\n                            <Checkbox className={classes.checkbox}\n                                checkedIcon={<CheckboxIcon checked={true} disabled={row.matchKey === undefined || row.columnHeader === ' ' || row.columnHeader === ''} />}\n                                checked={row.matchKey ? (row.matchKey.toString() === \"true\" ? true : false) : false}\n                                icon={<CheckboxIcon checked={false} disabled={row.matchKey === undefined || row.keyMapping === 'Vendor ID' || row.columnHeader === ' ' || row.columnHeader === ''} />}\n                                onChange={(e, value) => row.keyMapping === ' ' || row.matchKey === undefined || row.columnHeader === ' ' || row.columnHeader === '' ? undefined : handleMappingChange(index, 'externalSheet', value, header.type)}\n                                color=\"primary\"\n                                unche\n                                inputProps={{ classes: { root: classes.checkbox } }} />\n                        </div>\n\n                    </div>\n                ) | (\n                    <div className='rowFlex'>\n\n                        {currentMapping.isDefaultDoc ? null : <div className='colFlex flexCenter'><SvgIcon src={Images.delete} onClick={() => mappingStore.deleteExternalData(index)} /></div>}\n\n                    </div>\n                ) | (\n                    <SelectBox key={'fielding' + index + row.columnHeader} noBorder={true} label={''} onChange={(e) => handleMappingChange(index, 'externalSheet', e.target.value, header.type)}\n                        value={row.columnHeader} from='docType'\n                        options={\n                            row.keyMapping === 'Header Table' ?\n                                headerTableOptions && headerTableOptions.map((field, fieldIndex) => (\n                                    <MenuItem key={'field' + index + fieldIndex}\n                                        value={field.value} classes={{ selected: classes.selectedMenuItem }} className={classes[`${field.className}`]}>\n                                        {field.key}\n                                    </MenuItem>\n                                )) :\n                                extractedColumns && extractedColumns.map((field, fieldIndex) => (\n                                    (row.matchKey === true && field.key === '--NONE--') ? null :\n                                        <MenuItem key={'field' + index + fieldIndex}\n                                            value={field.value} classes={{ selected: classes.selectedMenuItem }} className={classes.menuItem}>\n                                            {field.key}\n                                        </MenuItem>\n                                ))\n                        }\n                    />\n                ) | (\n                    <SimpleTextBox rootClass={classes.inputField} noBorder={true} label='' placeholder='e.g. Date of Admission, Invoice Number' from='mapping' value={row.columnHeader}\n                        // onChange={(e) => handleMappingChange(index, 'externalSheet', e.target.value, header.type)} \n                        multiline={true} maxRows={1} />\n                ) | (\n                    <SimpleTextBox rootClass={classes.inputField} noBorder={true} label='' placeholder='e.g. Date of Admission, Invoice Number' from='mapping' value={row.keyMapping}\n                        // onChange={(e) => handleMappingChange(index, 'externalSheet', e.target.value, header.type)} \n                        multiline={true} maxRows={1} />\n                ) | (\n                    <SelectBox noBorder={true} label={''} onChange={(e) => handleMappingChange(index, 'externalSheet', e.target.value, header.type)}\n                        value={row.keyMapping} from='docType' placeholder=\"--NONE--\"\n                        options={\n                            currentMapping.mapping && currentMapping.mapping.map((field, fieldIndex) => (\n                                field.key && field.key.trim().length && vendorFields.includes(field.key && field.key.trim()) ?\n                                    <MenuItem key={'field' + index + fieldIndex} disabled={field.selected != index && field.selected !== undefined} value={field.key} classes={{ selected: classes.selectedMenuItem }} className={classes.menuItem}>\n                                        {field.key}\n                                    </MenuItem> : null\n                            ))\n                        }\n                    />\n                )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/>",
                    "/MenuItem>",
                    "/>",
                    "/>",
                    "/>}",
                    "/>}",
                    "/>",
                    "/div>",
                    "/></div>}",
                    "/div>",
                    "/>}",
                    "/>}",
                    "/>",
                    "/div>",
                    "/div>",
                    "/></div>}",
                    "/div>",
                    "/MenuItem>",
                    "/MenuItem>",
                    "/>",
                    "//",
                    "/>",
                    "//",
                    "/>",
                    "/MenuItem>",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    660,
                    690
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/input/new/retain",
                    "/home/configuration/workflow/create/input/${type}/retain",
                    "/home/configuration/document/custom/1",
                    "/home/configuration/document/static/1",
                    "/home/configuration/document/custom/1",
                    "/home/configuration/document/custom/1",
                    "/home/configuration/document/custom/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderExternalData",
                "method_begin": "const renderExternalData = () => {",
                "method_end": "}",
                "range": [
                    692,
                    745
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "(\n                <div style={{ maxHeight: '33vh', width: '100%' }}>\n                    <TableContainer elevation={0} component={Paper} className={'colFlex'}\n                        style={{ maxHeight: '33vh', overflowX: 'hidden' }}\n                    >\n                        <Table className={classes.table} aria-label=\"simple table\" stickyHeader >\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell style={{ width: '5%' }} className={classes.tableHeader}>\n                                        S.No.\n                                    </TableCell>\n                                    {\n                                        externalTableHeaders.map((row, index) => (\n                                            !row.selected ? null :\n                                                <TableCell align={row.align} className={classes.tableHeader} style={{ width: row.width }} >\n                                                    <div style={{ display: 'flex', justifyContent: row.align === 'center' ? 'center' : '' }}>\n                                                        <div className='colFlex flexCenter'>\n                                                            <span >{row.label}{row.required ? '*' : null}</span></div>\n                                                    </div>\n                                                </TableCell>\n                                        ))\n                                    }\n                                </TableRow>\n                            </TableHead>\n                            <TableBody id='myTableBody'>\n                                {\n                                    currentMapping.externalSheet.map((row, index) => (\n                                        <TableRow key={row._id}  >\n                                            <TableCell className={`${classes.tableHeader} ${classes.noRightBorder}`}>\n                                                <div>{index + 1}</div>\n                                            </TableCell>\n                                            {externalTableHeaders.map((header) => {\n                                                return (<TableCell className={`${classes.tableCell} ${errors[index] && errors[index][header.type]} ${(user && user.role) != 'SUPER_ADMIN' && header.type === 'threshHoldConfidenceScore' ? classes.disabledInput : ''}`} align=\"left\">{renderTableData(row, header, index, type === 'columns' ? 'columns' : header.type)}</TableCell>)\n\n                                            })}\n\n                                        </TableRow>\n                                    ))\n                                }\n\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </div>\n            ) | (<TableCell className={`${classes.tableCell} ${errors[index] && errors[index][header.type]} ${(user && user.role) != 'SUPER_ADMIN' && header.type === 'threshHoldConfidenceScore' ? classes.disabledInput : ''}`} align=\"left\">{renderTableData(row, header, index, type === 'columns' ? 'columns' : header.type)}</TableCell>) | (\n            <div className='fullWidth'>\n                <ExternalSheetUpload hideUpload={hideUpload} />\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/span></div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>",
                    "/div>",
                    "/TableCell>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderMappings",
                "method_begin": "const renderMappings = (type) => {",
                "method_end": "}",
                "range": [
                    747,
                    810
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "renderExternalData() | null | (\n            <div style={{ maxHeight: '33vh', width: '100%' }}>\n                <TableContainer elevation={0} component={Paper} className={'colFlex'}\n                    style={{ maxHeight: '33vh', overflowX: 'hidden' }}\n                >\n                    <Table className={classes.table} aria-label=\"simple table\" stickyHeader >\n                        <TableHead>\n                            <TableRow>\n                                <TableCell style={{ width: '5%' }} className={classes.tableHeader}>\n                                    S.No.\n                                </TableCell>\n                                {\n                                    tableHeaders.map((row, index) => (\n                                        !row.selected ? null :\n                                            <TableCell align={row.align} className={classes.tableHeader} style={{ width: row.width }} >\n                                                <div style={{ display: 'flex', justifyContent: row.align === 'center' ? 'center' : '' }}>\n                                                    <div className='colFlex flexCenter'>\n                                                        <span >{row.label}{row.required ? '*' : null}</span></div>\n                                                </div>\n                                            </TableCell>\n                                    ))\n                                }\n                            </TableRow>\n                        </TableHead>\n                        <TableBody id='myTableBody'>\n                            {\n                                values ? values.map((row, index) => (\n                                    <TableRow key={row._id}  >\n                                        <TableCell className={`${classes.tableHeader} ${classes.noRightBorder}`}>\n                                            <div>{index + 1}</div>\n                                        </TableCell>\n                                        {tableHeaders.map((header) => {\n                                            return (<TableCell className={`${classes.tableCell} ${type !== 'Table Configuration' && currentMapping.externalDataPresent && vendorFields.includes(row.key) ? classes.disabledInput : ''}  ${errors[index] && errors[index][header.type]} ${(user && user.role) != 'SUPER_ADMIN' && header.type === 'threshHoldConfidenceScore' ? classes.disabledInput : ''}`} align=\"left\">{renderTableData(row, header, index, type === 'Table Configuration' ? 'columns' : header.type)}</TableCell>)\n\n                                        })}\n\n                                    </TableRow>\n                                )) : null\n                            }\n\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        ) | (<TableCell className={`${classes.tableCell} ${type !== 'Table Configuration' && currentMapping.externalDataPresent && vendorFields.includes(row.key) ? classes.disabledInput : ''}  ${errors[index] && errors[index][header.type]} ${(user && user.role) != 'SUPER_ADMIN' && header.type === 'threshHoldConfidenceScore' ? classes.disabledInput : ''}`} align=\"left\">{renderTableData(row, header, index, type === 'Table Configuration' ? 'columns' : header.type)}</TableCell>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/span></div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>",
                    "/div>",
                    "/TableCell>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openUpload",
                "method_begin": "const openUpload = (e) => {",
                "method_end": "}",
                "range": [
                    812,
                    815
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "hideUpload",
                "method_begin": "const hideUpload = () => {",
                "method_end": "}",
                "range": [
                    817,
                    819
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmVendorDialog",
                "method_begin": "const confirmVendorDialog = () => {",
                "method_end": "}",
                "range": [
                    821,
                    826
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelVendorDialog",
                "method_begin": "const cancelVendorDialog = () => {",
                "method_end": "}",
                "range": [
                    828,
                    830
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmShowMsg",
                "method_begin": "const confirmShowMsg = () => {",
                "method_end": "}",
                "range": [
                    831,
                    835
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//props.history.push(",
                    "/home/configuration/externalData/${currentMapping.documentType}/1/overall"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openResetDialog",
                "method_begin": "const openResetDialog = (e) => {",
                "method_end": "}",
                "range": [
                    837,
                    840
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmResetDialog",
                "method_begin": "const confirmResetDialog = () => {",
                "method_end": "}",
                "range": [
                    842,
                    845
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelResetDialog",
                "method_begin": "const cancelResetDialog = () => {",
                "method_end": "}",
                "range": [
                    847,
                    849
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateDocConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateEditMapping.js": {
        "method_details_": [
            {
                "method_name": "handleMappingChange",
                "method_begin": "const handleMappingChange = (index, type, value) => {",
                "method_end": "}",
                "range": [
                    53,
                    56
                ],
                "parameters": [
                    "index",
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateEditMapping.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocFields",
                "method_begin": "const getDocFields = (index) => {",
                "method_end": "}",
                "range": [
                    59,
                    62
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateEditMapping.js",
                "returnType": "config.uploadTypes[index] && config.uploadTypes[index].mapping && config.uploadTypes[index].mapping.defaultFields ?\n            config.uploadTypes[index].mapping.defaultFields : []",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "disableSave",
                "method_begin": "const disableSave = () => {",
                "method_end": "}",
                "range": [
                    64,
                    98
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateEditMapping.js",
                "returnType": "disabled",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkTrialUserConditions",
                "method_begin": "const checkTrialUserConditions = () => {",
                "method_end": "}",
                "range": [
                    100,
                    140
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateEditMapping.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "saveMapping",
                "method_begin": "const saveMapping = () => {",
                "method_end": "}",
                "range": [
                    142,
                    192
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateEditMapping.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/document"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addKey",
                "method_begin": "const addKey = () => {",
                "method_end": "}",
                "range": [
                    194,
                    197
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateEditMapping.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addColumn",
                "method_begin": "const addColumn = () => {",
                "method_end": "}",
                "range": [
                    199,
                    202
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateEditMapping.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    204,
                    216
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateEditMapping.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/input/new/retain",
                    "/home/configuration/workflow/create/input/${type}/retain",
                    "/home/configuration/document"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderMappings",
                "method_begin": "const renderMappings = () => {",
                "method_end": "}",
                "range": [
                    218,
                    282
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateEditMapping.js",
                "returnType": "(\n            <div style={{ height: '100%', width: '90%' }}>\n                <div className={classes.mappingHeaders}>\n                    <div className={`${classes.ruleRow} mFont`} style={{ width: '10%' }}>Sl No.</div>\n                    <div className={`${classes.ruleRow} mFont`}>Key Name *</div>\n                    <div className={`${classes.ruleRow} mFont`} style={{ width: '65%' }}>Description</div>\n                    <div className={`${classes.ruleRow} mFont`} style={{ width: '30%' }}>Data type *</div>\n                    <div className={`${classes.ruleRow} mFont`} style={{ width: '8%' }}>\n                        <div className='colFlex flexCenter'>Mandatory</div>\n                        &nbsp;&nbsp;<Tooltip arrow placement='bottom' title={\"Check this box if the key is mandatory. Leaving it unchecked will make it an optional key.\"}><div className='colFlex flexCenter'><SvgIcon src={Images.info} /></div></Tooltip>\n                    </div>\n                </div>\n                <div className={classes.mappingForm} >\n                    {\n                        currentMapping.mapping ? currentMapping.mapping.map((row, index) => (\n                            <div key={index} className={classes.formRow}>\n                                <div style={{ width: '10%' }} className='mFont colFlex flexCenter'>\n                                    {index + 1}.\n                                </div>\n                                <div className={classes.rowField}>\n                                    <SimpleTextBox label='' placeholder='e.g. Date of Admission, Invoice Number' from='mapping' value={row.key} onChange={(e) => handleMappingChange(index, 'key', e.target.value)} multiline={true} maxRows={1} />\n                                </div>\n                                <div className={classes.rowField} style={{ width: '65%' }}>\n                                    <SimpleTextBox placeholder=' e.g. Date when the bill was received , Transaction on the last business day of the month.' from='mapping' value={row.description} multiline={true} maxRows={1} onChange={(e) => handleMappingChange(index, 'description', e.target.value)} />\n                                </div>\n                                <div className={classes.rowField} style={{ width: '30%' }}>\n                                    <SelectBox label={''} type='mapping' onChange={(e) => handleMappingChange(index, 'dataType', e.target.value)}\n                                        value={row.dataType}\n                                        options={\n                                            ['string', 'date', 'alphanumeric', 'number'].map((field, fieldIndex) => (\n                                                <MenuItem key={'field' + index + fieldIndex} value={field} classes={{ selected: classes.selectedMenuItem }} className={classes.menuItem}>\n                                                    {field && modifyText(field)}\n                                                </MenuItem>\n                                            ))\n                                        }\n                                    />\n                                </div>\n                                <div className={classes.rowField} style={{ width: '8%', marginBottom: '0' }}>\n                                    <div className='fullHeight colFlex flexCenter' style={{ width: 'fit-content', marginLeft: '1vw' }}>\n                                        <Checkbox className={classes.checkbox}\n                                            checkedIcon={<CheckboxIcon checked={true} />}\n                                            checked={row.isRequired ? (row.isRequired.toString() === \"true\" ? true : false) : false}\n                                            icon={<CheckboxIcon checked={false} />}\n                                            onChange={(e, value) => handleMappingChange(index, 'isRequired', value)}\n                                            color=\"primary\"\n                                            inputProps={{ classes: { root: classes.checkbox } }} />\n                                    </div>\n                                </div>\n                                <div className='colFlex flexCenter'><SvgIcon src={Images.delete} onClick={() => mappingStore.deleteMappingKey(index)} /></div>\n                            </div>\n                        )) : null\n                    }\n\n                </div>\n                {currentMapping.isDefaultDoc ? null :\n                    <div className='rowFlex'>\n                        <div style={{ width: currentMapping.isTablePresent ? '90%' : '100%' }}> <div className={classes.addButton} onClick={addKey}>\n                            <div className='colFlex flexCenter'><SvgIcon src={Images.addValidation} /></div>\n                            <div className='colFlex flexCenter mFont'>Add Key</div>\n                        </div></div>\n                    </div>}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/></div></Tooltip>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/MenuItem>",
                    "/>",
                    "/div>",
                    "/>}",
                    "/>}",
                    "/>",
                    "/div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div></div>",
                    "/div>}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderColumnNames",
                "method_begin": "const renderColumnNames = () => {",
                "method_end": "}",
                "range": [
                    284,
                    310
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/CreateEditMapping.js",
                "returnType": "(\n            <div style={{ height: '100%', width: '23%', marginLeft: '1%' }}>\n                <div className={classes.mappingHeaders}>\n                    <div className={`${classes.ruleRow} mFont`} style={{ width: '100%' }}>Columns *</div>\n                </div>\n                <div className={classes.mappingForm} >\n                    {\n                        currentMapping.columns ? currentMapping.columns.map((row, index) => (\n                            <div key={index + 'column'} className={classes.formRow}>\n                                <div className={classes.rowField} style={{ width: '100%' }}>\n                                    <SimpleTextBox disabled={currentMapping.isDefaultDoc} label='' from='mapping' value={row} onChange={(e) => handleMappingChange(index, 'columns', e.target.value)} multiline={true} maxRows={1} />\n                                </div>\n                                <div className='colFlex flexCenter'><SvgIcon src={Images.delete} onClick={() => mappingStore.deleteColumn(index)} /></div>\n                            </div>\n                        )) : null\n                    }\n                </div>\n                {currentMapping.isDefaultDoc ? null :\n                    <div className='rowFlex'>\n                        {currentMapping.isTablePresent ?\n                            <div style={{ width: '100%', marginLeft: '1%' }}> <div className={classes.addButton} onClick={addColumn}>+ Add Column</div></div>\n                            : null}\n                    </div>}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/div></div>",
                    "/div>}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js": {
        "method_details_": [
            {
                "method_name": "setrowsPerPage",
                "method_begin": "const setrowsPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    60,
                    63
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/document/${filterType}/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSortStart",
                "method_begin": "const onSortStart = (e) => {",
                "method_end": "}",
                "range": [
                    76,
                    78
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    98,
                    110
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    120,
                    122
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    124,
                    146
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (\n\n                                <TableCell className={classes.mappingCell} key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row}\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderProcessingStatus",
                "method_begin": "const renderProcessingStatus = (value) => {",
                "method_end": "}",
                "range": [
                    148,
                    159
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "(\n            // value < 100 ?\n            true ?\n                <div className={classes.processingLoader} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div> :\n                <div className={`${classes.processingLoader} ${classes.ocrComplete}`} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    161,
                    166
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/document/${filterType}/${pageNo",
                    "/home/configuration/document/${filterType}/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    168,
                    170
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchHeaders",
                "method_begin": "const setBatchHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    172,
                    174
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    176,
                    198
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (rowsPerPage) + 1)}\n                    -\n                    {pageNo * rowsPerPage <= totalCount ? (pageNo * rowsPerPage) : totalCount\n                    } of {totalCount}\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIcon xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIcon xlFont' onClick={() => goToPage('next')} />\n                </div>&nbsp;&nbsp;\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={rowsPerPage} setRowsPerPage={setrowsPerPage} />\n\n\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderCreateButton",
                "method_begin": "const renderCreateButton = () => {",
                "method_end": "}",
                "range": [
                    216,
                    225
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "(\n            <div className='colFlex flexCenter'>\n                <div className={`rowFlex ${classes.uploadButton}`} style={{ border: 'solid 1px' }} onClick={openCreateMapping}>\n                    <SvgIcon src={Images.miniDocConfig} />&nbsp;&nbsp;\n                    New Document Configuration\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openCreateMapping",
                "method_begin": "const openCreateMapping = () => {",
                "method_end": "}",
                "range": [
                    227,
                    230
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/document/create"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    232,
                    234
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    236,
                    239
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setMappingForDelete",
                "method_begin": "const setMappingForDelete = (index) => {",
                "method_end": "}",
                "range": [
                    241,
                    245
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMapping",
                "method_begin": "const openMapping = (row) => {",
                "method_end": "}",
                "range": [
                    248,
                    251
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/home/configuration/document/detail/${row._id}/edit"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "calculateKeyCount",
                "method_begin": "const calculateKeyCount = (array, value) => {",
                "method_end": "}",
                "range": [
                    253,
                    259
                ],
                "parameters": [
                    "array",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "item.isRequired === value | count",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTenantFilter",
                "method_begin": "const setTenantFilter = (val) => {",
                "method_end": "}",
                "range": [
                    261,
                    265
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/DocConfigList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/document/${filterType}/1"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/ExternalSheetUpload.js": {
        "method_details_": [
            {
                "method_name": "handleDrop",
                "method_begin": "const handleDrop = (files, event) => {",
                "method_end": "}",
                "range": [
                    44,
                    55
                ],
                "parameters": [
                    "files",
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/ExternalSheetUpload.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openFileModal",
                "method_begin": "const openFileModal = () => {",
                "method_end": "}",
                "range": [
                    57,
                    61
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/ExternalSheetUpload.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFiles",
                "method_begin": "const validateFiles = (files) => {",
                "method_end": "}",
                "range": [
                    63,
                    74
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/ExternalSheetUpload.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFileSize",
                "method_begin": "const validateFileSize = (files) => {",
                "method_end": "}",
                "range": [
                    76,
                    84
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/ExternalSheetUpload.js",
                "returnType": "size",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeFile",
                "method_begin": "const onChangeFile = (event, type) => {",
                "method_end": "}",
                "range": [
                    88,
                    102
                ],
                "parameters": [
                    "event",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/ExternalSheetUpload.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickUpload",
                "method_begin": "const onClickUpload = () => {",
                "method_end": "}",
                "range": [
                    104,
                    117
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/ExternalSheetUpload.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCancel",
                "method_begin": "const onClickCancel = () => {",
                "method_end": "}",
                "range": [
                    122,
                    124
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/ExternalSheetUpload.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingHelpDialog.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    20,
                    23
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingHelpDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js": {
        "method_details_": [
            {
                "method_name": "handlepageNoClick",
                "method_begin": "const handlepageNoClick = (data) => {",
                "method_end": "};",
                "range": [
                    52,
                    56
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    66,
                    88
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row}\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteDocs",
                "method_begin": "const deleteDocs = () => {",
                "method_end": "}",
                "range": [
                    90,
                    95
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    97,
                    100
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    102,
                    104
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentConfig",
                "method_begin": "const setCurrentConfig = (index) => {",
                "method_end": "}",
                "range": [
                    106,
                    108
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setMappingForDelete",
                "method_begin": "const setMappingForDelete = (index) => {",
                "method_end": "}",
                "range": [
                    110,
                    113
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openCreateMapping",
                "method_begin": "const openCreateMapping = () => {",
                "method_end": "}",
                "range": [
                    115,
                    118
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/document/create"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMapping",
                "method_begin": "const openMapping = (row) => {",
                "method_end": "}",
                "range": [
                    120,
                    123
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/home/configuration/document/${row._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "calculateKeyCount",
                "method_begin": "const calculateKeyCount = (array, value) => {",
                "method_end": "}",
                "range": [
                    125,
                    131
                ],
                "parameters": [
                    "array",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js",
                "returnType": "item.isRequired === value | count",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setConfigForImport",
                "method_begin": "const setConfigForImport = (value) => {",
                "method_end": "}",
                "range": [
                    133,
                    136
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/MappingConfig/MappingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/document/create"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrAliasForm.js": {
        "method_details_": [
            {
                "method_name": "handleTabChange",
                "method_begin": "const handleTabChange = (e, v) => {",
                "method_end": "}",
                "range": [
                    27,
                    29
                ],
                "parameters": [
                    "e",
                    "v"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrAliasForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTabs",
                "method_begin": "const renderTabs = () => {",
                "method_end": "}",
                "range": [
                    31,
                    43
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrAliasForm.js",
                "returnType": "(\n            <div className={classes.tabContainer}>\n                <Tabs indicatorColor=\"secondary\" aria-label=\"doctype tabs\" value={currentDoc} onChange={handleTabChange} classes={{ flexContainer: 'fullHeight' }} >\n                    {\n                        docTypes.map((row, index) => (\n                            <Tab disableRipple classes={{ root: classes.tabRoot }} key={'tabDocType' + index} color=\"primary\" label={<div className='rowFlex'> {row.slug && modifyText(row.slug)}</div>} />\n                        ))\n                    }\n                </Tabs>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>}",
                    "/>",
                    "/Tabs>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    45,
                    62
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrAliasForm.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n                    {\n                        ['Keys', 'Select', 'Alias'].map((row, index) => (\n                            (\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row}\n                                </TableCell>\n                            )\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleAliasChange",
                "method_begin": "const handleAliasChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    64,
                    66
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrAliasForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCheckboxChange",
                "method_begin": "const handleCheckboxChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    68,
                    70
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrAliasForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderAliasForm",
                "method_begin": "const renderAliasForm = () => {",
                "method_end": "}",
                "range": [
                    72,
                    103
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrAliasForm.js",
                "returnType": "(\n            <div className={classes.tableContainer}>\n                <TableContainer elevation={0} component={Paper} classes={{root: classes.tableRoot}}  >\n                    <Table className={classes.table} aria-label=\"simple table\" stickyHeader>\n                        {renderTableHead()}\n                        <TableBody>\n                            {aliasArray[currentDoc].aliases.map((row, index) => (\n                                <TableRow key={index} className={classes.tableRow}  >\n                                    <TableCell classes={{ root: classes.tableCell }} align=\"left\">{row.key && modifyText(row.key)}</TableCell>\n                                    <TableCell padding=\"checkbox\" className={classes.checkbox} align='center'>\n                                        <Checkbox \n                                            checkedIcon={<CheckboxIcon checked={true} />}\n                                            icon={<CheckboxIcon checked={false} />}\n                                            onChange={(e, value) => handleCheckboxChange(index, value)}\n                                            checked={row.selected}\n                                            color=\"primary\"\n                                            inputProps={{ classes: { root: classes.checkbox } }} />\n                                    </TableCell>\n                                    <TableCell classes={{ root: classes.inputTableCell }} align=\"left\">\n                                        <input placeholder={row.key && modifyText(row.key)} value={row.alias}\n                                            onChange={(e) => handleAliasChange(index, e.target.value)}\n                                            className={classes.aliasInput} />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrApiForm.js": {
        "method_details_": [
            {
                "method_name": "handleApiChange",
                "method_begin": "const handleApiChange = (index, value, type) => {",
                "method_end": "}",
                "range": [
                    41,
                    43
                ],
                "parameters": [
                    "index",
                    "value",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrApiForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleRadioChange",
                "method_begin": "const handleRadioChange = (e) => {",
                "method_end": "}",
                "range": [
                    45,
                    49
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrApiForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getApiList",
                "method_begin": "const getApiList = (index) => {",
                "method_end": "}",
                "range": [
                    51,
                    56
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrApiForm.js",
                "returnType": "docTypes[temp].apis.defaultApis ? docTypes[temp].apis.defaultApis : [] | []",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFieldList",
                "method_begin": "const getFieldList = (index) => {",
                "method_end": "}",
                "range": [
                    58,
                    76
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrApiForm.js",
                "returnType": "fields | []",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    78,
                    95
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrApiForm.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n                    {\n                        ['Document', 'API', 'Fields'].map((row, index) => (\n                            (\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\" style={{ width: '33%' }}>\n                                    {row}\n                                </TableCell>\n                            )\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocList",
                "method_begin": "const getDocList = (index) => {",
                "method_end": "}",
                "range": [
                    97,
                    102
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrApiForm.js",
                "returnType": "(apiArray.findIndex(x => x.type === el.slug) === index || apiArray.findIndex(x => x.type === el.slug) === -1) && el.apis !== null | docs",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderApiForm",
                "method_begin": "const renderApiForm = () => {",
                "method_end": "}",
                "range": [
                    104,
                    146
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrApiForm.js",
                "returnType": "(\n\n            <div className={classes.tableContainer} style={{ marginTop: '2vh' }}>\n                <TableContainer elevation={0} component={Paper} classes={{ root: classes.tableRoot }} style={{overflowX: 'hidden'}} >\n                    <Table className={classes.table} aria-label=\"simple table\" stickyHeader>\n                        {renderTableHead()}\n                        <TableBody>\n                            {apiArray.map((row, index) => (\n                                <TableRow key={index} className={classes.tableRow}  >\n                                    <TableCell className={classes.apiTableCell} align=\"left\"  >\n                                        <SelectBox type='api' value={row.type} onChange={(e) => handleApiChange(index, e.target.value, 'type')}\n                                            options={getDocList(index).map((doc, docIndex) => (\n                                                <MenuItem key={'doc' + docIndex} value={doc.slug}>{doc.slug && modifyText(doc.slug)} </MenuItem>\n                                            ))}\n                                        />\n                                    </TableCell>\n                                    <TableCell padding=\"checkbox\" className={classes.checkbox} align='left'>\n                                        <SelectBox type='api' value={row.apiSlug} disabled={row.type === ''} onChange={(e) => handleApiChange(index, e.target.value, 'apiSlug')}\n                                            options={getApiList(index).map((api) => (\n                                                <MenuItem key={'api' + api.slug} value={api.slug}>{api.name} </MenuItem>\n                                            ))}\n                                        />\n                                    </TableCell>\n                                    <TableCell padding=\"checkbox\" className={classes.checkbox} align='left'>\n                                        <SelectBox type='api' value={row.fields} multiple={true} disabled={row.apiSlug === ''} onChange={(e) => handleApiChange(index, e.target.value, 'fields')}\n                                            options={getFieldList(index).map((field) => (\n                                                <MenuItem key={'fields' + field.key} value={field}>{field}</MenuItem>\n                                            ))}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <br />\n                {apiArray.length < docTypes.length && nullApis < apiArray.length ?\n                    <div className={classes.addApiButton} onClick={configStore.addApi}>+ Add API</div>\n                    : null}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/MenuItem>",
                    "/>",
                    "/TableCell>",
                    "/MenuItem>",
                    "/>",
                    "/TableCell>",
                    "/MenuItem>",
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrConfig.js": {
        "method_details_": [
            {
                "method_name": "handleDocTypesChange",
                "method_begin": "const handleDocTypesChange = (event) => {",
                "method_end": "}",
                "range": [
                    20,
                    23
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCountryChange",
                "method_begin": "const handleCountryChange = (event) => {",
                "method_end": "}",
                "range": [
                    25,
                    28
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocTypeForm",
                "method_begin": "const renderDocTypeForm = () => {",
                "method_end": "}",
                "range": [
                    36,
                    73
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OcrConfig.js",
                "returnType": "(\n            <div className={'colFlex flexCenter fullHeight'}>\n                <div className={classes.inputSourceCont}>\n                    <div className={classes.ocrForm}>\n                        <SelectBox label='Select Country' style={{ textTransform: 'capitalize' }}\n                            value={country}\n                            onChange={handleCountryChange}\n                            options={Object.keys(countryList).map((option, index) => (\n                                <MenuItem\n                                    key={'country' + option}\n                                    style={{ textTransform: 'capitalize' }}\n                                    value={option}\n                                    //disabled={index === 0}\n                                    //selected={option === props.filter}\n                                    //onClick={(event) => logout()}\n                                    style={{ textTransform: 'capitalize' }}\n\n                                >\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        />\n                        <br />\n                        <SelectBox label='Select Document Type' multiple={true}\n                            value={docTypes}\n                            onChange={handleDocTypesChange}\n                            options={config.uploadTypes.map((option) => (\n                                <MenuItem key={'docType' + option.slug} value={option} classes={{ selected: classes.selectedMenuItem }}>\n                                    {option.slug && modifyText(option.slug)}\n                                </MenuItem>\n                            ))}\n                        />\n                    </div>\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//disabled={index",
                    "//selected={option",
                    "//onClick={(event",
                    "/MenuItem>",
                    "/>",
                    "/>",
                    "/MenuItem>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OuputApiForm.js": {
        "method_details_": [
            {
                "method_name": "renderApiForm",
                "method_begin": "const renderApiForm = () => {",
                "method_end": "}",
                "range": [
                    27,
                    71
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OuputApiForm.js",
                "returnType": "(\n            <div>\n                {\n                    fields.map((row, index) => (\n                        <React.Fragment>\n                            <SimpleTextBox\n                                key={'outputApi' + index}\n                                value={outputApi[`${row}`]}\n                                label={row && modifyText(row)}\n                                multiline={true}\n                                maxRows={10}\n                                onChange={(e) => configStore.handleApiOutputChange(row, e.target.value)} />\n                            <br />\n                        </React.Fragment>\n                    ))\n                }\n                <div className={classes.addInputValueBtn} onClick={configStore.addApiInputValue}>+ Add input value</div>\n                <br />\n                {\n                    outputApi.input_values.map((row, index) => (\n                        <div className={classes.ipValueContainer} key={'input_values' + index}>\n                            <div className={classes.ipValueInput}>\n                                <SimpleTextBox\n                                    value={row.key}\n                                    label={'Key'}\n                                    multiline={true}\n                                    maxRows={1}\n                                    onChange={(e) => configStore.handleApiInputValueChange(index, 'key', e.target.value)} />\n                            </div>\n                            <div className={classes.ipValueInput}>\n                                <SimpleTextBox\n                                    value={row.value}\n                                    label={'Value'}\n                                    multiline={true}\n                                    maxRows={1}\n                                    onChange={(e) => configStore.handleApiInputValueChange(index, 'value', e.target.value)} />\n                                <DeleteOutlineOutlinedIcon className={classes.ipDelBtn} onClick={() => configStore.delApiInputValue(index)} />\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/React.Fragment>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OutputPreview.js": {
        "method_details_": [
            {
                "method_name": "handleTabChange",
                "method_begin": "const handleTabChange = (e, v) => {",
                "method_end": "}",
                "range": [
                    34,
                    59
                ],
                "parameters": [
                    "e",
                    "v"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OutputPreview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTabs",
                "method_begin": "const renderTabs = () => {",
                "method_end": "}",
                "range": [
                    61,
                    73
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OutputPreview.js",
                "returnType": "(\n            <div className={classes.tabContainer}>\n                <Tabs indicatorColor=\"secondary\" aria-label=\"doctype tabs\" value={currentDoc} onChange={handleTabChange} classes={{ flexContainer: 'fullHeight' }} >\n                    {\n                        docTypes.map((row, index) => (\n                            <Tab disableRipple classes={{ root: classes.tabRoot }} key={'tabDocType' + index} color=\"primary\" label={<div className='rowFlex'> {row.slug && modifyText(row.slug)}</div>} />\n                        ))\n                    }\n                </Tabs>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>}",
                    "/>",
                    "/Tabs>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    75,
                    92
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OutputPreview.js",
                "returnType": "(\n            <TableHead style={{width: '14vw'}}>\n                <TableRow >\n                    {\n                        ['Keys from Document', 'Keys from API'].map((row, index) => (\n                            (\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row}\n                                </TableCell>\n                            )\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderAliasForm",
                "method_begin": "const renderAliasForm = () => {",
                "method_end": "}",
                "range": [
                    95,
                    114
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OutputPreview.js",
                "returnType": "(\n            <div className={classes.tableContainer}>\n                <TableContainer elevation={0} component={Paper} classes={{ root: classes.tableRoot }}  >\n                    <Table className={classes.table} aria-label=\"simple table\" stickyHeader>\n                        {renderTableHead()}\n                        <TableBody>\n                            {previewArray.map((row, index) => (\n                                <TableRow key={index} className={classes.tableRow}  >\n                                    <TableCell classes={{ root: classes.tableCell }} align=\"left\">{row.aliasKey && modifyText(row.aliasKey)}</TableCell>\n                                    <TableCell classes={{ root: classes.tableCell }} align=\"left\">{row.apiKey && modifyText(row.apiKey)}</TableCell>\n\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OutputSource.js": {
        "method_details_": [
            {
                "method_name": "renderTooltip",
                "method_begin": "const renderTooltip = (row) => {",
                "method_end": "}",
                "range": [
                    20,
                    26
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OutputSource.js",
                "returnType": "(\n            <div className={'rowFlex'}>\n                <SvgIcon src={Images.error} style={\"fill : #157fff \"} />\n                <div>&nbsp;&nbsp;{inputSourceDesc[`${row}`]}</div></div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div></div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleOutputSourceChange",
                "method_begin": "const handleOutputSourceChange = (value) => {",
                "method_end": "}",
                "range": [
                    28,
                    30
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/OutputSource.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Reports/ReportGen.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "};",
                "range": [
                    110,
                    127
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Reports/ReportGen.js",
                "returnType": "(\n      <TableHead>\n        <TableRow>\n          {tableHeaders.map((row, index) => (\n            <TableCell\n              key={\"header\" + index}\n              className={classes.tableHeader}\n              align=\"left\"\n            >\n              {row.label}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setVendorsPerPage",
                "method_begin": "const setVendorsPerPage = (value) => {",
                "method_end": "};",
                "range": [
                    129,
                    134
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Reports/ReportGen.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//reportsStore.setVendorsPerPage(value",
                    "/home/configuration/vendor/1/overall"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "};",
                "range": [
                    136,
                    141
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Reports/ReportGen.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/reports/${pageNo",
                    "/home/configuration/reports/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "};",
                "range": [
                    143,
                    145
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Reports/ReportGen.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "};",
                "range": [
                    147,
                    171
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Reports/ReportGen.js",
                "returnType": "(\n      <div className={`sFont rowFlex ${classes.tableFooter}`}>\n        <div className=\"colFlex flexCenter fullHeight bold\">\n          Total Count: {totalReports}\n        </div>\n        <div className={classes.pgnDivider}>|</div>\n        <div className=\"colFlex flexCenter\" style={{ height: \"auto\" }}>\n          <KeyboardArrowLeftIcon\n            className=\"paginationIconLeft xlFont\"\n            onClick={() => goToPage(\"prev\")}\n          />\n        </div>\n        <div className=\"colFlex flexCenter fullHeight\">\n          Page {pageNo} of {Math.ceil(totalReports / 10)}\n        </div>\n        <div className=\"colFlex flexCenter\" style={{ height: \"auto\" }}>\n          <KeyboardArrowRightIcon\n            className=\"paginationIconRight xlFont\"\n            onClick={() => goToPage(\"next\")}\n          />\n        </div>\n      </div>\n    )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "generateReports",
                "method_begin": "const generateReports = () => {",
                "method_end": "};",
                "range": [
                    181,
                    192
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Reports/ReportGen.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderCreateBtn",
                "method_begin": "const renderCreateBtn = () => {",
                "method_end": "};",
                "range": [
                    194,
                    204
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Reports/ReportGen.js",
                "returnType": "(\n      <div className=\"colFlex flexEnd\">\n        <SimpleButton\n          label=\"Generate Report\"\n          onClick={generateReports}\n          progress={reportsStore.createProgress}\n        />\n      </div>\n    )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setReportForDownload",
                "method_begin": "const setReportForDownload = (index, rep, ind) => {",
                "method_end": "};",
                "range": [
                    206,
                    216
                ],
                "parameters": [
                    "index",
                    "rep",
                    "ind"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Reports/ReportGen.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/CreateVendor.js": {
        "method_details_": [
            {
                "method_name": "handleConfigChange",
                "method_begin": "const handleConfigChange = (type, value) => {",
                "method_end": "}",
                "range": [
                    46,
                    56
                ],
                "parameters": [
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/CreateVendor.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCancel",
                "method_begin": "const onClickCancel = () => {",
                "method_end": "}",
                "range": [
                    58,
                    61
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/CreateVendor.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkValidUrl",
                "method_begin": "const checkValidUrl = (value) => {",
                "method_end": "}",
                "range": [
                    63,
                    78
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/CreateVendor.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    80,
                    116
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/CreateVendor.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/(https?:\\/\\/(?:www\\.|(?!www",
                    "/^\\d+$/"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSubmit",
                "method_begin": "const onSubmit = () => {",
                "method_end": "}",
                "range": [
                    119,
                    135
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/CreateVendor.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    69,
                    92
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (row.label === 'Type' && type === 'bol') ? null :\n                                (\n\n                                    <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                        {row.label}\n                                    </TableCell>\n\n\n                                )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setVendorsPerPage",
                "method_begin": "const setVendorsPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    94,
                    100
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/${type",
                    "/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (pageType) => {",
                "method_end": "}",
                "range": [
                    102,
                    107
                ],
                "parameters": [
                    "pageType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/vendor/${type}/${pageNo",
                    "/${vendorStore.searchFilter}",
                    "/home/configuration/vendor/${type}/${pageNo",
                    "/${vendorStore.searchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    109,
                    111
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    114,
                    136
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalVendors}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    Page {pageNo} of {Math.ceil(totalVendors / vendorsPerPage)}\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div> <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {<RowsPerPage value={vendorStore.vendorsPerPage} setRowsPerPage={setVendorsPerPage} />}\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openVendorDetails",
                "method_begin": "const openVendorDetails = (data) => {",
                "method_end": "}",
                "range": [
                    138,
                    141
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    143,
                    154
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderCreateBtn",
                "method_begin": "const renderCreateBtn = () => {",
                "method_end": "}",
                "range": [
                    166,
                    172
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "(\n            <div className='colFlex flexCenter'>\n                <SimpleButton label='Export List' onClick={() => vendorStore.exportVendorList(type)} progress={vendorStore.createProgress} />\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCreate",
                "method_begin": "const onClickCreate = () => {",
                "method_end": "}",
                "range": [
                    174,
                    177
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelCreate",
                "method_begin": "const cancelCreate = () => {",
                "method_end": "}",
                "range": [
                    179,
                    182
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setWorkflowForDelete",
                "method_begin": "const setWorkflowForDelete = (index) => {",
                "method_end": "}",
                "range": [
                    184,
                    188
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    190,
                    198
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/${type",
                    "/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    200,
                    202
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickEdit",
                "method_begin": "const onClickEdit = (id) => {",
                "method_end": "}",
                "range": [
                    206,
                    209
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/input/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorSearch.js": {
        "method_details_": [
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    44,
                    56
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorSearch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchBatches",
                "method_begin": "const searchBatches = (event) => {",
                "method_end": "}",
                "range": [
                    58,
                    66
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorSearch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/vendor/${props.type}/1/${vendorStore.searchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onFilterChange",
                "method_begin": "const onFilterChange = (val, index) => {",
                "method_end": "}",
                "range": [
                    72,
                    83
                ],
                "parameters": [
                    "val",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Vendor/VendorSearch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/home/configuration/vendor/${props.type}/1/${val}",
                    "/home/configuration/vendor/${props.type}/${vendorStore.pageNo}/${val}",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/CreateWebhookConfig.js": {
        "method_details_": [
            {
                "method_name": "handleConfigChange",
                "method_begin": "const handleConfigChange = (type, value) => {",
                "method_end": "}",
                "range": [
                    46,
                    50
                ],
                "parameters": [
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/CreateWebhookConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCancel",
                "method_begin": "const onClickCancel = () => {",
                "method_end": "}",
                "range": [
                    52,
                    55
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/CreateWebhookConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    57,
                    82
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/CreateWebhookConfig.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/(https?:\\/\\/(?:www\\.|(?!www"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSubmit",
                "method_begin": "const onSubmit = () => {",
                "method_end": "}",
                "range": [
                    85,
                    101
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/CreateWebhookConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    64,
                    86
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row.label}\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    88,
                    93
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/${workflowFilter}/${pageNo",
                    "/home/configuration/${workflowFilter}/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    96,
                    122
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "null | (\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalWebhookConfigs}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (10) + 1)}\n                    -\n                    {pageNo * 10 <= totalWebhookConfigs ? (pageNo * 10) : totalWebhookConfigs\n                    }\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {/*<RowsPerPage value={10} setRowsPerPage={setBatchesPerPage} />*/}\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/*<RowsPerPage",
                    "/>*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatch",
                "method_begin": "const openBatch = (data) => {",
                "method_end": "}",
                "range": [
                    124,
                    132
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${data._id}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    134,
                    145
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickNewWebhook",
                "method_begin": "const onClickNewWebhook = () => {",
                "method_end": "}",
                "range": [
                    156,
                    160
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelCreate",
                "method_begin": "const cancelCreate = () => {",
                "method_end": "}",
                "range": [
                    162,
                    165
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setWebhookForDelete",
                "method_begin": "const setWebhookForDelete = (row, type) => {",
                "method_end": "}",
                "range": [
                    167,
                    170
                ],
                "parameters": [
                    "row",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    172,
                    181
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    183,
                    185
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickEdit",
                "method_begin": "const onClickEdit = (value) => {",
                "method_end": "}",
                "range": [
                    188,
                    192
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "testWebhook",
                "method_begin": "const testWebhook = (value) => {",
                "method_end": "}",
                "range": [
                    194,
                    208
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeTestResult",
                "method_begin": "const closeTestResult = () => {",
                "method_end": "}",
                "range": [
                    210,
                    214
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WebhookConfig/WebhookTest.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdInputSource.js": {
        "method_details_": [
            {
                "method_name": "handleDocTypeChange",
                "method_begin": "const handleDocTypeChange = (value) => {",
                "method_end": "}",
                "range": [
                    35,
                    54
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdInputSource.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/document/create/${props.match.params"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkDisability",
                "method_begin": "const checkDisability = (option) => {",
                "method_end": "}",
                "range": [
                    56,
                    75
                ],
                "parameters": [
                    "option"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdInputSource.js",
                "returnType": "true | true | true | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdOutputSource.js": {
        "method_details_": [
            {
                "method_name": "getWebhookDetails",
                "method_begin": "const getWebhookDetails = () => {",
                "method_end": "}",
                "range": [
                    40,
                    55
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdOutputSource.js",
                "returnType": "(\n                <div className='mFont'>\n                    <div className='semiBold'>Webhook Configuration:</div>\n                    <div>Method: {webhookConfigList[ind] && webhookConfigList[ind].method}</div>\n                    <div>URL: {webhookConfigList[ind] && webhookConfigList[ind].url}</div>\n\n                </div>\n\n            ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDbDetails",
                "method_begin": "const getDbDetails = () => {",
                "method_end": "}",
                "range": [
                    57,
                    74
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdOutputSource.js",
                "returnType": "(\n                <div className='mFont'>\n                    <div className='semiBold'>Database Configuration:</div>\n                    <div>URL: {dbConfigList[ind] && dbConfigList[ind].url}</div>\n                    <div>Database: {dbConfigList[ind] && dbConfigList[ind].dbName}</div>\n                    <div>Table: {dbConfigList[ind] && dbConfigList[ind].tableName}</div>\n\n                </div>\n\n            ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdWorkflowLogic.js": {
        "method_details_": [
            {
                "method_name": "onDragStart",
                "method_begin": "const onDragStart = (e, id, disabled) => {",
                "method_end": "}",
                "range": [
                    27,
                    33
                ],
                "parameters": [
                    "e",
                    "id",
                    "disabled"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdWorkflowLogic.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onComponentDrop",
                "method_begin": "const onComponentDrop = (e) => {",
                "method_end": "}",
                "range": [
                    35,
                    42
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdWorkflowLogic.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderHeader",
                "method_begin": "const renderHeader = () => {",
                "method_end": "}",
                "range": [
                    51,
                    69
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdWorkflowLogic.js",
                "returnType": "(\n            <div className='rowFlex spaceBetween' >\n                <div className='rowFlex'>\n                    {dtComponents.map((row, index) => (\n                        <div key={'component' + index} className={clsx({ [classes.component]: true, [classes.componentDisabled]: row.disabled })} draggable onDragStart={(e) => onDragStart(e, row.icon, row.disabled)}\n                            onDragOver={(e) => e.preventDefault()}>\n                            <div className='colFlex flexCenter'><SvgIcon src={Images[`${row.icon}`]} /></div>&nbsp;\n                            <div className='mFont colFlex flexCenter'>{row.name}</div>\n                        </div>\n                    ))}\n                </div>\n                {componentList.length === 0 ? null :\n                    <div className='colFlex flexCenter'>\n                        <SimpleButton onClick={() => workflowStore.validateWorkflow(props.match.params.create)} progress={validateProgress} label='Validate' />\n                    </div>}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>&nbsp;",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentName",
                "method_begin": "const getDocumentName = (id) => {",
                "method_end": "}",
                "range": [
                    71,
                    76
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdWorkflowLogic.js",
                "returnType": "documentList.find(x => x._id === id).documentType | 'Static Value'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderSelectedDocs",
                "method_begin": "const renderSelectedDocs = () => {",
                "method_end": "}",
                "range": [
                    78,
                    91
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdWorkflowLogic.js",
                "returnType": "(\n            <div className={`${classes.docContainer} sFont`}>\n                <div className={classes.selectedDocs}>Selected Documents:</div>\n                <div className={classes.docList}>\n                    {\n                        inputDetails && inputDetails.documents.map((row, index) => (\n                            <div key={'docTypes' + index} className={classes.doc}>{getDocumentName(row)}</div>\n                        ))\n                    }\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getComponent",
                "method_begin": "const getComponent = (type, index) => {",
                "method_end": "}",
                "range": [
                    93,
                    98
                ],
                "parameters": [
                    "type",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdWorkflowLogic.js",
                "returnType": "<MatchComponent componentNumber={index} getDocumentName={getDocumentName} />",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderComponents",
                "method_begin": "const renderComponents = () => {",
                "method_end": "}",
                "range": [
                    100,
                    108
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdWorkflowLogic.js",
                "returnType": "(\n            componentList && componentList.map((row, index) => (\n                <div key={'componentList' + index} id={'component' + index}>\n                    {getComponent(row.name, index)}\n                </div>\n            ))\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AdvancedWorkflow.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AvailableVariables.js": {
        "method_details_": [
            {
                "method_name": "renderVariables",
                "method_begin": "const renderVariables = (variables, docIndex) => {",
                "method_end": "}",
                "range": [
                    31,
                    53
                ],
                "parameters": [
                    "variables",
                    "docIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AvailableVariables.js",
                "returnType": "(\n            <div className='rowFlex' style={{flexWrap: 'wrap'}}>\n                {\n                    variables && variables.map((row, index) => (\n                        <div key={variableType + index} className={classes.variable}>\n                            <div>\n                                <Checkbox\n                                    checkedIcon={<CheckboxIcon checked={true} />}\n                                    icon={<CheckboxIcon checked={false} />}\n                                    onChange={(e, value) => workflowStore.onVariableSelection(variableType, docIndex, index, value)}\n                                    checked={row.selected}\n                                    classes={{ root: classes.checkbox }}\n                                    color=\"primary\"\n                                    inputProps={{ classes: { root: classes.checkbox } }} />\n                            </div>\n                            <div className='lFont colFlex flexCenter'>{row.key}</div>\n                        </div>\n                    ))\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/>}",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocuments",
                "method_begin": "const renderDocuments = () => {",
                "method_end": "}",
                "range": [
                    55,
                    78
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/AvailableVariables.js",
                "returnType": "(\n            <div className={classes.variableAccContainer}>\n                {\n                    variableDetails[`${variableType}`].map((row, index) => (\n                        <Accordion key={'docTypeVars' + index} className={classes.variableAccordion}>\n                            <AccordionSummary id='myscc' classes={{ expanded: classes.vAccSummaryExpanded, content: classes.vAccSummary, root: classes.vAccSummaryRoot }}\n                                expandIcon={<ExpandMoreIcon id='myscc' />}\n                                aria-controls=\"panel1a-content\"\n                            >\n                                <div className='rowFlex spaceBetween fullWidth mFont'>\n                                    <div>{variableType === 'derived' ? `Match Component - ${index + 1}` : row.documentType}</div>\n                                    <div>{row.variables && row.variables.length} Variable(s)</div>\n                                </div>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                {renderVariables(row.variables, index)}\n                            </AccordionDetails>\n                        </Accordion>\n                    ))\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AccordionSummary>",
                    "/AccordionDetails>",
                    "/Accordion>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/CreateAdWorkflow.js": {
        "method_details_": [
            {
                "method_name": "goToUpload",
                "method_begin": "const goToUpload = () => {",
                "method_end": "}",
                "range": [
                    61,
                    64
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/CreateAdWorkflow.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-training/page/1/review"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToListing",
                "method_begin": "const goToListing = () => {",
                "method_end": "}",
                "range": [
                    66,
                    76
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/CreateAdWorkflow.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/custom/1",
                    "/home/configuration/workflow/static/1",
                    "//",
                    "//",
                    "/home/configuration/workflow/default/1",
                    "/home/configuration/workflow/custom/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickNext",
                "method_begin": "const onClickNext = (publish) => {",
                "method_end": "}",
                "range": [
                    78,
                    216
                ],
                "parameters": [
                    "publish"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/CreateAdWorkflow.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/logic/${props.match.params.create}",
                    "/home/configuration/workflow/create/output/${props.match.params.create}",
                    "/home/configuration/workflow/1",
                    "/home/configuration/workflow/create/logic/${data.id}/edit",
                    "/home/configuration/workflow/create/logic/${props.match.params.create}/edit",
                    "/home/configuration/workflow/create/logic/${props.match.params.create}/edit",
                    "/home/configuration/workflow/create/output/${props.match.params.create}/edit",
                    "/home/upload",
                    "/span></div>,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickBack",
                "method_begin": "const onClickBack = () => {",
                "method_end": "}",
                "range": [
                    218,
                    233
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/CreateAdWorkflow.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload",
                    "/home/configuration/workflow/create/input/${props.match.params[",
                    "/home/configuration/workflow/create/logic/${props.match.params["
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderActionFooter",
                "method_begin": "const renderActionFooter = () => {",
                "method_end": "}",
                "range": [
                    235,
                    266
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/CreateAdWorkflow.js",
                "returnType": "(\n            <div >\n                <div className={classes.actionFooter}>\n                    <div className='rowFlex'>\n                        { /* <div className={`xsFont ${classes.greyHeading} colFlex flexCenter`}>Workflow Configuration&nbsp;&nbsp;/</div>\n                        <div className={`xlFont colFlex flexCenter`}>Create Advanced Workflow</div>*/}\n                    </div>\n                    <div className='rowFlex'>\n                        <SimpleButton variant='cancel' label={activeTab === 0 ? 'Cancel' : 'Back'} onClick={onClickBack} />\n                        {\n                            activeTab === 2 && createdVia !== 'SYSTEM' ?\n                                <div className='rowFlex'>\n                                    <SimpleButton label='Save as draft' onClick={() => onClickNext(false)} progress={createProgress} />\n                                    <SimpleButton label='Activate' onClick={() => onClickNext(true)} progress={publishProgress} />\n\n\n                                </div>\n                                :\n                                (\n                                    activeTab === 2 && createdVia === 'SYSTEM' ? null\n                                        :\n                                        <SimpleButton label='Next' onClick={onClickNext} progress={createProgress} />\n                                )\n                        }\n                        {createdVia === 'SYSTEM' && !isStatic ? <SimpleButton label='Import' onClick={() => props.history.push(`/home/configuration/workflow/create/input/${props.match.params.create}/import`)} progress={publishProgress} />\n                            : null}\n                    </div>\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/</div>",
                    "/div>*/}",
                    "/div>",
                    "/>",
                    "/>",
                    "/>",
                    "/div>",
                    "/>",
                    "/home/configuration/workflow/create/input/${props.match.params.create}/import",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onInputSubmit",
                "method_begin": "const onInputSubmit = () => {",
                "method_end": "}",
                "range": [
                    268,
                    270
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/CreateAdWorkflow.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderComponents",
                "method_begin": "const renderComponents = () => {",
                "method_end": "}",
                "range": [
                    272,
                    287
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/CreateAdWorkflow.js",
                "returnType": "(\n                    <AdInputSource submit={onInputSubmit} />\n                ) | (\n                    <AdWorkflowLogic />\n                ) | (\n                    <AdOutputSource />\n                )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/MatchComponent.js": {
        "method_details_": [
            {
                "method_name": "renderHeader",
                "method_begin": "const renderHeader = () => {",
                "method_end": "}",
                "range": [
                    21,
                    31
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/MatchComponent.js",
                "returnType": "(\n            <div className={classes.matchHeader}>\n                <div className='rowFlex'>\n                    <div className='colFlex flexCenter'><div className={classes.matchNumber}>{componentNumber + 1}</div></div>\n                    <div className='fullHeight sFont colFlex flexCenter'>Match Components</div>\n                </div>\n                <SimpleButton variant='cancel' label='Delete' onClick={(e) => workflowStore.deleteComponent(componentNumber)} />\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div></div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getVariablesForDoc",
                "method_begin": "const getVariablesForDoc = (docId) => {",
                "method_end": "}",
                "range": [
                    33,
                    39
                ],
                "parameters": [
                    "docId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/MatchComponent.js",
                "returnType": "temp",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocuments",
                "method_begin": "const getDocuments = (type) => {",
                "method_end": "}",
                "range": [
                    41,
                    46
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/MatchComponent.js",
                "returnType": "temp",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderForm",
                "method_begin": "const renderForm = () => {",
                "method_end": "}",
                "range": [
                    48,
                    147
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/MatchComponent.js",
                "returnType": "(\n            <div className={classes.formContainer}>\n                <div style={{ width: '35%' }}>\n                    <SelectField label={'Select Validation type'} value={comp.validationType}\n                        options={validationTypes.map((option, index) => (\n                            <MenuItem className='sFont'\n                                key={'validations' + index}\n                                value={option.value}>\n                                {option.label}\n                            </MenuItem>\n                        ))}\n                    />\n                </div>\n                <br />\n                {comp.validations.map((row, index) => (\n                    <div className={classes.validationRow}>\n                        <SelectField label={'Select Document'} value={row.lhsDoc} type={'validation'} error={checkValidity && row.lhsDoc === \"\"}\n                            index={index}\n                            onChange={(e) => workflowStore.onValidationChange(componentNumber, index, 'lhsDoc', e.target.value)}\n                            options={inputDetails.documents.map((option, opIndex) => (\n                                <MenuItem className='sFont'\n                                    key={index + 'lhs' + opIndex}\n                                    value={option}>\n                                    {props.getDocumentName(option.docId)}\n                                </MenuItem>\n                            ))}\n                        />\n                        <SelectField label={'Select Variable'} value={row.lhsKey} type={'validation'} error={checkValidity && row.lhsKey === \"\"}\n                            index={index} disabled={row.lhsDoc === undefined || row.lhsDoc === ''}\n                            onChange={(e) => workflowStore.onValidationChange(componentNumber, index, 'lhsKey', e.target.value)}\n                            options={getVariablesForDoc(row.lhsDoc).map((option, opIndex) => (\n                                <MenuItem className='sFont'\n                                    key={'validations' + opIndex}\n                                    style={{ textTransform: 'capitalize' }}\n                                    value={option.slug ? option.slug : option.key}\n                                    style={{ textTransform: 'capitalize' }}>\n                                    {option.key}\n                                </MenuItem>\n                            ))}\n                        />\n                        <SelectField label={'Relation'} value={row.operator} type={'validation'} error={checkValidity && row.operator === \"\"}\n                            index={index}\n                            onChange={(e) => workflowStore.onValidationChange(componentNumber, index, 'operator', e.target.value)}\n                            options={workflowRelations.map((option, opIndex) => (\n                                <MenuItem className='sFont'\n                                    key={'validations' + opIndex}\n                                    style={{ textTransform: 'capitalize' }}\n                                    value={option.value}\n                                    style={{ textTransform: 'capitalize' }}>\n                                    {option.label}\n                                </MenuItem>\n                            ))}\n                        />\n                        <SelectField label={'Select Document/Static Value'} value={row.rhsDoc} type={'validationRhs'} error={checkValidity && row.rhsDoc === \"\"}\n                            index={index}  \n                            onChange={(e) => workflowStore.onValidationChange(componentNumber, index, 'rhsDoc', e.target.value)}\n                            options={inputDetails.documents.map((option, opIndex) => (\n                                <MenuItem className='sFont'\n                                    key={index + 'rhs' + opIndex}\n                                    value={option}>\n                                    {props.getDocumentName(option.docId)}\n                                   \n                                </MenuItem>\n                            ))}\n                        />\n                        {\n                            row.rhsDoc === 'STATIC_VALUE' ?\n                                <div style={{ width: '15%' }}>\n                                    <TextBox index={index} label='Select Variable/Value' error={checkValidity && (row.rhsKey === \"\" || row.rhsKey.trim().length === 0)}\n                                        value={row.rhsKey}\n                                        onChange={(e) => workflowStore.onValidationChange(componentNumber, index, 'rhsKey', e.target.value)}\n                                        multiline={true} from={'validation'} />\n                                </div> :\n                                <SelectField label={'Select Variable/Value'} value={row.rhsKey} type={'validation'} error={checkValidity && row.rhsKey === \"\"}\n                                    index={index} disabled={row.rhsDoc === undefined || row.rhsDoc === ''}\n                                    onChange={(e) => workflowStore.onValidationChange(componentNumber, index, 'rhsKey', e.target.value)}\n                                    options={getVariablesForDoc(row.rhsDoc).map((option, opIndex) => (\n                                        <MenuItem className='sFont'\n                                            key={'validations' + opIndex}\n                                            style={{ textTransform: 'capitalize' }}\n                                            value={option.slug ? option.slug : option.key}\n                                            style={{ textTransform: 'capitalize' }}>\n                                            {option.key}\n                                        </MenuItem>\n                                    ))}\n                                />}\n                        <div style={{ width: '15%' }}>\n                            <TextBox index={index} label='Save As' error={checkValidity && !variableRegex.test(row.variable)}\n                                value={row.variable}\n                                onChange={(e) => workflowStore.onValidationChange(componentNumber, index, 'variable', e.target.value)}\n                                multiline={true} from={'validation'} />\n                        </div>\n                        {index === 0 ? null : <div className={classes.remove} onClick={() => workflowStore.removeMatchValidation(componentNumber, index)}><SvgIcon src={Images.remove} /></div>}\n                    </div>\n                ))}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/MenuItem>",
                    "/>",
                    "/div>",
                    "/>",
                    "/MenuItem>",
                    "/>",
                    "/MenuItem>",
                    "/>",
                    "/MenuItem>",
                    "/>",
                    "/Static",
                    "/MenuItem>",
                    "/>",
                    "/Value",
                    "/>",
                    "/div>",
                    "/Value",
                    "/MenuItem>",
                    "/>}",
                    "/>",
                    "/div>",
                    "/></div>}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/Temp.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    46,
                    68
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/Temp.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row}\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlePageClick",
                "method_begin": "const handlePageClick = (data) => {",
                "method_end": "};",
                "range": [
                    70,
                    75
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/Temp.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/${offset"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    77,
                    85
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/Temp.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    87,
                    89
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/Temp.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createNewConfig",
                "method_begin": "const createNewConfig = () => {",
                "method_end": "}",
                "range": [
                    91,
                    94
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/Temp.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setWorkflowForDelete",
                "method_begin": "const setWorkflowForDelete = (index) => {",
                "method_end": "}",
                "range": [
                    96,
                    99
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/Temp.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    101,
                    108
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/Temp.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/1",
                    "/home/configuration/workflow/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchDocs",
                "method_begin": "const searchDocs = (event) => {",
                "method_end": "}",
                "range": [
                    110,
                    118
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/Temp.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderHeader",
                "method_begin": "const renderHeader = () => {",
                "method_end": "}",
                "range": [
                    121,
                    133
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/Temp.js",
                "returnType": "(\n            <div className={classes.headerCont}>\n                <div className={classes.listHeader}>\n                    <div></div>\n                    <div className={classes.createButton} onClick={() => props.history.push('/home/configuration/workflow/create/input/new')} >\n                        CREATE NEW WORKFLOW\n                    </div>\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/home/configuration/workflow/create/input/new",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowHeader.js": {
        "method_details_": [
            {
                "method_name": "getClassName",
                "method_begin": "const getClassName = (id) => {",
                "method_end": "}",
                "range": [
                    26,
                    41
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowHeader.js",
                "returnType": "`ribbon-right noMargin ribbon-single-active` | `ribbon-right noMargin` | `ribbon-both ribbon-active` | `ribbon-both` | `ribbon-both ribbon-active` | `ribbon-both`",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js": {
        "method_details_": [
            {
                "method_name": "setBatchesPerPage",
                "method_begin": "const setBatchesPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    57,
                    60
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSortStart",
                "method_begin": "const onSortStart = (e) => {",
                "method_end": "}",
                "range": [
                    73,
                    75
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    95,
                    107
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    117,
                    119
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    121,
                    143
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row.label}\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderProcessingStatus",
                "method_begin": "const renderProcessingStatus = (value) => {",
                "method_end": "}",
                "range": [
                    145,
                    156
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "(\n            // value < 100 ?\n            true ?\n                <div className={classes.processingLoader} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div> :\n                <div className={`${classes.processingLoader} ${classes.ocrComplete}`} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    158,
                    163
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/${workflowFilter}/${pageNo",
                    "/home/configuration/workflow/${workflowFilter}/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    165,
                    167
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchHeaders",
                "method_begin": "const setBatchHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    169,
                    171
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    173,
                    198
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalWorkflows}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (10) + 1)}\n                    -\n                    {pageNo * 10 <= totalWorkflows ? (pageNo * 10) : totalWorkflows\n                    }\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {/*<RowsPerPage value={10} setRowsPerPage={setBatchesPerPage} />*/}\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/*<RowsPerPage",
                    "/>*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatch",
                "method_begin": "const openBatch = (data) => {",
                "method_end": "}",
                "range": [
                    200,
                    208
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${data._id}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    210,
                    221
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderUploadButton",
                "method_begin": "const renderUploadButton = () => {",
                "method_end": "}",
                "range": [
                    231,
                    240
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "(\n            <div className='colFlex flexCenter'>\n                <div className={`rowFlex ${classes.uploadButton}`} style={{ border: 'solid 1px' }} onClick={onClickNewWorkflow}>\n                    +&nbsp;&nbsp;\n                    New Workflow Configuration\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickNewWorkflow",
                "method_begin": "const onClickNewWorkflow = () => {",
                "method_end": "}",
                "range": [
                    242,
                    245
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/input/new"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setWorkflowForDelete",
                "method_begin": "const setWorkflowForDelete = (index) => {",
                "method_end": "}",
                "range": [
                    247,
                    250
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    252,
                    260
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    262,
                    264
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header) => {",
                "method_end": "}",
                "range": [
                    266,
                    301
                ],
                "parameters": [
                    "row",
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "(<div>{row[`${header.name}`] && Moment(row[`${header.name}`]).format('DD MMM YY, h:mm a')}</div>) | (row.uploadedVia === undefined ?\n                    <div className={classes.uploadedVia}>\n                        <div><SvgIcon src={Images[`${uploadSources.upload.icon}`]} /></div>&nbsp;\n                        <div className='xsFont'>{uploadSources.upload.name}</div>\n                        {/*<div>{uploadSources[`${row.uploadedVia}`].type}</div>*/}\n                    </div>\n                    : null) | (\n                    <div className='rowFlex '>\n                        <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                            <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#33cb74' }} align=\"left\" width={row.processedPercentage + '%'} className={classes.percentageLine} />\n                            </div>\n                        </div>\n                        <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>\n                    </div>\n                ) | <div onClick={() => workflowStore.exportXls(true, row._id)}\n                    className={clsx({ ['custom-btn btn-3']: true, [classes.disProcessBtn]: row.processedPercentage < 100, sFont: true })}><span style={{ padding: '1vh 1vw' }}>{row.exportedFromUpload ? 'Process Again' : 'Process Now'}</span></div> | <div className={classes.rowLink} onClick={() => openBatch(row)}>{row[`${header.name}`]}</div> | <div >{row.workFlow && row.workFlow.name}</div> | getTimeElapsed(row) | (<div>{row[`${header.name}`]}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span></div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickEdit",
                "method_begin": "const onClickEdit = (id) => {",
                "method_end": "}",
                "range": [
                    303,
                    306
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/Workflow/WorkflowList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/input/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/ConfigForm.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/CreateEditWorkflow.js": {
        "method_details_": [
            {
                "method_name": "renderComponent",
                "method_begin": "const renderComponent = () => {",
                "method_end": "}",
                "range": [
                    37,
                    60
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/CreateEditWorkflow.js",
                "returnType": "<ConfigForm clickContinue={clickContinue} step={1} /> | <InputSource clickContinue={clickContinue} step={1} /> | <InputSource clickContinue={clickContinue} step={2} /> | <OcrConfig clickContinue={clickContinue} screen={configScreens[currentPage]} component={'SELF'} /> | <OcrConfig clickContinue={clickContinue} screen={configScreens[currentPage]} component={<OcrAliasForm />} /> | <OcrConfig clickContinue={clickContinue} screen={configScreens[currentPage]} component={<OcrApiForm />} /> | <OutputSource step={5} /> | <OutputPreview /> | <OutputSource step={6} /> | <OutputPreview />",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/>",
                    "/>",
                    "/>}",
                    "/>",
                    "/>}",
                    "/>",
                    "/>",
                    "/>",
                    "/>",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderFormActions",
                "method_begin": "const renderFormActions = () => {",
                "method_end": "}",
                "range": [
                    62,
                    102
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/CreateEditWorkflow.js",
                "returnType": "<SimpleButton label='Continue' onClick={clickContinue} disabled={disableButtonCheck(1)} /> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={inputType === ''} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={!docTypes.length} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={checkOcrAliasForm()} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={!checkOcrApiForm()} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={checkOcrAliasForm()} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Continue' onClick={clickContinue} disabled={checkOcrAliasForm()} />\n                </div> | <div className='rowFlex'>\n                    <SimpleButton label='Back' onClick={clickBack} variant='cancel' />&nbsp;&nbsp;\n                    <SimpleButton label='Confirm' onClick={clickContinue} progress={createProgress} />\n                </div>",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>&nbsp;&nbsp;",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "disableButtonCheck",
                "method_begin": "const disableButtonCheck = (step) => {",
                "method_end": "}",
                "range": [
                    104,
                    111
                ],
                "parameters": [
                    "step"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/CreateEditWorkflow.js",
                "returnType": "true | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkOcrAliasForm",
                "method_begin": "const checkOcrAliasForm = () => {",
                "method_end": "}",
                "range": [
                    122,
                    129
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/CreateEditWorkflow.js",
                "returnType": "invalid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkOcrApiForm",
                "method_begin": "const checkOcrApiForm = () => {",
                "method_end": "}",
                "range": [
                    131,
                    140
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/CreateEditWorkflow.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "clickContinue",
                "method_begin": "const clickContinue = () => {",
                "method_end": "}",
                "range": [
                    142,
                    183
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/CreateEditWorkflow.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "clickBack",
                "method_begin": "const clickBack = () => {",
                "method_end": "}",
                "range": [
                    185,
                    187
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/CreateEditWorkflow.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/InputSource.js": {
        "method_details_": [
            {
                "method_name": "renderTooltip",
                "method_begin": "const renderTooltip = (row) => {",
                "method_end": "}",
                "range": [
                    35,
                    41
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/InputSource.js",
                "returnType": "(\n            <div className={'rowFlex'}>\n                <SvgIcon src={Images.error} style={\"fill : #157fff \"} />\n                <div>&nbsp;&nbsp;{inputSourceDesc[`${row}`]}</div></div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div></div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleInputSourceChange",
                "method_begin": "const handleInputSourceChange = (value) => {",
                "method_end": "}",
                "range": [
                    43,
                    45
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/InputSource.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrAliasForm.js": {
        "method_details_": [
            {
                "method_name": "handleTabChange",
                "method_begin": "const handleTabChange = (e, v) => {",
                "method_end": "}",
                "range": [
                    27,
                    29
                ],
                "parameters": [
                    "e",
                    "v"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrAliasForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTabs",
                "method_begin": "const renderTabs = () => {",
                "method_end": "}",
                "range": [
                    31,
                    43
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrAliasForm.js",
                "returnType": "(\n            <div className={classes.tabContainer}>\n                <Tabs indicatorColor=\"secondary\" aria-label=\"doctype tabs\" value={currentDoc} onChange={handleTabChange} classes={{ flexContainer: 'fullHeight' }} >\n                    {\n                        docTypes.map((row, index) => (\n                            <Tab disableRipple classes={{ root: classes.tabRoot }} key={'tabDocType' + index} color=\"primary\" label={<div className='rowFlex'> {row.slug && modifyText(row.slug)}</div>} />\n                        ))\n                    }\n                </Tabs>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>}",
                    "/>",
                    "/Tabs>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    45,
                    62
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrAliasForm.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n                    {\n                        ['Keys', 'Select', 'Alias'].map((row, index) => (\n                            (\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row}\n                                </TableCell>\n                            )\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleAliasChange",
                "method_begin": "const handleAliasChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    64,
                    66
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrAliasForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCheckboxChange",
                "method_begin": "const handleCheckboxChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    68,
                    70
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrAliasForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderAliasForm",
                "method_begin": "const renderAliasForm = () => {",
                "method_end": "}",
                "range": [
                    72,
                    103
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrAliasForm.js",
                "returnType": "(\n            <div className={classes.tableContainer}>\n                <TableContainer elevation={0} component={Paper} classes={{root: classes.tableRoot}}  >\n                    <Table className={classes.table} aria-label=\"simple table\" stickyHeader>\n                        {renderTableHead()}\n                        <TableBody>\n                            {aliasArray[currentDoc].aliases.map((row, index) => (\n                                <TableRow key={index} className={classes.tableRow}  >\n                                    <TableCell classes={{ root: classes.tableCell }} align=\"left\">{row.key && modifyText(row.key)}</TableCell>\n                                    <TableCell padding=\"checkbox\" className={classes.checkbox} align='center'>\n                                        <Checkbox \n                                            checkedIcon={<CheckboxIcon checked={true} />}\n                                            icon={<CheckboxIcon checked={false} />}\n                                            onChange={(e, value) => handleCheckboxChange(index, value)}\n                                            checked={row.selected}\n                                            color=\"primary\"\n                                            inputProps={{ classes: { root: classes.checkbox } }} />\n                                    </TableCell>\n                                    <TableCell classes={{ root: classes.inputTableCell }} align=\"left\">\n                                        <input placeholder={row.key && modifyText(row.key)} value={row.alias}\n                                            onChange={(e) => handleAliasChange(index, e.target.value)}\n                                            className={classes.aliasInput} />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrApiForm.js": {
        "method_details_": [
            {
                "method_name": "handleApiChange",
                "method_begin": "const handleApiChange = (index, value, type) => {",
                "method_end": "}",
                "range": [
                    41,
                    43
                ],
                "parameters": [
                    "index",
                    "value",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrApiForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleRadioChange",
                "method_begin": "const handleRadioChange = (e) => {",
                "method_end": "}",
                "range": [
                    45,
                    49
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrApiForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getApiList",
                "method_begin": "const getApiList = (index) => {",
                "method_end": "}",
                "range": [
                    51,
                    56
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrApiForm.js",
                "returnType": "docTypes[temp].apis.defaultApis ? docTypes[temp].apis.defaultApis : [] | []",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFieldList",
                "method_begin": "const getFieldList = (index) => {",
                "method_end": "}",
                "range": [
                    58,
                    76
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrApiForm.js",
                "returnType": "fields | []",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    78,
                    95
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrApiForm.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n                    {\n                        ['Document', 'API', 'Fields'].map((row, index) => (\n                            (\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\" style={{ width: '33%' }}>\n                                    {row}\n                                </TableCell>\n                            )\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocList",
                "method_begin": "const getDocList = (index) => {",
                "method_end": "}",
                "range": [
                    97,
                    102
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrApiForm.js",
                "returnType": "(apiArray.findIndex(x => x.type === el.slug) === index || apiArray.findIndex(x => x.type === el.slug) === -1) && el.apis !== null | docs",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderApiForm",
                "method_begin": "const renderApiForm = () => {",
                "method_end": "}",
                "range": [
                    104,
                    146
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrApiForm.js",
                "returnType": "(\n\n            <div className={classes.tableContainer} style={{ marginTop: '2vh' }}>\n                <TableContainer elevation={0} component={Paper} classes={{ root: classes.tableRoot }} style={{overflowX: 'hidden'}} >\n                    <Table className={classes.table} aria-label=\"simple table\" stickyHeader>\n                        {renderTableHead()}\n                        <TableBody>\n                            {apiArray.map((row, index) => (\n                                <TableRow key={index} className={classes.tableRow}  >\n                                    <TableCell className={classes.apiTableCell} align=\"left\"  >\n                                        <SelectBox type='api' value={row.type} onChange={(e) => handleApiChange(index, e.target.value, 'type')}\n                                            options={getDocList(index).map((doc, docIndex) => (\n                                                <MenuItem key={'doc' + docIndex} value={doc.slug}>{doc.slug && modifyText(doc.slug)} </MenuItem>\n                                            ))}\n                                        />\n                                    </TableCell>\n                                    <TableCell padding=\"checkbox\" className={classes.checkbox} align='left'>\n                                        <SelectBox type='api' value={row.apiSlug} disabled={row.type === ''} onChange={(e) => handleApiChange(index, e.target.value, 'apiSlug')}\n                                            options={getApiList(index).map((api) => (\n                                                <MenuItem key={'api' + api.slug} value={api.slug}>{api.name} </MenuItem>\n                                            ))}\n                                        />\n                                    </TableCell>\n                                    <TableCell padding=\"checkbox\" className={classes.checkbox} align='left'>\n                                        <SelectBox type='api' value={row.fields} multiple={true} disabled={row.apiSlug === ''} onChange={(e) => handleApiChange(index, e.target.value, 'fields')}\n                                            options={getFieldList(index).map((field) => (\n                                                <MenuItem key={'fields' + field.key} value={field}>{field}</MenuItem>\n                                            ))}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <br />\n                {apiArray.length < docTypes.length && nullApis < apiArray.length ?\n                    <div className={classes.addApiButton} onClick={configStore.addApi}>+ Add API</div>\n                    : null}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/MenuItem>",
                    "/>",
                    "/TableCell>",
                    "/MenuItem>",
                    "/>",
                    "/TableCell>",
                    "/MenuItem>",
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrConfig.js": {
        "method_details_": [
            {
                "method_name": "handleDocTypesChange",
                "method_begin": "const handleDocTypesChange = (event) => {",
                "method_end": "}",
                "range": [
                    20,
                    23
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCountryChange",
                "method_begin": "const handleCountryChange = (event) => {",
                "method_end": "}",
                "range": [
                    25,
                    28
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocTypeForm",
                "method_begin": "const renderDocTypeForm = () => {",
                "method_end": "}",
                "range": [
                    36,
                    73
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OcrConfig.js",
                "returnType": "(\n            <div className={'colFlex flexCenter fullHeight'}>\n                <div className={classes.inputSourceCont}>\n                    <div className={classes.ocrForm}>\n                        <SelectBox label='Select Country' style={{ textTransform: 'capitalize' }}\n                            value={country}\n                            onChange={handleCountryChange}\n                            options={Object.keys(countryList).map((option, index) => (\n                                <MenuItem\n                                    key={'country' + option}\n                                    style={{ textTransform: 'capitalize' }}\n                                    value={option}\n                                    //disabled={index === 0}\n                                    //selected={option === props.filter}\n                                    //onClick={(event) => logout()}\n                                    style={{ textTransform: 'capitalize' }}\n\n                                >\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        />\n                        <br />\n                        <SelectBox label='Select Document Type' multiple={true}\n                            value={docTypes}\n                            onChange={handleDocTypesChange}\n                            options={config.uploadTypes.map((option) => (\n                                <MenuItem key={'docType' + option.slug} value={option} classes={{ selected: classes.selectedMenuItem }}>\n                                    {option.slug && modifyText(option.slug)}\n                                </MenuItem>\n                            ))}\n                        />\n                    </div>\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//disabled={index",
                    "//selected={option",
                    "//onClick={(event",
                    "/MenuItem>",
                    "/>",
                    "/>",
                    "/MenuItem>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OuputApiForm.js": {
        "method_details_": [
            {
                "method_name": "renderApiForm",
                "method_begin": "const renderApiForm = () => {",
                "method_end": "}",
                "range": [
                    27,
                    71
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OuputApiForm.js",
                "returnType": "(\n            <div>\n                {\n                    fields.map((row, index) => (\n                        <React.Fragment>\n                            <SimpleTextBox\n                                key={'outputApi' + index}\n                                value={outputApi[`${row}`]}\n                                label={row && modifyText(row)}\n                                multiline={true}\n                                maxRows={10}\n                                onChange={(e) => configStore.handleApiOutputChange(row, e.target.value)} />\n                            <br />\n                        </React.Fragment>\n                    ))\n                }\n                <div className={classes.addInputValueBtn} onClick={configStore.addApiInputValue}>+ Add input value</div>\n                <br />\n                {\n                    outputApi.input_values.map((row, index) => (\n                        <div className={classes.ipValueContainer} key={'input_values' + index}>\n                            <div className={classes.ipValueInput}>\n                                <SimpleTextBox\n                                    value={row.key}\n                                    label={'Key'}\n                                    multiline={true}\n                                    maxRows={1}\n                                    onChange={(e) => configStore.handleApiInputValueChange(index, 'key', e.target.value)} />\n                            </div>\n                            <div className={classes.ipValueInput}>\n                                <SimpleTextBox\n                                    value={row.value}\n                                    label={'Value'}\n                                    multiline={true}\n                                    maxRows={1}\n                                    onChange={(e) => configStore.handleApiInputValueChange(index, 'value', e.target.value)} />\n                                <DeleteOutlineOutlinedIcon className={classes.ipDelBtn} onClick={() => configStore.delApiInputValue(index)} />\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/React.Fragment>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OutputPreview.js": {
        "method_details_": [
            {
                "method_name": "handleTabChange",
                "method_begin": "const handleTabChange = (e, v) => {",
                "method_end": "}",
                "range": [
                    34,
                    59
                ],
                "parameters": [
                    "e",
                    "v"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OutputPreview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTabs",
                "method_begin": "const renderTabs = () => {",
                "method_end": "}",
                "range": [
                    61,
                    73
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OutputPreview.js",
                "returnType": "(\n            <div className={classes.tabContainer}>\n                <Tabs indicatorColor=\"secondary\" aria-label=\"doctype tabs\" value={currentDoc} onChange={handleTabChange} classes={{ flexContainer: 'fullHeight' }} >\n                    {\n                        docTypes.map((row, index) => (\n                            <Tab disableRipple classes={{ root: classes.tabRoot }} key={'tabDocType' + index} color=\"primary\" label={<div className='rowFlex'> {row.slug && modifyText(row.slug)}</div>} />\n                        ))\n                    }\n                </Tabs>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>}",
                    "/>",
                    "/Tabs>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    75,
                    92
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OutputPreview.js",
                "returnType": "(\n            <TableHead style={{width: '14vw'}}>\n                <TableRow >\n                    {\n                        ['Keys from Document', 'Keys from API'].map((row, index) => (\n                            (\n                                <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                    {row}\n                                </TableCell>\n                            )\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderAliasForm",
                "method_begin": "const renderAliasForm = () => {",
                "method_end": "}",
                "range": [
                    95,
                    114
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OutputPreview.js",
                "returnType": "(\n            <div className={classes.tableContainer}>\n                <TableContainer elevation={0} component={Paper} classes={{ root: classes.tableRoot }}  >\n                    <Table className={classes.table} aria-label=\"simple table\" stickyHeader>\n                        {renderTableHead()}\n                        <TableBody>\n                            {previewArray.map((row, index) => (\n                                <TableRow key={index} className={classes.tableRow}  >\n                                    <TableCell classes={{ root: classes.tableCell }} align=\"left\">{row.aliasKey && modifyText(row.aliasKey)}</TableCell>\n                                    <TableCell classes={{ root: classes.tableCell }} align=\"left\">{row.apiKey && modifyText(row.apiKey)}</TableCell>\n\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OutputSource.js": {
        "method_details_": [
            {
                "method_name": "renderTooltip",
                "method_begin": "const renderTooltip = (row) => {",
                "method_end": "}",
                "range": [
                    20,
                    26
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OutputSource.js",
                "returnType": "(\n            <div className={'rowFlex'}>\n                <SvgIcon src={Images.error} style={\"fill : #ffce00 \"} />\n                <div>&nbsp;&nbsp;{inputSourceDesc[`${row}`]}</div></div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div></div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleOutputSourceChange",
                "method_begin": "const handleOutputSourceChange = (value) => {",
                "method_end": "}",
                "range": [
                    28,
                    30
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Configuration/WorkflowConfig/OutputSource.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/AdminDashboard.js": {
        "method_details_": [
            {
                "method_name": "fetchValue",
                "method_begin": "const fetchValue = (type) => {",
                "method_end": "}",
                "range": [
                    66,
                    103
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/AdminDashboard.js",
                "returnType": "adminStats.documentsaiStatus.OCR_INPROGRESS.total ? adminStats.documentsaiStatus.OCR_INPROGRESS.total : 0 | 0 | adminStats.documentsaiStatus.OCR_COMPLETE.total ? adminStats.documentsaiStatus.OCR_COMPLETE.total : 0 | 0 | adminStats.documentsaiStatus.OCR_FAILED.total ? adminStats.documentsaiStatus.OCR_FAILED.total : 0 | 0 | adminStats.documentsaiStatus.OCR_PENDING.total ? adminStats.documentsaiStatus.OCR_PENDING.total : 0 | 0 | adminStats.documentClassificationStatus.STARTED.total ? adminStats.documentClassificationStatus.STARTED.total : 0 | 0 | (\n          <div>\n            <div className='xlFont'>Free: {adminServersCount.free}</div>\n            <div className='xlFont'>Busy: {adminServersCount.busy}</div>\n          </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/CustomPieChart.js": {
        "method_details_": [
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount()",
                "method_end": "this.setState({ data: this.props.data.slice() })",
                "range": [
                    27,
                    31
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/CustomPieChart.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    67,
                    113
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/CustomPieChart.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "//",
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>}",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/Dashboard.js": {
        "method_details_": [
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount()",
                "method_end": "this.props.commonStore.getStatistics()",
                "range": [
                    33,
                    38
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/Dashboard.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    138,
                    171
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/Dashboard.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/DashboardHome.js": {
        "method_details_": [
            {
                "method_name": "handleSelect",
                "method_begin": "const handleSelect = (ranges) => {",
                "method_end": "}",
                "range": [
                    45,
                    47
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/DashboardHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPageHeader",
                "method_begin": "const renderPageHeader = () => {",
                "method_end": "}",
                "range": [
                    49,
                    81
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/DashboardHome.js",
                "returnType": "(\n            <React.Fragment>\n                <div className={classes.heading}>\n                    <div id=\"heading\">Analytics & Statistics</div>\n                    <SimpleButton style={{ visibility: 'hidden' }} variant=\"contained\" className={'hidden'}  >Add User </SimpleButton>\n                    {showDatePicker ?\n                        <div style={{ position: 'absolute', right: '1%', marginTop: '6vh', zIndex: '100' }} >\n                            <ClickAwayListener onClickAway={(e) => setshowDatePicker(false)}>\n                                <DateRangePicker direction=\"horizontal\"\n                                    showSelectionPreview={true}\n                                    moveRangeOnFirstSelection={false}\n                                    months={1}\n                                    ranges={[selectionRange]}\n                                    onChange={item => dashboardStore.setDateRange(item)}\n                                    direction=\"horizontal\"\n                                    disabled={true}\n                                    maxDate={new Date()}\n                                />\n                            </ClickAwayListener>\n                        </div>\n                        : null}\n\n                    <div className={classes.dateRange} onClick={(e) => setshowDatePicker(true)}>\n                        <div className={'colFlex flexCenter'} ><DateRangeIcon fontSize='small' /></div>\n                        <div className={classes.rangeDisplay}>{startDate + '  -  ' + endDate}</div>\n                        {showDatePicker ? <div className={'colFlex flexCenter'}><DoneIcon fontSize='small' onClick={(e) => dashboardStore.getStatistics()} /></div> : null}\n                    </div>\n                </div>\n            </React.Fragment>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/SimpleButton>",
                    "/>",
                    "/ClickAwayListener>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderStatTable",
                "method_begin": "const renderStatTable = (header, icon, data, tableHeaders) => {",
                "method_end": "}",
                "range": [
                    83,
                    123
                ],
                "parameters": [
                    "header",
                    "icon",
                    "data",
                    "tableHeaders"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/DashboardHome.js",
                "returnType": "(\n            <div className={classes.statTable}>\n                <div className={classes.statHeader}>\n                    <div className='rowFlex'>\n                        <SvgIcon src={Images[`${icon}`]} />&nbsp;&nbsp;<div className='colFlex flexCenter'>{header}</div>\n                    </div>\n                </div>\n                <TableContainer elevation={0} component={Paper} classes={{ root: classes.tableRoot }} style={{ overflowX: 'hidden' }} >\n                    <Table className={classes.table} aria-label=\"simple table\" stickyHeader>\n                        <TableHead>\n                            <TableRow >\n                                {\n                                    tableHeaders.map((row, index) => (\n                                        (\n                                            <TableCell key={'header' + 'icon' + index} className={classes.tableHeader} align=\"left\">\n                                                {row}\n                                            </TableCell>\n                                        )\n                                    ))\n                                }\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {data.map((row, index) => (\n                                index > 3 ? null :\n                                    <TableRow key={'icon' + index} className={classes.tableRow}  >\n                                        <TableCell align=\"left\" className={classes.tableCell} >\n                                            {row.name}\n                                        </TableCell>\n                                        <TableCell align='left' className={classes.tableCell} >\n                                            {row.count}\n                                        </TableCell>\n                                    </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>&nbsp;&nbsp;<div",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>",
                    "/TableCell>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPieData",
                "method_begin": "const getPieData = () => {",
                "method_end": "}",
                "range": [
                    125,
                    131
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/DashboardHome.js",
                "returnType": "temp",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderHealthStatus",
                "method_begin": "const renderHealthStatus = () => {",
                "method_end": "}",
                "range": [
                    134,
                    184
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/DashboardHome.js",
                "returnType": "(\n                    <div className={classes.signalContainer}>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal} style={{ backgroundColor: '#11b511' }}></div></div>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal}></div></div>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal}></div></div>\n                    </div>\n                ) | (\n                    <div className={classes.signalContainer}>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal}></div></div>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal} style={{ backgroundColor: '#fcdb38' }}></div></div>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal}></div></div>\n                    </div>\n                ) | (\n                    <div className={classes.signalContainer}>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal}></div></div>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal} style={{ backgroundColor: '#fcdb38' }}></div></div>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal}></div></div>\n                    </div>\n                ) | (\n                    <div className={classes.signalContainer}>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal}></div></div>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal}></div></div>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal} style={{ backgroundColor: '#ec2b2b' }}></div></div>\n                    </div>\n                ) | (\n                    <div className={classes.signalContainer}>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal} style={{ backgroundColor: '#11b511' }}></div></div>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal}></div></div>\n                        <div className={'colFlex flexCenter'}><div className={classes.signal}></div></div>\n                    </div>\n                )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div></div>",
                    "/div></div>",
                    "/div></div>",
                    "/div>",
                    "/div></div>",
                    "/div></div>",
                    "/div></div>",
                    "/div>",
                    "/div></div>",
                    "/div></div>",
                    "/div></div>",
                    "/div>",
                    "/div></div>",
                    "/div></div>",
                    "/div></div>",
                    "/div>",
                    "/div></div>",
                    "/div></div>",
                    "/div></div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "hideLoader",
                "method_begin": "const hideLoader = () => {",
                "method_end": "}",
                "range": [
                    186,
                    193
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/DashboardHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*var"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/DashboardSkeleton.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/OverallStats.js": {
        "method_details_": [
            {
                "method_name": "handleSelect",
                "method_begin": "const handleSelect = (ranges) => {",
                "method_end": "}",
                "range": [
                    32,
                    34
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/OverallStats.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPageHeader",
                "method_begin": "const renderPageHeader = () => {",
                "method_end": "}",
                "range": [
                    36,
                    68
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/OverallStats.js",
                "returnType": "(\n            <React.Fragment>\n                <div className={classes.heading}>\n                    <div id=\"heading\">Dashboard</div>\n                    <SimpleButton style={{ visibility: 'hidden' }} variant=\"contained\" className={'hidden'}  >Add User </SimpleButton>\n                    {showDatePicker ?\n                        <div style={{ position: 'absolute', right: '1%', marginTop: '6vh', zIndex: '100' }} >\n                            <ClickAwayListener onClickAway={(e) => setshowDatePicker(false)}>\n                                <DateRangePicker direction=\"horizontal\"\n                                    showSelectionPreview={true}\n                                    moveRangeOnFirstSelection={false}\n                                    months={1}\n                                    ranges={[selectionRange]}\n                                    onChange={item => dashboardStore.setDateRange(item)}\n                                    direction=\"horizontal\"\n                                    disabled={true}\n                                    maxDate={new Date()}\n                                />\n                            </ClickAwayListener>\n                        </div>\n                        : null}\n\n                    <div className={classes.dateRange} onClick={(e) => setshowDatePicker(true)}>\n                        <div className={'colFlex flexCenter'} ><DateRangeIcon fontSize='small' /></div>\n                        <div className={classes.rangeDisplay}>{startDate + '  -  ' + endDate}</div>\n                        {showDatePicker ? <div className={'colFlex flexCenter'}><DoneIcon fontSize='small' onClick={(e) => dashboardStore.getStatistics()} /></div> : null}\n                    </div>\n                </div>\n            </React.Fragment>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/SimpleButton>",
                    "/>",
                    "/ClickAwayListener>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderStatTable",
                "method_begin": "const renderStatTable = (header, icon, data, tableHeaders) => {",
                "method_end": "}",
                "range": [
                    70,
                    111
                ],
                "parameters": [
                    "header",
                    "icon",
                    "data",
                    "tableHeaders"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/OverallStats.js",
                "returnType": "(\n            <div className={classes.statTable}>\n                <div className={classes.statHeader}>\n                    <div className='rowFlex'>\n                        <SvgIcon src={Images.ocrActive} style={'width: 15; height: 15'} />&nbsp;&nbsp;<div>{header}</div>\n                    </div>\n                    <SvgIcon src={Images.ocrActive} className={classes.expandIcon} style={'width: 15; height: 15'} />\n                </div>\n                <TableContainer elevation={0} component={Paper} classes={{ root: classes.tableRoot }} style={{ overflowX: 'hidden' }} >\n                    <Table className={classes.table} aria-label=\"simple table\" stickyHeader>\n                        <TableHead>\n                            <TableRow >\n                                {\n                                    tableHeaders.map((row, index) => (\n                                        (\n                                            <TableCell key={'header' + 'icon' + index} className={classes.tableHeader} align=\"left\">\n                                                {row}\n                                            </TableCell>\n                                        )\n                                    ))\n                                }\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {data.map((row, index) => (\n                                index > 3 ? null :\n                                    <TableRow key={'icon' + index} className={classes.tableRow}  >\n                                        <TableCell align=\"left\" className={classes.tableCell} >\n                                            {row.name}\n                                        </TableCell>\n                                        <TableCell align='left' className={classes.tableCell} >\n                                            {row.count}\n                                        </TableCell>\n                                    </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>&nbsp;&nbsp;<div>{header}</div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>",
                    "/TableCell>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentage",
                "method_begin": "const getPercentage = (count) => {",
                "method_end": "}",
                "range": [
                    113,
                    124
                ],
                "parameters": [
                    "count"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Dashboard/OverallStats.js",
                "returnType": "'0%' | Math.round(temp) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/BatchFilter.js": {
        "method_details_": [
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    27,
                    35
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/BatchFilter.js",
                "returnType": "`${batchList[i][type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleBatchChange",
                "method_begin": "const handleBatchChange = (value) => {",
                "method_end": "}",
                "range": [
                    68,
                    76
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/BatchFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/page/1/batch/${value}/${filterType}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleScroll",
                "method_begin": "const handleScroll = (event) => {",
                "method_end": "}",
                "range": [
                    78,
                    86
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/BatchFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//if",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchBatches",
                "method_begin": "const fetchBatches = () => {",
                "method_end": "}",
                "range": [
                    89,
                    95
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/BatchFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Card.js": {
        "method_details_": [
            {
                "method_name": "Card",
                "method_begin": "function Card({ id, name, index, fullWidth, moveCard, findCard, width, filter, filtered, menuStyle, checkboxClass, align })",
                "method_end": ");",
                "range": [
                    48,
                    124
                ],
                "parameters": [
                    "{ id, name, index, fullWidth, moveCard, findCard, width, filter, filtered, menuStyle, checkboxClass, align }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Card.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>;",
                    "/home/document/page/1",
                    "/home/document/page/1/batch/${documentListStore.batchFilter}",
                    "/div>",
                    "/*",
                    "/></div>",
                    "/}",
                    "/div>",
                    "//",
                    "//",
                    "/>}",
                    "/>}",
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/MenuItem>",
                    "/Menu>",
                    "/TableCell>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickFilter",
                "method_begin": "const onClickFilter = (e, type) => {",
                "method_end": "}",
                "range": [
                    53,
                    55
                ],
                "parameters": [
                    "e",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (type, index, value, item) => {",
                "method_end": "}",
                "range": [
                    61,
                    80
                ],
                "parameters": [
                    "type",
                    "index",
                    "value",
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1",
                    "/home/document/page/1/batch/${documentListStore.batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ClassFilter.js": {
        "method_details_": [
            {
                "method_name": "CustomSvgIcon",
                "method_begin": "function CustomSvgIcon(props)",
                "method_end": ");",
                "range": [
                    11,
                    17
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ClassFilter.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ConfigurationFilter.js": {
        "method_details_": [
            {
                "method_name": "setConfigFilter",
                "method_begin": "const setConfigFilter = (value) => {",
                "method_end": "}",
                "range": [
                    29,
                    33
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ConfigurationFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (type, index, value, item) => {",
                "method_end": "}",
                "range": [
                    35,
                    55
                ],
                "parameters": [
                    "type",
                    "index",
                    "value",
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ConfigurationFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ConnectingLines.js": {
        "method_details_": [
            {
                "method_name": "checkIfElemInView",
                "method_begin": "const checkIfElemInView = (elem) => {",
                "method_end": "}",
                "range": [
                    26,
                    37
                ],
                "parameters": [
                    "elem"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ConnectingLines.js",
                "returnType": "isTotal",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkIfElemInViewRector",
                "method_begin": "const checkIfElemInViewRector = (elem) => {",
                "method_end": "}",
                "range": [
                    39,
                    54
                ],
                "parameters": [
                    "elem"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ConnectingLines.js",
                "returnType": "isTotal",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/CurrentDocument.js": {
        "method_details_": [
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount()",
                "method_end": "this.props.documentStore.closeDocumentDrawer()",
                "range": [
                    70,
                    81
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/CurrentDocument.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/document/",
                    "/document/",
                    "/dashboard/drafts"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetHighlight",
                "method_begin": "resetHighlight(reset)",
                "method_end": "})",
                "range": [
                    165,
                    171
                ],
                "parameters": [
                    "reset"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/CurrentDocument.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    234,
                    311
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/CurrentDocument.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/*",
                    "/>*/}",
                    "/>",
                    "/DocumentNavbar>",
                    "/>",
                    "/>",
                    "/>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/SizeMe>",
                    "/*",
                    "/>*/}",
                    "/div>",
                    "/DocumentForm>",
                    "/Xwrapper>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/CurrentDocument1.js": {
        "method_details_": [
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount()",
                "method_end": "this.props.documentStore.closeDocumentDrawer()",
                "range": [
                    27,
                    36
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/CurrentDocument1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/document/",
                    "/document/",
                    "/dashboard/drafts"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetHighlight",
                "method_begin": "resetHighlight(reset)",
                "method_end": "})",
                "range": [
                    83,
                    89
                ],
                "parameters": [
                    "reset"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/CurrentDocument1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    114,
                    167
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/CurrentDocument1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/DocumentForm>",
                    "/>",
                    "/div>",
                    "/>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/SizeMe>",
                    "/div>",
                    "/div>",
                    "/DocumentNavbar>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DetailedFilters.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js": {
        "method_details_": [
            {
                "method_name": "deleteDocs",
                "method_begin": "const deleteDocs = () => {",
                "method_end": "}",
                "range": [
                    35,
                    40
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "skipReview",
                "method_begin": "const skipReview = () => {",
                "method_end": "}",
                "range": [
                    42,
                    53
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startFeedback",
                "method_begin": "const startFeedback = () => {",
                "method_end": "}",
                "range": [
                    73,
                    75
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startReview",
                "method_begin": "const startReview = () => {",
                "method_end": "}",
                "range": [
                    77,
                    101
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/review/batch/${batchId}/${documentList[0]._id}",
                    "/home/document/review/batch/${batchId}/${currentBatch.qcCurrentDocument}",
                    "/home/document/review/batch/${batchId}/${currentBatch.qcCurrentDocument}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = () => {",
                "method_end": "}",
                "range": [
                    103,
                    113
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "batchList[i].processedPercentage | 0 | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelFeedback",
                "method_begin": "const cancelFeedback = () => {",
                "method_end": "}",
                "range": [
                    115,
                    117
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelReview",
                "method_begin": "const cancelReview = () => {",
                "method_end": "}",
                "range": [
                    119,
                    121
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocs",
                "method_begin": "const exportDocs = () => {",
                "method_end": "}",
                "range": [
                    123,
                    134
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadDocs",
                "method_begin": "const downloadDocs = () => {",
                "method_end": "}",
                "range": [
                    136,
                    141
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTriggerStyles",
                "method_begin": "const getTriggerStyles = () => {",
                "method_end": "}",
                "range": [
                    143,
                    147
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "'stroke: ##666666' | 'stroke: #e5e5e5'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "triggerAiProcess",
                "method_begin": "const triggerAiProcess = () => {",
                "method_end": "}",
                "range": [
                    149,
                    153
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "giveFeedback",
                "method_begin": "const giveFeedback = () => {",
                "method_end": "}",
                "range": [
                    155,
                    171
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/passed/batch/${batchId}/${documentList[0]._id}",
                    "/home/training/${feedbackFilter",
                    "/batch/${batchId}/${documentList[0]._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startSession",
                "method_begin": "const startSession = (value) => {",
                "method_end": "}",
                "range": [
                    174,
                    218
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/review/batch/${batchId}/${currentBatch.qcCurrentDocument",
                    "/home/document/review/batch/${batchId}/${currentBatch.qcCurrentDocument}",
                    "/home/document/review/batch/${batchId}/${documentList[0]._id}",
                    "/*",
                    "/home/document/review/batch/${batchId}/${currentBatch.qcCurrentDocument"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocField.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    64,
                    112
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocField.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "//disabled={disabled}",
                    "//",
                    "//",
                    "/InputAdornment>",
                    "/>",
                    "/*confidenceScore",
                    "/div>",
                    "/}",
                    "/div>",
                    "/LightTooltip>",
                    "/div>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/LightTooltip>",
                    "/>",
                    "/div>",
                    "/LightTooltip>",
                    "/>",
                    "/div>",
                    "/LightTooltip>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFilter.js": {
        "method_details_": [
            {
                "method_name": "filterDocuments",
                "method_begin": "const filterDocuments = (value) => {",
                "method_end": "}",
                "range": [
                    28,
                    30
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (type, index, value, item) => {",
                "method_end": "}",
                "range": [
                    32,
                    60
                ],
                "parameters": [
                    "type",
                    "index",
                    "value",
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1",
                    "/home/document/page/1/batch/${documentListStore.batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFilters.js": {
        "method_details_": [
            {
                "method_name": "getTooltip",
                "method_begin": "const getTooltip = (type) => {",
                "method_end": "}",
                "range": [
                    51,
                    65
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFilters.js",
                "returnType": "'' | 'We are still working. Please review the Passed Files while we fetch the Rejected Files' | 'Please complete the review process' | 'Please complete the review process' | ''",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleFilterChange",
                "method_begin": "const handleFilterChange = (value) => {",
                "method_end": "}",
                "range": [
                    67,
                    72
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/page/1/batch/${batchFilter}/review"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js": {
        "method_details_": [
            {
                "method_name": "handleClick",
                "method_begin": "const handleClick = (event) => {",
                "method_end": "};",
                "range": [
                    47,
                    49
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleClose",
                "method_begin": "const handleClose = () => {",
                "method_end": "};",
                "range": [
                    50,
                    52
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    84,
                    109
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/${documentListStore.pageNo}/batch/${documentListStore.batchFilter}/passed",
                    "/home/document/page/${documentListStore.pageNo}/batch/${documentListStore.batchFilter}/rejected",
                    "/home/api/logs/page/${apiStore.logPageNo}",
                    "/home/document/page/${documentListStore.pageNo}/",
                    "/home/document/page/${documentListStore.pageNo}/batch/${documentListStore.batchFilter}/${type}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelPause",
                "method_begin": "const cancelPause = () => {",
                "method_end": "}",
                "range": [
                    111,
                    113
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmPause",
                "method_begin": "const confirmPause = () => {",
                "method_end": "}",
                "range": [
                    115,
                    118
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/${documentListStore.pageNo}/batch/${documentListStore.batchFilter}/passed"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelSubmit",
                "method_begin": "const cancelSubmit = () => {",
                "method_end": "}",
                "range": [
                    120,
                    122
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSubmit",
                "method_begin": "const onSubmit = (finalSubmit, autoSave, next) => {",
                "method_end": "}",
                "range": [
                    125,
                    172
                ],
                "parameters": [
                    "finalSubmit",
                    "autoSave",
                    "next"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/review/batch/${batchId}/${res.id}",
                    "/home/document/page/1/batch/${batchId}/passed",
                    "/*",
                    "/home/document/review/batch/${batchId}/${res.id}",
                    "/home/document/page/1/batch/${batchId}/passed"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "saveTime",
                "method_begin": "const saveTime = (totalTime) => {",
                "method_end": "}",
                "range": [
                    174,
                    175
                ],
                "parameters": [
                    "totalTime"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmSubmit",
                "method_begin": "const confirmSubmit = () => {",
                "method_end": "}",
                "range": [
                    185,
                    204
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/home/document/review/batch/${batchId}/${currentDoc.nextDocId}",
                    "/home/document/page/1/batch/${batchId}/passed"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDoc",
                "method_begin": "const openDoc = (type) => {",
                "method_end": "}",
                "range": [
                    206,
                    210
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/passed/batch/${batchId}/${temp}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickPush",
                "method_begin": "const onClickPush = () => {",
                "method_end": "}",
                "range": [
                    212,
                    215
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/review/batch/${batchId}/${currentDoc.nextDocId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickPushFirst",
                "method_begin": "const onClickPushFirst = () => {",
                "method_end": "}",
                "range": [
                    217,
                    220
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHeader.js": {
        "method_details_": [
            {
                "method_name": "openDoc",
                "method_begin": "const openDoc = (go) => {",
                "method_end": "}",
                "range": [
                    41,
                    49
                ],
                "parameters": [
                    "go"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHeader.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/${type}/batch/${batchId}/${temp}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickPause",
                "method_begin": "const onClickPause = () => {",
                "method_end": "}",
                "range": [
                    51,
                    60
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHeader.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickPlay",
                "method_begin": "const onClickPlay = () => {",
                "method_end": "}",
                "range": [
                    62,
                    71
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHeader.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelStop",
                "method_begin": "const cancelStop = () => {",
                "method_end": "}",
                "range": [
                    84,
                    86
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHeader.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmStop",
                "method_begin": "const confirmStop = () => {",
                "method_end": "}",
                "range": [
                    88,
                    97
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHeader.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchId}/passed"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    99,
                    114
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHeader.js",
                "returnType": "false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkPageValidity",
                "method_begin": "const checkPageValidity = (type) => {",
                "method_end": "}",
                "range": [
                    118,
                    137
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHeader.js",
                "returnType": "false | false | true | false | true",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "MyTimer",
                "method_begin": "function MyTimer({ })",
                "method_end": ");",
                "range": [
                    248,
                    265
                ],
                "parameters": [
                    "{ }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHeader.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span>:<span>{minutes.toString(",
                    "/span>:<span>{seconds.toString(",
                    "/span>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHome.js": {
        "method_details_": [
            {
                "method_name": "refreshPage",
                "method_begin": "const refreshPage = () => {",
                "method_end": "}",
                "range": [
                    100,
                    133
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    135,
                    142
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHome.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    144,
                    152
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHome.js",
                "returnType": "`${batchList[i][type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    155,
                    165
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHome.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%` | '0%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "docFilterChange",
                "method_begin": "const docFilterChange = (type) => {",
                "method_end": "}",
                "range": [
                    168,
                    197
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}/passed",
                    "/home/document/page/1/batch/${batchFilter}/rejected",
                    "/home/document/page/1/batch/${batchFilter}/all"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListProgress.js": {
        "method_details_": [
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    56,
                    58
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    78,
                    90
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListProgress.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    92,
                    94
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    96,
                    102
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    114,
                    154
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListProgress.js",
                "returnType": "(\n            <TableHead>\n                <TableRow>\n                    {/*adminCheck() ?\n                        <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                            <Checkbox\n                                checkedIcon={<CheckboxIcon checked={true} />}\n                                checked={selectAllDocs}\n                                icon={<CheckboxIcon checked={false} />}\n                                onChange={(event, value) => onChangeSelectAll(event, value)}\n                                color=\"primary\"\n                                inputProps={{ classes: { root: classes.checkbox } }} />\n                        </TableCell> : null*/}\n                    <TableCell style={{ width: '5%' }}>\n                        S.No.\n                    </TableCell>\n                    {\n                        tableHeader.map((row, index) => (\n                            !row.selected ? null :\n                                <Card\n                                    index={index}\n                                    filter={row.filter}\n                                    filtered={getFilterStatus(row)}\n                                    key={row.id} id={`${row.id}`}\n                                    align={row.align}\n                                    menuStyle={classes.filterMenu}\n                                    checkboxClass={classes.checkbox}\n                                    width={getWidth(row)} name={row.label} moveCard={moveCard} findCard={findCard} />\n\n                        ))\n                    }\n                    <TableCell align=\"left\" style={{ width: '5%' }}>\n                        <ColumnConfig filterType={filterType} onComplete={propStore.setTableHeaders} from='documents' headers={tableHeader} onChange={onHeaderChange} />\n                    </TableCell>\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*adminCheck(",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/}",
                    "/TableCell>",
                    "/>",
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    160,
                    164
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListProgress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getIndexerStats",
                "method_begin": "const getIndexerStats = (type) => {",
                "method_end": "}",
                "range": [
                    166,
                    168
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListProgress.js",
                "returnType": "'-'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js": {
        "method_details_": [
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    62,
                    64
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    84,
                    96
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    98,
                    100
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    102,
                    108
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    120,
                    160
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "(\n            <TableHead>\n                <TableRow>\n                    {/*adminCheck() ?\n                        <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                            <Checkbox\n                                checkedIcon={<CheckboxIcon checked={true} />}\n                                checked={selectAllDocs}\n                                icon={<CheckboxIcon checked={false} />}\n                                onChange={(event, value) => onChangeSelectAll(event, value)}\n                                color=\"primary\"\n                                inputProps={{ classes: { root: classes.checkbox } }} />\n                        </TableCell> : null*/}\n                    <TableCell style={{ width: '5%' }}>\n                        S.No.\n                    </TableCell>\n                    {\n                        tableHeader.map((row, index) => (\n                            !row.selected ? null :\n                                <Card\n                                    index={index}\n                                    filter={row.filter}\n                                    filtered={getFilterStatus(row)}\n                                    key={row.id} id={`${row.id}`}\n                                    align={row.align}\n                                    menuStyle={classes.filterMenu}\n                                    checkboxClass={classes.checkbox}\n                                    width={getWidth(row)} name={row.label} moveCard={moveCard} findCard={findCard} />\n\n                        ))\n                    }\n                    <TableCell align=\"left\" style={{ width: '5%' }}>\n                        <ColumnConfig filterType={filterType} onComplete={propStore.setTableHeaders} from='documents' headers={tableHeader} onChange={onHeaderChange} />\n                    </TableCell>\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*adminCheck(",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/}",
                    "/TableCell>",
                    "/>",
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    164,
                    190
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/${batchFilter}/all",
                    "/${batchFilter}/passed",
                    "/${batchFilter}/rejected",
                    "/${batchFilter}/review",
                    "/${batchFilter}/completed",
                    "/home/document-api/page/${pageNo",
                    "/${routeExtension}",
                    "/home/document-api/page/${pageNo",
                    "/${routeExtension}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    192,
                    196
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    198,
                    228
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalDocs}\n                </div>\n                {totalDocs === 0 ? null :\n                    <div className='rowFlex'>\n                        <div className={classes.pgnDivider}>|</div>\n                        <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                            <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                        </div>\n                        <div className='colFlex flexCenter fullHeight'>\n                            {pageNo === 1 ? pageNo : ((pageNo - 1) * (docsPerPage) + 1)}\n                            &nbsp; -&nbsp;\n                            {pageNo * docsPerPage <= totalDocs ? (pageNo * docsPerPage) : totalDocs\n                            }\n                        </div>\n                        <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                            <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                        </div>\n                        <div className={classes.pgnDivider}>|</div>\n                        <div className='colFlex flexCenter fullHeight'>\n                            <RowsPerPage value={docsPerPage} setRowsPerPage={setDocsPerPage} />\n                        </div>\n                    </div>\n                }\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocument",
                "method_begin": "const openDocument = (row) => {",
                "method_end": "}",
                "range": [
                    231,
                    273
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/training/${filterType}/batch/${batchFilter}/${encodeURIComponent(row.fileName",
                    "/home/document/passed/batch/${batchFilter}/${row._id}",
                    "/home/training/resolved/batch/${batchFilter}/${row._id}",
                    "/home/document/training/batch/${batchFilter}/${row._id}",
                    "/home/training/feedback/batch/${batchFilter}/${row._id}",
                    "/home/document/all/batch/${batchFilter}/${row._id}",
                    "/home/document/all/batch/${batchFilter}/${row._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocStatus",
                "method_begin": "const renderDocStatus = (value, status, row) => {",
                "method_end": "}",
                "range": [
                    301,
                    326
                ],
                "parameters": [
                    "value",
                    "status",
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "(\n                <div className={classes.docStatus} style={{ color: trainingStatus[`${value}`].fcolor }}>\n                    {trainingStatus[`${value}`].feedbackLabel}\n                </div>\n            ) | (\n                <div className={classes.docStatus} style={{ color: value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].color : trainingStatus[`${status}`].color }}>\n                    {value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].feedbackLabel : (row.pushToRejected ? trainingStatus.REJECTED.label : trainingStatus[`${status}`].label)}\n                </div>\n            ) | (\n            <div className={classes.docStatus} style={{ color: value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].color : trainingStatus[`${status}`].color }}>\n                {/* <div className='colFlex flexCenter' >\n                <div className={classes.dot} style={{ backgroundColor: trainingStatus[`${value}`].color }}></div>\n            </div>*/}\n                {\n                    ocrStatusFilter === 'OCR_COMPLETE' ?\n                        (value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].feedbackLabel : (row.isNonTableFlag && row.isTableFlag ? trainingStatus[`${status}`].label : trainingStatus[`${status}`].feedbackLabel)) :\n                        trainingStatus[`${value}`].label\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>*/}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRank",
                "method_begin": "const renderRank = (row) => {",
                "method_end": "}",
                "range": [
                    328,
                    339
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "(\n            <div className={` semiBold`} style={{ backgroundColor: 'transparent', color: temp.color, fontSize: 'inherit' }}>\n                {temp.label}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderStatus",
                "method_begin": "const renderStatus = (row) => {",
                "method_end": "}",
                "range": [
                    341,
                    362
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "'-' | (\n            row.classification === 'STARTED' || row.classification === 'RETRY' ?\n                <div className='rowFlex '>\n                    <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                        {\n                            <LinearProgress classes={{ root: classes.progressRoot1, barColorPrimary: classes.barColorPrimary }} />\n                        }\n                    </div>\n                    {/*  <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>*/}\n                </div>\n                :\n                <div className={classes.docStatus} style={{ color: trainingStatus[`${row.classification}`] && trainingStatus[`${row.classification}`].color }}>\n                    {trainingStatus[`${row.classification}`] && trainingStatus[`${row.classification}`].label}\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/*",
                    "/div>*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "rejectedFilesPresent",
                "method_begin": "const rejectedFilesPresent = (type) => {",
                "method_end": "}",
                "range": [
                    364,
                    371
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "currentBatch[`${type}`] | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = (row) => {",
                "method_end": "}",
                "range": [
                    373,
                    384
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "'30%' | '30%' | Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRejectedReason",
                "method_begin": "const renderRejectedReason = (buckets, index) => {",
                "method_end": "}",
                "range": [
                    386,
                    405
                ],
                "parameters": [
                    "buckets",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "(\n            <React.Fragment>\n                <div data-tip data-for={'rejectionReason' + index} style={{ textDecoration: 'underline', width: 'fit-content' }}>\n                    {buckets.length}&nbsp; found\n                </div>\n                <ReactTooltip id={'rejectionReason' + index} place='right' effect='solid' className={classes.reasonTooltip}>\n                    <div >\n                        <ul>\n                            {\n                                buckets.map((row, bucketIndex) => (\n                                    <li key={index + 'bucket' + bucketIndex} className='sFont'>{classDetails[`${row.bucketId}`]}</li>\n                                ))\n                            }\n                        </ul>\n                    </div>\n                </ReactTooltip>\n            </React.Fragment>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/li>",
                    "/ul>",
                    "/div>",
                    "/ReactTooltip>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderParentFile",
                "method_begin": "const renderParentFile = (buckets, index) => {",
                "method_end": "}",
                "range": [
                    407,
                    424
                ],
                "parameters": [
                    "buckets",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "(\n            <React.Fragment>\n                <div style={{ width: 'fit-content' }}>\n                    {buckets.map((row, bucketIndex) => (\n                        <div className='sFont rowFlex' className={classes.parentName}>\n                            <div  > {row.bucketCategory}</div>\n                            <CopyToClipboard text={row.bucketCategory} className={classes.copyButton1}\n                                onCopy={() => commonStore.handleOpenSnackBar('Bucket Category name copied to clipboard', 'info')}>\n                                <SvgIcon src={Images.copy} />\n                            </CopyToClipboard>\n                        </div>\n                    ))}\n                </div>\n\n            </React.Fragment>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/>",
                    "/CopyToClipboard>",
                    "/div>",
                    "/div>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToResolvedFiles",
                "method_begin": "const goToResolvedFiles = () => {",
                "method_end": "}",
                "range": [
                    426,
                    429
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPageRange",
                "method_begin": "const renderPageRange = (row) => {",
                "method_end": "}",
                "range": [
                    431,
                    442
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "<span>{(parseInt(arr[0]) + 1).toString() + ' - ' + (parseInt(arr[arr.length - 1]) + 1).toString() + ` of  `}{<span className='semiBold'>{row.totalPages} page(s)</span>}</span> | <span>{parseInt(arr[0]) + 1 + ` of  `}{<span className='semiBold'>{row.totalPages} page(s)</span>}</span> | '-'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span>}</span>",
                    "/span>}</span>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocId",
                "method_begin": "const getDocId = (fileName) => {",
                "method_end": "}",
                "range": [
                    444,
                    449
                ],
                "parameters": [
                    "fileName"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "arr[1] | '-'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadFile",
                "method_begin": "const downloadFile = (row) => {",
                "method_end": "}",
                "range": [
                    451,
                    458
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    461,
                    534
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "(<div>{row.totalPages ? row.totalPages : '0'}</div>) | (<div>{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.reviewedAt ? Moment(row.reviewedAt).format('DD MMM YY, h:mm a') : '-'}</div>) | (<div>{row.classifiedAt ? Moment(row.classifiedAt).format('DD MMM YY, h:mm a') : '-'}</div>) | <div className={classes.processBtn}>Process</div> | row.reviewedBy && row.reviewedBy.email ? getUsernameFromEmail(row.reviewedBy.email) : '-' | <div >{row.fileOriginalName && getDocId(row.fileOriginalName)}</div> | <div >{row.external && row.external.batchId}</div> | <div >{renderPageRange(row)}</div> | row.confidenceScore ? renderConfidenceScore(row.confidenceScore) : 'N/A' | row.aiStatus && renderDocStatus(row.aiStatus, row.status, row) | renderRank(row) | renderStatus(row) | row.buckets && row.buckets.length ? renderRejectedReason(row.buckets, index) : '-' | row.buckets && row.buckets.length ? renderParentFile(row.buckets, index) : '-' | (\n                    row.docType && row.docType.toLowerCase().startsWith('#new_format') ?\n                        <div className='rowFlex'>\n                            <div className='colFlex flexCenter'>\n                                {row.docType}\n                            </div>&nbsp;\n                            <div className='colFlex flexCenter' data-tip data-for={'newFormat' + index}><SvgIcon src={Images.info} /></div>\n                            <ReactTooltip clickable={true} id={'newFormat' + index} place='right' effect='solid' className={'xsFont'} >\n                                <div>This seems to be a new document type<br /> which is yet to be configured</div>\n                            </ReactTooltip>\n                        </div>\n                        :\n                        row.docType\n                ) | (\n                    <div className={classes.docName}>\n                        <div data-tip data-for={'preview' + index} className={ocrStatusFilter === 'OCR_FAILED' ? '' : ((row.reviewStartedLockBy === null || row.reviewStartedLockBy === undefined) ? classes.rowLink : (row.reviewStartedLockBy !== (userStore.user && userStore.user._id) ? classes.lockedLink : classes.rowLink))} style={{ maxWidth: '80%' }} onClick={() => openDocument(row)}>{row.fileOriginalName}</div>\n                        <CopyToClipboard text={row[`${header.type}`]} className={classes.copyButton}\n                            onCopy={() => commonStore.handleOpenSnackBar('Document name copied to clipboard', 'info')}>\n                            <SvgIcon src={Images.copy} />\n                        </CopyToClipboard>\n                        {roleAccess.justAdmin.findIndex(x => x === (userStore.user && userStore.user.role)) > -1 && amygbUserCheck() ?\n                            <div className={classes.copyButton}>\n                                <SvgIcon src={Images.miniDownload} style={'width: 14;height:14;fill:#D2D2D5;'} onClick={() => downloadFile(row)} />\n                            </div> : null}\n                        {\n                            roleAccess.justAdmin.findIndex(x => x === (userStore.user && userStore.user.role)) > -1 ?\n                                <div className={classes.copyButton}>\n                                    <SvgIcon src={Images.miniDelete} style={'width: 14;height:17;fill:#D2D2D5;'} onClick={() => setDeleteDialog({ open: true, item: row })} />\n                                </div>\n                                : null\n                        }\n\n                        { /* <FilePreview index={index} data={row} />*/}\n                    </div>\n                ) | (<div>{row[`${header.type}`] ? row[`${header.type}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/A",
                    "/div>&nbsp;",
                    "/></div>",
                    "/>",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/CopyToClipboard>",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/*",
                    "/>*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderConfidenceScore",
                "method_begin": "const renderConfidenceScore = (value) => {",
                "method_end": "}",
                "range": [
                    536,
                    547
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "(\n            <div className='rowFlex'>\n                <div style={{ width: '25%' }} className='colFlex flexCenter'>\n                    <div className={classes.percentageBar} >\n                        <hr align=\"left\" width={value + '%'} className={classes.percentageLine} style={{ backgroundColor: getCfScoreColors('percent', value) }} />\n                    </div>\n                </div>\n                <div className={classes.cfScore}>{value + '%'}</div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setDocsPerPage",
                "method_begin": "const setDocsPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    549,
                    577
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/${batchFilter}/all",
                    "/${batchFilter}/passed",
                    "/${batchFilter}/rejected",
                    "/${batchFilter}/review",
                    "/${batchFilter}/completed",
                    "/page/1/${routeExtension}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    579,
                    581
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDownload",
                "method_begin": "const cancelDownload = () => {",
                "method_end": "}",
                "range": [
                    583,
                    585
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDelete",
                "method_begin": "const confirmDelete = () => {",
                "method_end": "}",
                "range": [
                    587,
                    595
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDownloadFiles",
                "method_begin": "const renderDownloadFiles = () => {",
                "method_end": "}",
                "range": [
                    597,
                    600
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocSearchBar.js": {
        "method_details_": [
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    28,
                    34
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocSearchBar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/page/1/${propStore.qcStatus}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchDocs",
                "method_begin": "const searchDocs = (event) => {",
                "method_end": "}",
                "range": [
                    37,
                    43
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocSearchBar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/page/1/${propStore.qcStatus}?${searchFilter}=${encodeURIComponent(searchText"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onFilterChange",
                "method_begin": "const onFilterChange = (val, index) => {",
                "method_end": "}",
                "range": [
                    45,
                    52
                ],
                "parameters": [
                    "val",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocSearchBar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//setFilterIndex(index",
                    "/page/1/${propStore.qcStatus}?${val}=${encodeURIComponent(searchText"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js": {
        "method_details_": [
            {
                "method_name": "setCurrentField",
                "method_begin": "const setCurrentField = (e, index, item, pgIndex) => {",
                "method_end": "}",
                "range": [
                    57,
                    66
                ],
                "parameters": [
                    "e",
                    "index",
                    "item",
                    "pgIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "navigateExtractedValues",
                "method_begin": "const navigateExtractedValues = (type) => {",
                "method_end": "}",
                "range": [
                    68,
                    99
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleTabChange",
                "method_begin": "const handleTabChange = (index) => {",
                "method_end": "};",
                "range": [
                    125,
                    128
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleFormFieldChange",
                "method_begin": "const handleFormFieldChange = (value, index, fieldId, type) => {",
                "method_end": "}",
                "range": [
                    130,
                    132
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableDataHead",
                "method_begin": "const renderTableDataHead = (data) => {",
                "method_end": "}",
                "range": [
                    135,
                    152
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "(\n            <TableHead>\n                <TableRow className={classes.tableRowt} >\n                    {\n                        data.map((row, index) => (\n                            (\n                                <TableCell key={'header' + index} className={classes.tableHeadert} style={{ maxWidth: '10vw' }} align=\"left\">\n                                    {row.key}\n                                </TableCell>\n                            )\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (page, pIndex) => {",
                "method_end": "}",
                "range": [
                    154,
                    185
                ],
                "parameters": [
                    "page",
                    "pIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "(\n            <div className={classes.tableContainert}>\n                {\n                    page.tabularContent.map((table, tbIndex) => (\n                        table.data && table.data.length ?\n                            <React.Fragment>\n                                {    /*                            <div className='sFont' style={{padding: '1vh', paddingTop: pIndex === 0 && tbIndex === 0 ? '0': '1vh'}}>Page {pIndex + 1} : Table - {tbIndex + 1}</div>\n*/}                                <TableContainer key={'docTable' + tbIndex} elevation={0} component={Paper} classes={{ root: classes.tableRoott }}  >\n                                    <Table className={classes.tablet} aria-label=\"simple table\" stickyHeader>\n                                        {renderTableDataHead(table.data[0])}\n                                        <TableBody>\n                                            {table.data && table.data.length && table.data.map((item, index) => (\n                                                <TableRow key={index} className={classes.tableRowt}  >\n                                                    {\n                                                        item.map((cell, cellIndex) => (\n                                                            <TableCell key={'cell' + cellIndex} classes={{ root: classes.tableCellt }} align=\"left\"><div className={classes.tableCellData}>{cell && cell.text}</div></TableCell>\n                                                        ))\n                                                    }\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table> <br />\n                                </TableContainer>\n\n                            </React.Fragment>\n                            : null\n                    ))\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/div>",
                    "/}",
                    "/div></TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>",
                    "/>",
                    "/TableContainer>",
                    "/React.Fragment>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderQrData",
                "method_begin": "const renderQrData = () => {",
                "method_end": "}",
                "range": [
                    187,
                    203
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "(\n            <div className={classes.qrData}>\n                {currentPage.qrContent && currentPage.qrContent.extractedData ?\n                    (\n                        Object.keys(currentPage.qrContent.extractedData).map((row, index) => (\n                            row === 'QR_DETECTED' ? null :\n                                <div key={'qr' + index} className={'rowFlex mFont'}>\n                                    <div className={classes.qrKey}>{row}</div>&nbsp;:&nbsp;\n                                    <div style={{ width: '60%' }}>{currentPage.qrContent.extractedData[`${row}`]}</div>\n                                </div>\n                        ))\n                    ) : null\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>&nbsp;:&nbsp;",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFormFields",
                "method_begin": "const getFormFields = (item, index, pgIndex) => {",
                "method_end": "}",
                "range": [
                    206,
                    225
                ],
                "parameters": [
                    "item",
                    "index",
                    "pgIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "(\n                    <ListItem key={index + 'formElement'} id={'formElement' + index} classes={{ root: classes.listGutter }}>\n                        <DocField index={index} recon={item.recon} coords={item.local_value && item.local_value.pts && item.local_value.pts.slice()} key={item.fieldId} label={item.global_key} value={item.local_value && item.local_value.edited_value}\n                            // ref={c => _areaElement.set(index, c)}\n                            onClick={(e) => setCurrentField(e, index, item, pgIndex)}\n                            confidenceScore={item.confidence_score}\n                            mandatory={item.mandatory}\n                            field={item}\n                            currentField={currentField._id === item._id}\n                            highlight={currentPage.qcIncomplete && item.mandatory && !item.qc_error_type && props.qcHighlight}\n                            disabled={type !== 'review'}\n                            onChange={(event) => handleFormFieldChange(event.target.value, index, item.fieldId, item.local_value && item.local_value.edited_value !== \"\" ? \"edited_value\" : \"text\")}\n                        />\n                    </ListItem>\n                )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>",
                    "/ListItem>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "elementInViewport2",
                "method_begin": "const elementInViewport2 = () => {",
                "method_end": "}",
                "range": [
                    227,
                    252
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleDocTypeChange",
                "method_begin": "const handleDocTypeChange = (value, from) => {",
                "method_end": "}",
                "range": [
                    254,
                    267
                ],
                "parameters": [
                    "value",
                    "from"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDisabledCondition",
                "method_begin": "const getDisabledCondition = () => {",
                "method_end": "}",
                "range": [
                    269,
                    276
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "true | (currentPage.isNonTabularFeedbackApplied && currentPage.isNonTabularFeedbackRequested) || currentPage.isNonTabularFeedbackRequested | (currentPage.isTabularFeedbackApplied && currentPage.isTabularFeedbackRequested) || currentPage.isTabularFeedbackRequested",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "testingTabularData",
                "method_begin": "const testingTabularData = () => {",
                "method_end": "}",
                "range": [
                    278,
                    284
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm.js",
                "returnType": "(\n            currentDoc.pageArray && currentDoc.pageArray.map((page, index) => (\n                renderTableData(page, index)\n            ))\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm1.js": {
        "method_details_": [
            {
                "method_name": "componentWillUnmount",
                "method_begin": "componentWillUnmount()",
                "method_end": "this.props.removeHighlight(undefined, this.props.documentStore.currentIndex)",
                "range": [
                    136,
                    140
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    158,
                    226
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentForm1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/*<KeyboardArrowDownIcon",
                    "/KeyboardArrowDownIcon>*/}",
                    "/div>",
                    "/>",
                    "/div>",
                    "/List>",
                    "/div>",
                    "/form>",
                    "/IdleTimer>",
                    "/>",
                    "/Button>",
                    "/Button>",
                    "/Button>",
                    "/Button>",
                    "/div>",
                    "/>",
                    "/>",
                    "/>",
                    "/>",
                    "/div>",
                    "/Button>",
                    "/div>",
                    "/SubmitDialog>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js": {
        "method_details_": [
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    78,
                    91
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1",
                    "/home/document/page/1/batch/${documentListStore.batchFilter}",
                    "/home/document/page/1",
                    "/home/document/page/1/batch/${documentListStore.batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlePageClick",
                "method_begin": "const handlePageClick = (data) => {",
                "method_end": "};",
                "range": [
                    93,
                    101
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/${offset",
                    "/home/document/page/${offset",
                    "/batch/${documentListStore.batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchDocumentList",
                "method_begin": "const fetchDocumentList = () => {",
                "method_end": "}",
                "range": [
                    109,
                    114
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    116,
                    119
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    121,
                    128
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortList",
                "method_begin": "const sortList = (sortDirection, index, sortField) => {",
                "method_end": "}",
                "range": [
                    130,
                    132
                ],
                "parameters": [
                    "sortDirection",
                    "index",
                    "sortField"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    135,
                    176
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n                    <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1vw' }}>\n                        <Checkbox className={classes.checkbox}\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            checked={selectAllDocs}\n                            icon={<CheckboxIcon checked={false} />}\n                            onChange={(event, value) => onChangeSelectAll(event, value)}\n                            color=\"primary\"\n                            inputProps={{ classes: { root: classes.checkbox } }} />\n                    </TableCell>\n                    {\n                        tableHeader.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} className={classes.tableHeader} style={{ width: row.width }} align=\"left\">\n                                    <div style={{ display: 'flex' }}>\n                                        <div className='colFlex flexCenter'>{row.name}</div>\n                                        {\n                                            !row.allowSort ? null :\n                                                <div className='colFlex' style={{ marginLeft: '1vh' }}>\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${row.sort == 1 ? 'black' : ''}; width: 13;height: 13;`} src={Images.up} onClick={(e) => sortList(1, index, row.type)} />\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${row.sort == -1 ? 'black' : ''};width: 13;height: 13;margin-top: -4px`} src={Images.down} onClick={(e) => sortList(-1, index, row.type)} />\n                                                </div>\n                                        }\n                                    </div>\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocStatus",
                "method_begin": "const renderDocStatus = (value) => {",
                "method_end": "}",
                "range": [
                    178,
                    187
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "(\n            <div className={classes.docStatus} style={{ backgroundColor: trainingStatus[`${value}`].bgColor, color: trainingStatus[`${value}`].color }}>\n                {/* <div className='colFlex flexCenter' >\n                    <div className={classes.dot} style={{ backgroundColor: trainingStatus[`${value}`].color }}></div>\n                </div>*/}\n                {trainingStatus[`${value}`].label}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/div>",
                    "/div>*/}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderConfidenceScore",
                "method_begin": "const renderConfidenceScore = (value) => {",
                "method_end": "}",
                "range": [
                    189,
                    200
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "(\n            <div className='rowFlex' style={{ width: '50%' }}>\n                <div style={{ width: '80%' }} className='colFlex flexCenter'>\n                    <SvgIcon src={Images[`${getCfScoreColors('bar', value)}`]} />\n                </div>\n                <div className={classes.cfScore} style={{ color: getCfScoreColors('percent', value) }}>{value + '%'}</div>\n            </div>\n\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "x",
                "method_begin": "const x  = () => {",
                "method_end": "}",
                "range": [
                    202,
                    207
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    209,
                    216
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    218,
                    220
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadDocs",
                "method_begin": "const downloadDocs = () => {",
                "method_end": "}",
                "range": [
                    222,
                    227
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocs",
                "method_begin": "const exportDocs = () => {",
                "method_end": "}",
                "range": [
                    229,
                    240
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocument",
                "method_begin": "const openDocument = (row) => {",
                "method_end": "}",
                "range": [
                    242,
                    256
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${batchFilter}/${row._id}",
                    "/home/document/batch/${batchFilter}/${row._id}",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelExport",
                "method_begin": "const cancelExport = () => {",
                "method_end": "}",
                "range": [
                    258,
                    260
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmExport",
                "method_begin": "const confirmExport = () => {",
                "method_end": "}",
                "range": [
                    262,
                    270
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    272,
                    282
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%` | '0%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUnidentifiedFiles",
                "method_begin": "const viewUnidentifiedFiles = () => {",
                "method_end": "}",
                "range": [
                    284,
                    291
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${batchFilter}/bucket"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    293,
                    301
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "`${batchList[i][type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setIdentificationFilter",
                "method_begin": "const setIdentificationFilter = (type) => {",
                "method_end": "}",
                "range": [
                    303,
                    317
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentNavbar.js": {
        "method_details_": [
            {
                "method_name": "handleThumbnailClick",
                "method_begin": "const handleThumbnailClick = (docId) => {",
                "method_end": "}",
                "range": [
                    20,
                    22
                ],
                "parameters": [
                    "docId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentNavbar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/passed/batch/${batchFilter}/${docId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPageNum",
                "method_begin": "const getPageNum = (ind) => {",
                "method_end": "}",
                "range": [
                    24,
                    31
                ],
                "parameters": [
                    "ind"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentNavbar.js",
                "returnType": "parseInt(arr[ind]) + 1 | ind",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPages",
                "method_begin": "const renderPages = (type) => {",
                "method_end": "}",
                "range": [
                    33,
                    59
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentNavbar.js",
                "returnType": "null | '1' | '1...' + (parseInt(arr[0])) | null | `${lastPage + 2}...${currentDoc.totalPages}` | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentNavbar1.js": {
        "method_details_": [
            {
                "method_name": "componentWillUnmount",
                "method_begin": "componentWillUnmount()",
                "method_end": "// this.props.userStore.reset();",
                "range": [
                    35,
                    39
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentNavbar1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleThumbnailClick",
                "method_begin": "handleThumbnailClick(currentPage, index)",
                "method_end": "this.props.documentStore.setCurrentImage(currentPage, index + 1);",
                "range": [
                    45,
                    56
                ],
                "parameters": [
                    "currentPage",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentNavbar1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    56,
                    151
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentNavbar1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/{currentDoc.pageArray.length}",
                    "/img>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/ListItem>",
                    "/List>}",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/>",
                    "/IconButton>",
                    "/Toolbar>",
                    "/AppBar>",
                    "/Hidden>",
                    "/*",
                    "/}",
                    "//",
                    "/>",
                    "/IconButton>",
                    "/Drawer>",
                    "/Hidden>",
                    "/Drawer>",
                    "/Hidden>",
                    "/nav>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentStats.js": {
        "method_details_": [
            {
                "method_name": "renderStats",
                "method_begin": "const renderStats = () => {",
                "method_end": "}",
                "range": [
                    20,
                    67
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/DocumentStats.js",
                "returnType": "(\n                <div className={classes.statContainer}>\n                    <div className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.totalFiles} />\n                        <div className='fullWidth lFont'>\n                            Total Documents\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont colFlex flexCenter`}>{props.getIndexerStats('total')}</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.hourglass} />\n                        <div className='fullWidth lFont'>\n                            Review Pending\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont`}>{props.getIndexerStats('reviewPendingCount')}</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.automation} />\n                        <div className='fullWidth lFont'>\n                            Classification Reviewed\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont`}>{props.getIndexerStats('classificationReviewedCount')}</div>\n                                {/*<div className={`${classes.subText} ${classes.greenText}`}>\n                                    +50%&nbsp;&nbsp; <div className={classes.subText}>previous batch</div>\n                                </div>*/}\n                            </div>\n                        </div>\n                    </div>\n                    <div className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.accuracy} />\n                        <div className='fullWidth lFont'>\n                            Review Completed\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont`}>{props.getIndexerStats('reviewCompleted')}</div>\n                                <div className={`${classes.subText} sFont`}></div>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n            )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/*<div",
                    "/div>",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js": {
        "method_details_": [
            {
                "method_name": "openBucket",
                "method_begin": "const openBucket = (row) => {",
                "method_end": "}",
                "range": [
                    64,
                    67
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${batchFilter}/bucket/${row.bucketId}/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlePageClick",
                "method_begin": "const handlePageClick = (data) => {",
                "method_end": "};",
                "range": [
                    98,
                    103
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${documentListStore.batchFilter}/bucket/${documentListStore.bucketFilter}/page/${offset"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchDocumentList",
                "method_begin": "const fetchDocumentList = () => {",
                "method_end": "}",
                "range": [
                    110,
                    115
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    117,
                    120
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    122,
                    129
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortList",
                "method_begin": "const sortList = (sortDirection, index, sortField) => {",
                "method_end": "}",
                "range": [
                    131,
                    133
                ],
                "parameters": [
                    "sortDirection",
                    "index",
                    "sortField"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    135,
                    176
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n                    <TableCell padding=\"checkbox\" className={classes.checkbox}>\n                        <Checkbox className={classes.checkbox}\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            checked={selectAllDocs}\n                            icon={<CheckboxIcon checked={false} />}\n                            onChange={(event, value) => onChangeSelectAll(event, value)}\n                            color=\"primary\"\n                            inputProps={{ classes: { root: classes.checkbox } }} />\n                    </TableCell>\n                    {\n                        tableHeader.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} className={classes.tableHeader} style={{ width: row.width }} align=\"left\">\n                                    <div style={{ display: 'flex' }}>\n                                        <div className='colFlex flexCenter'>{row.name}</div>\n                                        {\n                                            !row.allowSort ? null :\n                                                <div className='colFlex' style={{ marginLeft: '1vh' }}>\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${row.sort == 1 ? 'black' : ''}; width: 13;height: 13;`} src={Images.up} onClick={(e) => sortList(1, index, row.type)} />\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${row.sort == -1 ? 'black' : ''};width: 13;height: 13;margin-top: -4px`} src={Images.down} onClick={(e) => sortList(-1, index, row.type)} />\n                                                </div>\n                                        }\n                                    </div>\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocStatus",
                "method_begin": "const renderDocStatus = (value) => {",
                "method_end": "}",
                "range": [
                    178,
                    187
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "(\n            <div className={classes.docStatus} style={{ backgroundColor: trainingStatus[`${value}`].bgColor, color: trainingStatus[`${value}`].color }}>\n                {/*<div className='colFlex flexCenter' >\n                    <div className={classes.dot} style={{ backgroundColor: trainingStatus[`${value}`].color }}></div>\n                </div>*/}\n                {trainingStatus[`${value}`].label}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*<div",
                    "/div>",
                    "/div>*/}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderConfidenceScore",
                "method_begin": "const renderConfidenceScore = (value) => {",
                "method_end": "}",
                "range": [
                    189,
                    200
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "(\n            <div className='rowFlex' style={{ width: '50%' }}>\n                <div style={{ width: '80%' }} className='colFlex flexCenter'>\n                    <SvgIcon src={Images[`${getCfScoreColors('bar', value)}`]} />\n                </div>\n                <div className={classes.cfScore} style={{ color: getCfScoreColors('percent', value) }}>{value + '%'}</div>\n            </div>\n\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteDocs",
                "method_begin": "const deleteDocs = () => {",
                "method_end": "}",
                "range": [
                    202,
                    207
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    209,
                    216
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    218,
                    220
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadDocs",
                "method_begin": "const downloadDocs = () => {",
                "method_end": "}",
                "range": [
                    222,
                    227
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocs",
                "method_begin": "const exportDocs = () => {",
                "method_end": "}",
                "range": [
                    229,
                    240
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocument",
                "method_begin": "const openDocument = (row) => {",
                "method_end": "}",
                "range": [
                    242,
                    250
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/training/batch/${documentListStore.batchFilter}/bucket/${documentListStore.bucketFilter}/${row._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelExport",
                "method_begin": "const cancelExport = () => {",
                "method_end": "}",
                "range": [
                    252,
                    255
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmExport",
                "method_begin": "const confirmExport = () => {",
                "method_end": "}",
                "range": [
                    257,
                    260
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    262,
                    271
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%`",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUnidentifiedFiles",
                "method_begin": "const viewUnidentifiedFiles = () => {",
                "method_end": "}",
                "range": [
                    273,
                    277
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToFeedbackFiles",
                "method_begin": "const goToFeedbackFiles = () => {",
                "method_end": "}",
                "range": [
                    279,
                    285
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setIdentificationFilter",
                "method_begin": "const setIdentificationFilter = (type) => {",
                "method_end": "}",
                "range": [
                    287,
                    301
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToSuccessfulFiles",
                "method_begin": "const goToSuccessfulFiles = () => {",
                "method_end": "}",
                "range": [
                    303,
                    308
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}/passed"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = () => {",
                "method_end": "}",
                "range": [
                    310,
                    354
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "(\n            sectionList.map((section) => (\n                <React.Fragment key={section}>\n                    <TableRow className={classes.tableRow}  >\n                        <TableCell align=\"left\" style={{ backgroundColor: '#eaebf2' }} colSpan={documentListStore.tableHeader.length + 1}>\n                            <div className={classes.rowLink}>{section}</div>\n                        </TableCell>\n                    </TableRow>\n                    {\n                        documentListStore.documentList.map((row, index) => (\n                            row.sectionName !== section ? null :\n                                <TableRow key={row._id} className={classes.tableRow}  >\n                                    <TableCell padding=\"checkbox\" className={classes.checkbox}>\n                                        <Checkbox\n                                            checkedIcon={<CheckboxIcon checked={true} />}\n                                            key={row._id + \"check\"}\n                                            icon={<CheckboxIcon checked={false} />}\n                                            checked={documentListStore.selectedDocs[index]}\n                                            onChange={(event, value) => onCheckboxChange(event, index, value)}\n                                        /></TableCell>\n                                    <TableCell onClick={(e) => openDocument(row)} align=\"left\"><Tooltip title={row.fileOriginalName}><div className={classes.rowLink}>{row.fileOriginalName}</div></Tooltip></TableCell>\n                                    <TableCell align=\"left\">{row.docType && modifyTextDocType(row.docType)}</TableCell>\n                                    <TableCell align=\"left\">{row.confidenceScore ? renderConfidenceScore(row.confidenceScore) : 'N/A'}</TableCell>\n                                    <TableCell align=\"left\">{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</TableCell>\n                                    <TableCell align=\"left\">\n                                        <div className='rowFlex'>\n                                            <div>{row.aiStatus && renderDocStatus(row.aiStatus)}</div>\n                                            {\n                                                row.aiStatus && trainingStatus[`${row.aiStatus}`] && trainingStatus[`${row.aiStatus}`].showLoader ?\n                                                    <div className={classes.miniLoader}>\n                                                        <MiniLoader type={\"ThreeDots\"} height={20} width={20} color={trainingStatus[`${row.aiStatus}`].color} />\n                                                    </div>\n                                                    : null\n                                            }\n                                        </div>\n                                    </TableCell>\n                                </TableRow>\n                        ))\n                    }\n                </React.Fragment>\n            ))\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/>}",
                    "/>}",
                    "/></TableCell>",
                    "/div></Tooltip></TableCell>",
                    "/TableCell>",
                    "/A",
                    "/TableCell>",
                    "/TableCell>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderClassTable",
                "method_begin": "const renderClassTable = () => {",
                "method_end": "}",
                "range": [
                    356,
                    403
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "(\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow >\n\n                        {\n                            classTableHeader.map((row, index) => (\n                                (\n\n                                    <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                        <div style={{ display: 'flex' }}>\n                                            <div className='colFlex flexCenter'>{row}</div>\n                                        </div>\n                                    </TableCell>\n                                )\n                            ))\n                        }\n\n                    </TableRow>\n                </TableHead>\n                {\n                    <TableBody>\n                        {documentListStore.classList && documentListStore.classList.length ? documentListStore.classList.map((row, index) => (\n                            <TableRow key={index + 'class'} className={classes.tableRow}  >\n                                <TableCell onClick={(e) => openBucket(row)} align=\"left\"\n                                >\n                                    <div className='rowFlex'>\n                                        <LightTooltip position='left-end' title={classDetails[`${row.bucketId}`]}><InfoOutlinedIcon style={{ color: '#646884', fontSize: '15px', }} /></LightTooltip>&nbsp;&nbsp;\n                                        <div className={classes.rowLink} style={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', width: '100%' }}>{row.label}</div>\n                                    </div>\n                                </TableCell>\n                                <TableCell align=\"left\">\n                                    {\n                                        documentListStore.progressAll || documentListStore.inProgress || row.count === ' ' ?\n                                            <div className={classes.miniLoader}>\n                                                <MiniLoader type={\"ThreeDots\"} height={13} width={15} color='#ffce00' />\n                                            </div> :\n                                            <div className={classes.miniLoader}>{row.count}</div>\n                                    }\n                                </TableCell>\n                            </TableRow>\n                        )) : null}\n                    </TableBody>\n                }\n            </Table>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>",
                    "/></LightTooltip>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData1",
                "method_begin": "const renderTableData1 = () => {",
                "method_end": "}",
                "range": [
                    405,
                    441
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "(\n            documentListStore.documentList.length ? documentListStore.documentList.map((row, index) => (\n                <TableRow key={row._id} className={classes.tableRow}  >\n                    <TableCell padding=\"checkbox\" className={classes.checkbox}>\n                        <Checkbox\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            key={row._id + \"check\"}\n                            icon={<CheckboxIcon checked={false} />}\n                            checked={documentListStore.selectedDocs[index]}\n                            onChange={(event, value) => onCheckboxChange(event, index, value)}\n                        /></TableCell>\n                    <TableCell onClick={(e) => openDocument(row)} align=\"left\"><Tooltip title={row.fileOriginalName}><div className={classes.rowLink}>{row.fileOriginalName}</div></Tooltip></TableCell>\n                    <TableCell align=\"left\">{row.docType && modifyTextDocType(row.docType)}</TableCell>\n                    <TableCell align=\"left\">{row.confidenceScore ? renderConfidenceScore(row.confidenceScore) : 'N/A'}</TableCell>\n                    <TableCell align=\"left\">{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</TableCell>\n                    <TableCell align=\"left\">\n                        <div className='rowFlex'>\n                            <div>{row.aiStatus && renderDocStatus(row.aiStatus)}</div>\n                            {\n                                row.aiStatus && trainingStatus[`${row.aiStatus}`] && trainingStatus[`${row.aiStatus}`].showLoader ?\n                                    <div className={classes.miniLoader}>\n                                        <MiniLoader type={\"ThreeDots\"} height={20} width={20} color={trainingStatus[`${row.aiStatus}`].color} />\n                                    </div>\n                                    : null\n                            }\n                        </div>\n                    </TableCell>\n                </TableRow>\n            )) :\n                <TableRow className={classes.tableRow}  >\n                    <TableCell colSpan={documentListStore.tableHeader.length + 1}>\n                        No data found\n                    </TableCell>\n                </TableRow>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/>}",
                    "/></TableCell>",
                    "/div></Tooltip></TableCell>",
                    "/TableCell>",
                    "/A",
                    "/TableCell>",
                    "/TableCell>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableCell>",
                    "/TableRow>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocumentTable",
                "method_begin": "const renderDocumentTable = () => {",
                "method_end": "}",
                "range": [
                    443,
                    465
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "(\n            <TableContainer elevation={0} component={Paper} style={{ maxHeight: '48vh' }}>\n                <Table className={classes.table} aria-label=\"simple table\" stickyHeader={true}>\n                    {renderTableHead()}\n                    {\n                        documentListStore.inProgress ?\n                            <TableBody>\n                                <TableRow className={classes.tableRow}  >\n                                    <TableCell colSpan={documentListStore.tableHeader.length + 1}>\n                                        <div className={`loaderContainer ${classes.tableLoader}`} > <Loader /></div>\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                            :\n                            <TableBody>\n                                {renderTableData1()}\n                            </TableBody>\n                    }\n                </Table>\n            </TableContainer>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    467,
                    475
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Feedback/FeedbackList.js",
                "returnType": "`${batchList[i][type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/FilePreview.js": {
        "method_details_": [
            {
                "method_name": "getImage",
                "method_begin": "const getImage = () => {",
                "method_end": "}",
                "range": [
                    13,
                    17
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/FilePreview.js",
                "returnType": "data.pageArray[0].pageImageLink | ''",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/FormEntryDialog.js": {
        "method_details_": [
            {
                "method_name": "componentDidUpdate",
                "method_begin": "componentDidUpdate(prevProps)",
                "method_end": "this.setState({ showReasons: false })",
                "range": [
                    50,
                    54
                ],
                "parameters": [
                    "prevProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/FormEntryDialog.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    73,
                    130
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/FormEntryDialog.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "//",
                    "/>",
                    "//onClick={(e",
                    "/div>",
                    "/></div>",
                    "/>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/div></Draggable>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/HeaderStats.js": {
        "method_details_": [
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    29,
                    47
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/HeaderStats.js",
                "returnType": "batchAnalytics.processedPercentage | 0 | `c${detailBatchList[i].processedPercentage} p50` | `${detailBatchList[i].processedPercentage}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    49,
                    78
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/HeaderStats.js",
                "returnType": "batchAnalytics[`${type}`] | getTimeElapsed(currentBatch.timeElapsed) | getTimeElapsed(currentBatch.ocrTime) | Math.ceil((currentBatch.identifiedCount / currentBatch.filesCount) * 100) | Math.round(currentBatch.accuracy) | `${currentBatch[type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getResolvedPercentage",
                "method_begin": "const getResolvedPercentage = () => {",
                "method_end": "}",
                "range": [
                    80,
                    87
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/HeaderStats.js",
                "returnType": "Math.ceil((currentBatch.feedbackApplied / (currentBatch.nonIdentifiedCount + currentBatch.feedbackApplied)) * 100) | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchAnalytics",
                "method_begin": "const getBatchAnalytics = (type) => {",
                "method_end": "}",
                "range": [
                    89,
                    108
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/HeaderStats.js",
                "returnType": "`${batchAnalytics[type]}` | `${detailBatchList[i].analytics[type]}` | 0 | 0 | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (time) => {",
                "method_end": "}",
                "range": [
                    110,
                    112
                ],
                "parameters": [
                    "time"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/HeaderStats.js",
                "returnType": "msToHMS(time)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderStats",
                "method_begin": "const renderStats = () => {",
                "method_end": "}",
                "range": [
                    114,
                    367
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/HeaderStats.js",
                "returnType": "(\n                <div className={clsx({[classes.statContainer]: true})}>\n                    <AnimatedDiv className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.totalFiles} />\n                        <div className='fullWidth lFont'>\n                            Total Documents\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont colFlex flexCenter`}>{getBatchDetails('filesCount')}</div>\n                                <div className={classes.successText}>{getBatchDetails('identifiedCount')}</div>\n                                <div className={classes.failedText}>{getBatchDetails('nonIdentifiedCount')}</div>\n                            </div>\n                        </div>\n                    </AnimatedDiv>\n                    <AnimatedDiv className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.automation} />\n                        <div className='fullWidth lFont'>\n                            Automation\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont`}>{getBatchAnalytics('automation')}%</div>\n                                {/*<div className={`${classes.subText} ${classes.greenText}`}>\n                                    +7%&nbsp;&nbsp; <div className={classes.subText}>previous batch</div>\n                                </div>*/}\n                            </div>\n                        </div>\n                    </AnimatedDiv>\n                    <AnimatedDiv className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.accuracy} />\n                        <div className='fullWidth lFont'>\n                            Accuracy\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont`}>{getBatchAnalytics('accuracy')}%</div>\n                                {/*<div className={`${classes.subText} ${classes.greenText}`}>\n                                    +50%&nbsp;&nbsp; <div className={classes.subText}>previous batch</div>\n                                </div>*/}\n                            </div>\n                        </div>\n                    </AnimatedDiv>\n                    <AnimatedDiv className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.hourglass} />\n                        <div className='fullWidth lFont'>\n                            OCR Time\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont`}>{getPercentageClass()}%</div>\n                                <div className={`${classes.subText} sFont`}></div>\n                            </div>\n                        </div>\n                    </AnimatedDiv>\n\n                </div>\n\n            ) | (\n                    <div className={clsx({[classes.statContainer]: true})}>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.totalFiles} />\n                            <div className='fullWidth lFont'>\n                                Total Documents\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont colFlex flexCenter`}>{getBatchDetails('filesCount')}</div>\n                                    <div className={classes.successText}>{getBatchDetails('identifiedCount')}</div>\n                                    <div className={classes.failedText}>{getBatchDetails('nonIdentifiedCount')}</div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.automation} />\n                            <div className='fullWidth lFont'>\n                                Automation\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('automation')}%</div>\n                                    {/* <div className={`${classes.subText} ${classes.greenText}`}>\n                                        +7%&nbsp;&nbsp; <div className={classes.subText}>previous batch</div>\n                                    </div>*/}\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.accuracy} />\n                            <div className='fullWidth lFont'>\n                                Accuracy\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('accuracy')}%</div>\n                                    {/*<div className={`${classes.subText} ${classes.greenText}`}>\n                                        +50%&nbsp;&nbsp; <div className={classes.subText}>previous batch</div>\n                                    </div>*/}\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.hourglass} />\n                            <div className='fullWidth lFont'>\n                                OCR Time\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('ocrTime')}</div>\n                                    <div className={`${classes.subText} xsFont`}></div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n\n                    </div>\n                ) | (\n                    <div className={clsx({[classes.statContainer]: true, [classes.blurredStats]:batchFilter === ' '})}>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.identifiedCount} />\n                            <div className='fullWidth lFont'>\n                                Passed Files\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('identifiedCount')}</div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.qc} />\n                            <div className='fullWidth lFont'>\n                                Quality Check\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('qcCount')}</div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.reviewed} />\n                            <div className='fullWidth lFont'>\n                                Modified\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('modifiedCount')}</div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.hourglass} />\n                            <div className='fullWidth lFont'>\n                                Review Time\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('ocrTime')}</div>\n                                    <div className={`${classes.subText} xsFont`}></div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n\n                    </div>\n                ) | (\n                    <div className={clsx({[classes.statContainer]: true, [classes.blurredStats]:batchFilter === ' '})}>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.unidentified} />\n                            <div className='fullWidth lFont'>\n                                Rejected Files\n                                <div className={`${classes.fileCount} mFont`}>{getBatchDetails('nonIdentifiedCount')}</div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.fgiven} />\n                            <div className='fullWidth lFont'>\n                                Feedback Given\n                                <div className={`${classes.fileCount} mFont`}>{getBatchDetails('feedbackGiven')}</div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.fapplied} />\n                            <div className='fullWidth lFont'>\n                                Resolved\n                                <div className={`${classes.fileCount} mFont`}>{getResolvedPercentage() + `%`}</div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.hourglass} />\n                            <div className='fullWidth lFont'>\n                                Feedback Time\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('ocrTime')}</div>\n                                    <div className={`${classes.subText} xsFont`}></div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                    </div>\n                ) | (\n                    <div className={clsx({[classes.statContainer]: true, [classes.blurredStats]:batchFilter === ' '})}>\n                        <AnimatedDiv className={classes.statCard} style={{ flexDirection: 'column' }}  >\n                            <SvgIcon className={classes.icon} src={Images.unidentified} />\n                            Feedback Applied\n                            <div className='rowFlex'>\n                                <div className='fullWidth' style={{ flex: '1' }} >\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('nonIdentifiedCount')}</div>\n                                </div>\n                                <div style={{ flex: '1', marginRight: '3vw' }} className='rowFlex flexCenter'>\n                                    <div className='colFlex flexCenter'> <SvgIcon src={Images.graph} /></div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.fgiven} />\n                            <div className='fullWidth' style={{ flex: '1' }} >\n                                Feedback Given\n                                <div className={`${classes.fileCount} mFont`}>2</div>\n                            </div>\n                            <div style={{ flex: '1', marginRight: '3vw' }} className='rowFlex flexCenter'>\n                                <div className='colFlex flexCenter'> <SvgIcon src={Images.graph} /></div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.fapplied} />\n                            <div className='fullWidth'>\n                                Feedback Applied\n                                <div className='rowFlex fullWidth spaceBetween'>\n                                    <div style={{ flex: '1' }}>\n                                        <div className={`${classes.fileCount} mFont`}>48%</div>\n                                        {/*<div className={`${classes.subText} ${classes.greenText}`}>\n                                            +7%&nbsp;&nbsp; <div className={classes.subText}>previous batch</div>\n                                        </div>*/}\n                                    </div>\n                                    <div className='rowFlex flexCenter' style={{ flex: '1' }}>\n                                        <div className={`c100 p38`}>\n\n                                            <div className=\"slice\">\n                                                <div className=\"bar\"></div>\n                                                <div className=\"fill\"></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.time} />\n                            <div style={{ flex: '1' }} >\n                                Time taken\n                                <div className={`${classes.fileCount} mFont`}>00:02:14</div>\n                                <div className={`${classes.subText} ${classes.greenText}`}>\n                                    <div className={classes.subText}></div>\n                                </div>\n                            </div>\n                            <div style={{ flex: '1' }} className='rowFlex flexCenter'>\n                                <div className='colFlex flexCenter'> <SvgIcon src={Images.clock} /></div>\n                            </div>\n                        </AnimatedDiv>\n                    </div>\n                )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/*<div",
                    "/div>",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/*<div",
                    "/div>",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/*<div",
                    "/div>",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/*<div",
                    "/div>",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ImageHeader.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js": {
        "method_details_": [
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    64,
                    66
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    86,
                    98
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    100,
                    102
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    104,
                    110
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setDocSortDirection",
                "method_begin": "const setDocSortDirection = (val) => {",
                "method_end": "}",
                "range": [
                    122,
                    127
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    129,
                    180
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "(\n            <TableHead>\n                <TableRow>\n                    {/*adminCheck() ?\n                        <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                            <Checkbox\n                                checkedIcon={<CheckboxIcon checked={true} />}\n                                checked={selectAllDocs}\n                                icon={<CheckboxIcon checked={false} />}\n                                onChange={(event, value) => onChangeSelectAll(event, value)}\n                                color=\"primary\"\n                                inputProps={{ classes: { root: classes.checkbox } }} />\n                        </TableCell> : null*/}\n                    <TableCell style={{ width: '5%' }}>\n                        S.No.\n                    </TableCell>\n                    {\n                        tableHeader.map((row, index) => (\n                            !row.selected ? null :\n                                <TableCell style={{ width: getWidth(row), padding: '2vh 1vw' }} align={row.align} >\n                                    <div style={{ display: 'flex', justifyContent: row.align === 'center' ? 'center' : '' }}>\n                                        <div className='colFlex flexCenter'>\n                                            <span >{row.label}</span></div>\n                                        {\n                                            !row.allowSort ? null :\n                                                <div className='colFlex' style={{ marginLeft: '1vh' }}>\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${docSortDirection == 'ASC' ? 'black' : ''}; width: 13;height: 13;`} src={Images.up}\n                                                        onClick={(e) => setDocSortDirection('ASC')}\n\n                                                    />\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${docSortDirection == 'DESC' ? 'black' : ''};width: 13;height: 13;margin-top: -4px`} src={Images.down}\n                                                        onClick={(e) => setDocSortDirection('DESC')}\n                                                    />\n                                                </div>\n                                        }\n\n                                    </div>\n\n\n                                </TableCell>\n                        ))\n                    }\n                    <TableCell align=\"left\" style={{ width: '5%' }}>\n                        <ColumnConfig filterType={filterType} onComplete={propStore.setTableHeaders} from='documents' headers={tableHeader} onChange={onHeaderChange} />\n                    </TableCell>\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*adminCheck(",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/}",
                    "/TableCell>",
                    "/span></div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    186,
                    215
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/page/${pageNo",
                    "/${routeExtension}",
                    "/page/${pageNo",
                    "/${routeExtension}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getIndexerStats",
                "method_begin": "const getIndexerStats = (type) => {",
                "method_end": "}",
                "range": [
                    217,
                    219
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "propStore.indexerStats && propStore.indexerStats[`${type}`]",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    221,
                    225
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    227,
                    254
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalDocs}\n                </div>\n                {totalDocs === 0 ? null :\n                    <div className='rowFlex'>\n                        <div className={classes.pgnDivider}>|</div>\n                        <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                            <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                        </div>\n                        <div className='colFlex flexCenter fullHeight'>\n                            Page {pageNo} of {Math.ceil(totalDocs / docsPerPage)}\n                        </div>\n                        <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                            <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                        </div>\n                        <div className={classes.pgnDivider}>|</div>\n                        <div className='colFlex flexCenter fullHeight'>\n                            <RowsPerPage value={docsPerPage} setRowsPerPage={setDocsPerPage} />\n                        </div>\n                    </div>\n                }\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocument",
                "method_begin": "const openDocument = (row, from) => {",
                "method_end": "}",
                "range": [
                    257,
                    311
                ],
                "parameters": [
                    "row",
                    "from"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/training/ocr/${filterType}/batch/${row.idpId}/${encodeURIComponent(row.fileName",
                    "/home/training/${filterType}/batch/${row.idpId}/${encodeURIComponent(row.fileName",
                    "/home/training/qc/${filterType}/batch/${row.idpId}/${encodeURIComponent(row.fileName",
                    "/home/document/passed/${row._id}",
                    "/home/training/resolved/${row._id}",
                    "/home/document/training/${row._id}",
                    "/home/training/feedback/${row._id}",
                    "/home/document/all/${row._id}",
                    "/home/document/all/${row._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocStatus",
                "method_begin": "const renderDocStatus = (value, status, row) => {",
                "method_end": "}",
                "range": [
                    339,
                    364
                ],
                "parameters": [
                    "value",
                    "status",
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "(\n                <div className={classes.docStatus} style={{ color: trainingStatus[`${value}`].fcolor }}>\n                    {trainingStatus[`${value}`].feedbackLabel}\n                </div>\n            ) | (\n                <div className={classes.docStatus} style={{ color: value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].color : trainingStatus[`${status}`].color }}>\n                    {value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].feedbackLabel : (row.pushToRejected ? trainingStatus.REJECTED.label : trainingStatus[`${status}`].label)}\n                </div>\n            ) | (\n            <div className={classes.docStatus} style={{ color: value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].color : trainingStatus[`${status}`].color }}>\n                {/* <div className='colFlex flexCenter' >\n                <div className={classes.dot} style={{ backgroundColor: trainingStatus[`${value}`].color }}></div>\n            </div>*/}\n                {\n                    ocrStatusFilter === 'OCR_COMPLETE' ?\n                        (value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].feedbackLabel : (row.isNonTableFlag && row.isTableFlag ? trainingStatus[`${status}`].label : trainingStatus[`${status}`].feedbackLabel)) :\n                        trainingStatus[`${value}`].label\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>*/}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRank",
                "method_begin": "const renderRank = (row) => {",
                "method_end": "}",
                "range": [
                    366,
                    377
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "(\n            <div className={` semiBold`} style={{ backgroundColor: 'transparent', color: temp.color, fontSize: 'inherit' }}>\n                {temp.label}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderStatus",
                "method_begin": "const renderStatus = (row) => {",
                "method_end": "}",
                "range": [
                    379,
                    400
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "'-' | (\n            row.classification === 'STARTED' || row.classification === 'RETRY' ?\n                <div className='rowFlex '>\n                    <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                        {\n                            <LinearProgress classes={{ root: classes.progressRoot1, barColorPrimary: classes.barColorPrimary }} />\n                        }\n                    </div>\n                    {/*  <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>*/}\n                </div>\n                :\n                <div className={classes.docStatus} style={{ color: trainingStatus[`${row.classification}`] && trainingStatus[`${row.classification}`].color }}>\n                    {trainingStatus[`${row.classification}`] && trainingStatus[`${row.classification}`].label}\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/*",
                    "/div>*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "rejectedFilesPresent",
                "method_begin": "const rejectedFilesPresent = (type) => {",
                "method_end": "}",
                "range": [
                    402,
                    409
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "currentBatch[`${type}`] | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = (row) => {",
                "method_end": "}",
                "range": [
                    411,
                    422
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "'30%' | '30%' | Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRejectedReason",
                "method_begin": "const renderRejectedReason = (buckets, index) => {",
                "method_end": "}",
                "range": [
                    424,
                    443
                ],
                "parameters": [
                    "buckets",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "(\n            <React.Fragment>\n                <div data-tip data-for={'rejectionReason' + index} style={{ textDecoration: 'underline', width: 'fit-content' }}>\n                    {buckets.length}&nbsp; found\n                </div>\n                <ReactTooltip id={'rejectionReason' + index} place='right' effect='solid' className={classes.reasonTooltip}>\n                    <div >\n                        <ul>\n                            {\n                                buckets.map((row, bucketIndex) => (\n                                    <li key={index + 'bucket' + bucketIndex} className='sFont'>{classDetails[`${row.bucketId}`]}</li>\n                                ))\n                            }\n                        </ul>\n                    </div>\n                </ReactTooltip>\n            </React.Fragment>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/li>",
                    "/ul>",
                    "/div>",
                    "/ReactTooltip>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderParentFile",
                "method_begin": "const renderParentFile = (buckets, index) => {",
                "method_end": "}",
                "range": [
                    445,
                    462
                ],
                "parameters": [
                    "buckets",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "(\n            <React.Fragment>\n                <div style={{ width: 'fit-content' }}>\n                    {buckets.map((row, bucketIndex) => (\n                        <div className='sFont rowFlex' className={classes.parentName}>\n                            <div  > {row.bucketCategory}</div>\n                            <CopyToClipboard text={row.bucketCategory} className={classes.copyButton1}\n                                onCopy={() => commonStore.handleOpenSnackBar('Bucket Category name copied to clipboard', 'info')}>\n                                <SvgIcon src={Images.copy} />\n                            </CopyToClipboard>\n                        </div>\n                    ))}\n                </div>\n\n            </React.Fragment>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/>",
                    "/CopyToClipboard>",
                    "/div>",
                    "/div>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToResolvedFiles",
                "method_begin": "const goToResolvedFiles = () => {",
                "method_end": "}",
                "range": [
                    464,
                    467
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPageRange",
                "method_begin": "const renderPageRange = (row) => {",
                "method_end": "}",
                "range": [
                    469,
                    480
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "<span>{(parseInt(arr[0]) + 1).toString() + ' - ' + (parseInt(arr[arr.length - 1]) + 1).toString() + ` of  `}{<span className='semiBold'>{row.totalPages} page(s)</span>}</span> | <span>{parseInt(arr[0]) + 1 + ` of  `}{<span className='semiBold'>{row.totalPages} page(s)</span>}</span> | '-'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span>}</span>",
                    "/span>}</span>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocId",
                "method_begin": "const getDocId = (fileName) => {",
                "method_end": "}",
                "range": [
                    482,
                    487
                ],
                "parameters": [
                    "fileName"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "arr[1] | '-'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadFile",
                "method_begin": "const downloadFile = (row) => {",
                "method_end": "}",
                "range": [
                    489,
                    496
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    499,
                    657
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "(<div>{row.totalPages ? row.totalPages : '0'}</div>) | (<div>{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.reviewedAt ? Moment(row.reviewedAt).format('DD MMM YY, h:mm a') : '-'}</div>) | (<div>{row.classifiedAt ? Moment(row.classifiedAt).format('DD MMM YY, h:mm a') : '-'}</div>) | (<div>{row.classifiedAt ? Moment(row.classifiedAt).format('DD MMM YY, h:mm a') : '-'}</div>) | <div className={classes.processBtn} onClick={() => propStore.reprocessFile(row.idpId, row.fileOriginalName)}>Reprocess</div> | (\n                    row.reason === 'LARGE FILE' ?\n                        <div className='rowFlex'>\n                            <SimpleButton label='Approve' onClick={() => setApproveDialog({ label: 'Approve File for Processing', id: row.docId, open: true, value: 'APPROVED', type: 'APPROVE' })} />\n                            <SimpleButton label='Reject' variant='delete' style={{ backgroundColor: props.theme.palette.red }} onClick={() => setApproveDialog({ label: 'Reject File for Processing', id: row.docId, open: true, value: 'REJECTED', type: 'REJECT' })} />\n                        </div> : '-'\n                ) | row.reviewedBy && row.reviewedBy.email ? getUsernameFromEmail(row.reviewedBy.email) : '-' | (\n                    <div>\n                        <div data-tip data-for={'classifiedAcceptedAt' + index} className='rowFlex flexWrap pointer' style={{ width: 'min-content' }}>\n                            <div className='semiBold'> {row.classifiedAcceptedBy && row.classifiedAcceptedBy.email ? getUsernameFromEmail(row.classifiedAcceptedBy.email) : '-'}</div>\n                        </div>\n                        <ReactTooltip id={'classifiedAcceptedAt' + index} place='right' effect='solid' className={'xsFont'} >\n                            <div ><span className='bold'>{row.classifiedAcceptedBy && row.classifiedAcceptedBy.email}</span> &nbsp;<div>At&nbsp;  {row.classifiedAcceptedAt ? Moment(row.classifiedAcceptedAt).format('DD MMM YY, h:mm a') : '-'}</div></div>\n                        </ReactTooltip>\n                    </div>\n                ) | (\n                    <div>\n                        <div data-tip data-for={'indexerReview' + index} className='rowFlex flexWrap pointer' style={{ width: 'min-content' }}>\n                            <div className='semiBold'> {row.reviewedBy && row.reviewedBy.email ? getUsernameFromEmail(row.reviewedBy.email) : '-'}</div>\n                        </div>\n                        <ReactTooltip id={'indexerReview' + index} place='right' effect='solid' className={'xsFont'} >\n                            <div ><span className='bold'>{row.reviewedBy && row.reviewedBy.email}</span> &nbsp;<div>At&nbsp;  {row.reviewedAt ? Moment(row.reviewedAt).format('DD MMM YY, h:mm a') : '-'}</div></div>\n                        </ReactTooltip>\n                    </div>\n                ) | (\n                    <div>\n                        <div data-tip data-for={'supervisorReview' + index} className='rowFlex flexWrap pointer' style={{ width: 'min-content' }}>\n                            <div className='semiBold'> {row.reviewAcceptedBy && row.reviewAcceptedBy.email ? getUsernameFromEmail(row.reviewAcceptedBy.email) : '-'}</div>\n                        </div>\n                        <ReactTooltip id={'supervisorReview' + index} place='right' effect='solid' className={'xsFont'} >\n                            <div ><span className='bold'>{row.reviewAcceptedBy && row.reviewAcceptedBy.email}</span> &nbsp;<div>At&nbsp;  {row.revieweAcceptedAt ? Moment(row.revieweAcceptedAt).format('DD MMM YY, h:mm a') : '-'}</div></div>\n                        </ReactTooltip>\n                    </div>\n                ) | <div >{row.fileOriginalName && getDocId(row.fileOriginalName)}</div> | <div >{renderPageRange(row)}</div> | row.confidenceScore ? renderConfidenceScore(row.confidenceScore) : 'N/A' | row.aiStatus && renderDocStatus(row.aiStatus, row.status, row) | renderRank(row) | renderStatus(row) | row.buckets && row.buckets.length ? renderRejectedReason(row.buckets, index) : '-' | row.buckets && row.buckets.length ? renderParentFile(row.buckets, index) : '-' | (\n                        <div className={classes.docName}>\n                            <div data-tip data-for={'batchPreview' + index}\n                                className={ocrStatusFilter === 'OCR_FAILED' ? '' : ((row.reviewStartedLockBy === null || row.reviewStartedLockBy === undefined) ? classes.rowLink : (row.reviewStartedLockBy !== (userStore.user && userStore.user._id) ? classes.lockedLink : classes.rowLink))}\n                                style={{ maxWidth: '80%' }}\n                                onClick={() => openDocument(row, 'batch')}>{row.batchName}</div>\n                                <ReactTooltip clickable={true} id={'batchPreview' + index} place='right' effect='solid' className={'xsFont'} >\n                                {row.batchName}\n                            </ReactTooltip>\n                        </div>\n                    ) | (<div > {row.batchName}</div>) | (\n                    row.docType && row.docType.toLowerCase().startsWith('#new_format') ?\n                        <div className='rowFlex'>\n                            <div className={`colFlex flexCenter`}>\n                                {row.docType}\n                            </div>&nbsp;\n                            <div className='colFlex flexCenter' data-tip data-for={'newFormat' + index}><SvgIcon src={Images.info} /></div>\n                            <ReactTooltip clickable={true} id={'newFormat' + index} place='right' effect='solid' className={'xsFont'} >\n                                <div>This seems to be a new document type<br /> which is yet to be configured</div>\n                            </ReactTooltip>\n                        </div>\n                        :\n                        row.docType\n                ) | <div className={classes.docName}>\n                        <div data-tip={'fileOriginalName' + index} data-for={'fileOriginalName' + index} className={classes.fileLink}>{row.fileOriginalName}</div>\n                        <CopyToClipboard text={row[`${header.type}`]} className={classes.copyButton}\n                            onCopy={() => commonStore.handleOpenSnackBar('Document name copied to clipboard', 'info')}>\n                            <SvgIcon src={Images.copy} />\n                        </CopyToClipboard>\n                        {(roleAccess.justAdmin.findIndex(x => x === (userStore.user && userStore.user.role)) > -1 && amygbUserCheck()) || (roleAccess.justAdmin.findIndex(x => x === (userStore.user && userStore.user.role)) > -1 && props.from === 'ocrFailure') ?\n                            <div className={classes.copyButton}>\n                                <SvgIcon src={Images.miniDownload} style={'width: 14;height:14;fill:#D2D2D5;'} onClick={() => downloadFile(row)} />\n                            </div> : null}\n                        {\n                            roleAccess.admin.findIndex(x => x === (userStore.user && userStore.user.role)) > -1 ?\n                                <div className={classes.copyButton}>\n                                    <SvgIcon src={Images.miniDelete} style={'width: 14;height:17;fill:#D2D2D5;'} onClick={() => setDeleteDialog({ open: true, item: row })} />\n                                </div>\n                                : null\n                        }\n                        <ReactTooltip id={'fileOriginalName' + index} place='right' effect='solid' >\n                            {row.fileOriginalName}\n                        </ReactTooltip>\n                    </div> | (\n                    <div className={classes.docName}>\n                        <div data-tip={'fileOriginalName' + index} data-for={'fileOriginalName' + index}\n                            className={ocrStatusFilter === 'OCR_FAILED' ? '' : ((row.reviewStartedLockBy === null || row.reviewStartedLockBy === undefined) ? classes.rowLink : (filterType === 'completed' ? classes.rowLink : (row.reviewStartedLockBy !== (userStore.user && userStore.user._id) ? classes.lockedLink : classes.rowLink)))}\n                            style={{ maxWidth: '80%' }}\n                            onClick={() => openDocument(row)}>{row.fileOriginalName}</div>\n                        <CopyToClipboard text={row[`${header.type}`]} className={classes.copyButton}\n                            onCopy={() => commonStore.handleOpenSnackBar('Document name copied to clipboard', 'info')}>\n                            <SvgIcon src={Images.copy} />\n                        </CopyToClipboard>\n                        {roleAccess.justAdmin.findIndex(x => x === (userStore.user && userStore.user.role)) > -1 && amygbUserCheck() ?\n                            <div className={classes.copyButton}>\n                                <SvgIcon src={Images.miniDownload} style={'width: 14;height:14;fill:#D2D2D5;'} onClick={() => downloadFile(row)} />\n                            </div> : null}\n                        {\n                            roleAccess.justAdmin.findIndex(x => x === (userStore.user && userStore.user.role)) > -1 ?\n                                <div className={classes.copyButton}>\n                                    <SvgIcon src={Images.miniDelete} style={'width: 14;height:17;fill:#D2D2D5;'} onClick={() => setDeleteDialog({ open: true, item: row })} />\n                                </div>\n                                : null\n                        }\n\n                        { /* <FilePreview index={index} data={row} />*/}\n                        <ReactTooltip id={'fileOriginalName' + index} place='right' effect='solid' >\n                            {row.fileOriginalName}\n                        </ReactTooltip>\n                    </div>\n                ) | (<div>{row[`${header.type}`] ? row[`${header.type}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/div></div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/div></div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/div></div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/A",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/div>&nbsp;",
                    "/></div>",
                    "/>",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/CopyToClipboard>",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/CopyToClipboard>",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/*",
                    "/>*/}",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderConfidenceScore",
                "method_begin": "const renderConfidenceScore = (value) => {",
                "method_end": "}",
                "range": [
                    659,
                    670
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "(\n            <div className='rowFlex'>\n                <div style={{ width: '25%' }} className='colFlex flexCenter'>\n                    <div className={classes.percentageBar} >\n                        <hr align=\"left\" width={value + '%'} className={classes.percentageLine} style={{ backgroundColor: getCfScoreColors('percent', value) }} />\n                    </div>\n                </div>\n                <div className={classes.cfScore}>{value + '%'}</div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setDocsPerPage",
                "method_begin": "const setDocsPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    672,
                    703
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/page/1/${routeExtension}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    705,
                    707
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDownload",
                "method_begin": "const cancelDownload = () => {",
                "method_end": "}",
                "range": [
                    709,
                    711
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDelete",
                "method_begin": "const confirmDelete = () => {",
                "method_end": "}",
                "range": [
                    713,
                    721
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDownloadFiles",
                "method_begin": "const renderDownloadFiles = () => {",
                "method_end": "}",
                "range": [
                    723,
                    726
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelApprove",
                "method_begin": "const cancelApprove = () => {",
                "method_end": "}",
                "range": [
                    728,
                    730
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmApprove",
                "method_begin": "const confirmApprove = () => {",
                "method_end": "}",
                "range": [
                    732,
                    738
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/IndexerDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PO-SO/CurrentDocumentPoSo.js": {
        "method_details_": [
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount()",
                "method_end": "this.props.documentStore.closeDocumentDrawer()",
                "range": [
                    25,
                    32
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PO-SO/CurrentDocumentPoSo.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "/dashboard/drafts"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetHighlight",
                "method_begin": "resetHighlight(reset)",
                "method_end": "})",
                "range": [
                    85,
                    91
                ],
                "parameters": [
                    "reset"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PO-SO/CurrentDocumentPoSo.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    116,
                    169
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PO-SO/CurrentDocumentPoSo.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/PoSoForm>",
                    "/>",
                    "/div>",
                    "/>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/SizeMe>",
                    "/div>",
                    "/div>",
                    "/DocumentNavbar>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PO-SO/PoSoForm.js": {
        "method_details_": [
            {
                "method_name": "TabPanel",
                "method_begin": "function TabPanel(props)",
                "method_end": ");",
                "range": [
                    27,
                    47
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PO-SO/PoSoForm.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/Typography>",
                    "/Box>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillUnmount",
                "method_begin": "componentWillUnmount()",
                "method_end": "this.props.removeHighlight(undefined, this.props.documentStore.currentIndex)",
                "range": [
                    190,
                    194
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PO-SO/PoSoForm.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    226,
                    315
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PO-SO/PoSoForm.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/*<KeyboardArrowDownIcon",
                    "/KeyboardArrowDownIcon>*/}",
                    "/div>",
                    "/>",
                    "/div>",
                    "/>",
                    "/>",
                    "/Tabs>",
                    "/List>",
                    "/div>",
                    "/IdleTimer>",
                    "//onAction={this.save}",
                    "/>",
                    "/Scrollbars>",
                    "/IdleTimer>",
                    "/TabPanel>",
                    "/form>",
                    "/>",
                    "/Button>",
                    "/Button>",
                    "/Button>",
                    "/div>",
                    "/Button>",
                    "/div>",
                    "/SubmitDialog>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PO-SO/TabularData.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    130,
                    147
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PO-SO/TabularData.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/List>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PagePreview.js": {
        "method_details_": [
            {
                "method_name": "resetAll",
                "method_begin": "const resetAll = () => {",
                "method_end": "};",
                "range": [
                    61,
                    67
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PagePreview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "zoomIn",
                "method_begin": "const zoomIn = () => {",
                "method_end": "};",
                "range": [
                    68,
                    70
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PagePreview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "zoomOut",
                "method_begin": "const zoomOut = () => {",
                "method_end": "};",
                "range": [
                    74,
                    80
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PagePreview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "rotateLeft",
                "method_begin": "const rotateLeft = () => {",
                "method_end": "};",
                "range": [
                    82,
                    88
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PagePreview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "flipImage",
                "method_begin": "const flipImage = () => {",
                "method_end": "};",
                "range": [
                    90,
                    92
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PagePreview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onPan",
                "method_begin": "const onPan = (dx, dy) => {",
                "method_end": "};",
                "range": [
                    94,
                    97
                ],
                "parameters": [
                    "dx",
                    "dy"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PagePreview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fitPage",
                "method_begin": "const fitPage = () => {",
                "method_end": "};",
                "range": [
                    99,
                    103
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PagePreview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "settingZoom",
                "method_begin": "const settingZoom = (e) => {",
                "method_end": "}",
                "range": [
                    105,
                    111
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/PagePreview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Panel.js": {
        "method_details_": [
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount()",
                "method_end": "}, 333);",
                "range": [
                    20,
                    30
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Panel.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    30,
                    83
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Panel.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*if",
                    "/div>",
                    "/button>",
                    "/div>&nbsp;",
                    "/></div>",
                    "/div>",
                    "/></div>}",
                    "/div>",
                    "/button>}",
                    "//",
                    "/AnimatedDiv>",
                    "/div>",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Pie.js": {
        "method_details_": [
            {
                "method_name": "cleanPercentage",
                "method_begin": "const cleanPercentage = (percentage) => {",
                "method_end": "};",
                "range": [
                    3,
                    7
                ],
                "parameters": [
                    "percentage"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Pie.js",
                "returnType": "tooLow ? 0 : tooHigh ? 100 : +percentage",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "Circle",
                "method_begin": "const Circle = ({ colour, pct }) => {",
                "method_end": "};",
                "range": [
                    9,
                    26
                ],
                "parameters": [
                    "{ colour, pct }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Pie.js",
                "returnType": "(\n    <circle\n      r={r}\n      cx={100}\n      cy={100}\n      fill=\"transparent\"\n      stroke={strokePct !== circ ? colour : \"\"} // remove colour as 0% sets full circumference\n      strokeWidth={\"10px\"}\n      strokeDasharray={circ}\n      strokeDashoffset={pct ? strokePct : 0}\n      strokeLinecap=\"round\"\n    ></circle>\n  )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/circle>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "Text",
                "method_begin": "const Text = ({ percentage }) => {",
                "method_end": "};",
                "range": [
                    28,
                    40
                ],
                "parameters": [
                    "{ percentage }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Pie.js",
                "returnType": "(\n    <text\n      x=\"50%\"\n      y=\"50%\"\n      dominantBaseline=\"central\"\n      textAnchor=\"middle\"\n      fontSize={\"10px\"}\n    >\n      {percentage.toFixed(0)}%\n    </text>\n  )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/text>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "Pie",
                "method_begin": "const Pie = ({ percentage, colour }) => {",
                "method_end": "};",
                "range": [
                    42,
                    53
                ],
                "parameters": [
                    "{ percentage, colour }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Pie.js",
                "returnType": "(\n    <svg width={50} height={50}>\n      <g transform={`rotate(-90 ${\"100 100\"})`}>\n        <Circle colour=\"lightgrey\" />\n        <Circle colour={colour} pct={pct} />\n      </g>\n      <Text percentage={pct} />\n    </svg>\n  )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/g>",
                    "/>",
                    "/svg>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector.js": {
        "method_details_": [
            {
                "method_name": "onSelected",
                "method_begin": 860,
                "method_end": 889,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount(props)",
                "method_end": "// this.addMouseEvents()",
                "range": [
                    187,
                    209
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidUpdate",
                "method_begin": "componentDidUpdate(prevProps)",
                "method_end": "this.addMouseEvents()",
                "range": [
                    299,
                    366
                ],
                "parameters": [
                    "prevProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.calculateResizedValues(prevProps,",
                    "//zoom"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillUnmount",
                "method_begin": "componentWillUnmount()",
                "method_end": "this.removeMouseEvents()",
                "range": [
                    528,
                    532
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillReceiveProps",
                "method_begin": "componentWillReceiveProps(nextProps)",
                "method_end": "this.highlightValues(nextProps, this.props.imageStore.focusOnPoint.zoom)",
                "range": [
                    532,
                    540
                ],
                "parameters": [
                    "nextProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.calculateResizedValues(nextProps,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addMouseEvents",
                "method_begin": "addMouseEvents()",
                "method_end": "}*/",
                "range": [
                    667,
                    675
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeMouseEvents",
                "method_begin": "removeMouseEvents()",
                "method_end": "this.canvas.removeEventListener('mousedown', this.onMouseDown, false);",
                "range": [
                    675,
                    684
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    1125,
                    1175
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector1.js": {
        "method_details_": [
            {
                "method_name": "onSelected",
                "method_begin": 772,
                "method_end": 801,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector1.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount(props)",
                "method_end": "this.addMouseEvents()",
                "range": [
                    182,
                    204
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidUpdate",
                "method_begin": "componentDidUpdate(prevProps)",
                "method_end": "//zoom level changed,update points",
                "range": [
                    204,
                    215
                ],
                "parameters": [
                    "prevProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//console.log(",
                    "//zoom"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillUnmount",
                "method_begin": "componentWillUnmount()",
                "method_end": "this.removeMouseEvents()",
                "range": [
                    398,
                    402
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillReceiveProps",
                "method_begin": "componentWillReceiveProps(nextProps)",
                "method_end": "this.calculateResizedValues(nextProps, nextProps.imageStore.focusOnPoint.zoom)",
                "range": [
                    402,
                    410
                ],
                "parameters": [
                    "nextProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addMouseEvents",
                "method_begin": "addMouseEvents()",
                "method_end": "this.canvas.addEventListener('mousedown', this.onMouseDown, false);",
                "range": [
                    699,
                    705
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeMouseEvents",
                "method_begin": "removeMouseEvents()",
                "method_end": "this.canvas.removeEventListener('mousedown', this.onMouseDown, false);",
                "range": [
                    705,
                    712
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    1050,
                    1094
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/Rector1.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//console.log(",
                    "//transform:",
                    "/>",
                    "/FormEntryDialog>",
                    "/div>",
                    "/Scrollbars>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ReviewDialog.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    15,
                    18
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ReviewDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ReviewHelp.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    20,
                    23
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ReviewHelp.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/StartReview.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SubmitDialog.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    25,
                    53
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SubmitDialog.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/Typography>",
                    "/Typography>",
                    "/DialogTitle>",
                    "/Button>",
                    "/>",
                    "/Button>",
                    "/Button>",
                    "/div>",
                    "/DialogContent>",
                    "/Dialog>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SubmitReview.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    30,
                    33
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SubmitReview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickPush",
                "method_begin": "const onClickPush = () => {",
                "method_end": "}",
                "range": [
                    35,
                    38
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SubmitReview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onConfirmPush",
                "method_begin": "const onConfirmPush = () => {",
                "method_end": "}",
                "range": [
                    40,
                    83
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SubmitReview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/review/batch/${batchId}/${res.id}",
                    "/home/document/page/1/batch/${batchId}/passed",
                    "/*",
                    "/home/document/review/batch/${batchId}/${currentDoc.nextDocId}",
                    "/home/document/page/1/batch/${batchId}/passed"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goBack",
                "method_begin": "const goBack = () => {",
                "method_end": "}",
                "range": [
                    85,
                    90
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SubmitReview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    92,
                    96
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SubmitReview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js": {
        "method_details_": [
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    56,
                    58
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    78,
                    90
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    92,
                    94
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    96,
                    102
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setDocSortDirection",
                "method_begin": "const setDocSortDirection = (val) => {",
                "method_end": "}",
                "range": [
                    104,
                    109
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    122,
                    173
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "(\n            <TableHead>\n                <TableRow>\n                    {/*adminCheck() ?\n                        <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                            <Checkbox\n                                checkedIcon={<CheckboxIcon checked={true} />}\n                                checked={selectAllDocs}\n                                icon={<CheckboxIcon checked={false} />}\n                                onChange={(event, value) => onChangeSelectAll(event, value)}\n                                color=\"primary\"\n                                inputProps={{ classes: { root: classes.checkbox } }} />\n                        </TableCell> : null*/}\n                    <TableCell style={{ width: '5%' }}>\n                        S.No.\n                    </TableCell>\n                    {\n                        tableHeader.map((row, index) => (\n                            !row.selected ? null :\n                                <TableCell style={{ width: getWidth(row), padding: '2vh 1vw' }} align={row.align} >\n                                    <div style={{ display: 'flex', justifyContent: row.align === 'center' ? 'center' : '' }}>\n                                        <div className='colFlex flexCenter'>\n                                            <span >{row.label}</span></div>\n                                        {\n                                            !row.allowSort ? null :\n                                                <div className='colFlex' style={{ marginLeft: '1vh' }}>\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${docSortDirection == 'ASC' ? 'black' : ''}; width: 13;height: 13;`} src={Images.up}\n                                                        onClick={(e) => setDocSortDirection('ASC')}\n\n                                                    />\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${docSortDirection == 'DESC' ? 'black' : ''};width: 13;height: 13;margin-top: -4px`} src={Images.down}\n                                                        onClick={(e) => setDocSortDirection('DESC')}\n                                                    />\n                                                </div>\n                                        }\n\n                                    </div>\n\n\n                                </TableCell>\n                        ))\n                    }\n                    <TableCell align=\"left\" style={{ width: '5%' }}>\n                        <ColumnConfig filterType={filterType} onComplete={propStore.setTableHeaders} from='documents' headers={tableHeader} onChange={onHeaderChange} />\n                    </TableCell>\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*adminCheck(",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/}",
                    "/TableCell>",
                    "/span></div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    177,
                    203
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/${batchFilter}/all",
                    "/${batchFilter}/passed",
                    "/${batchFilter}/rejected",
                    "/${batchFilter}/review",
                    "/${batchFilter}/completed",
                    "/home/document-qc/page/${pageNo",
                    "/${filterType}",
                    "/home/document-qc/page/${pageNo",
                    "/${filterType}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    205,
                    209
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    211,
                    241
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalDocs}\n                </div>\n                {totalDocs === 0 ? null :\n                    <div className='rowFlex'>\n                        <div className={classes.pgnDivider}>|</div>\n                        <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                            <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                        </div>\n                        <div className='colFlex flexCenter fullHeight'>\n                            {pageNo === 1 ? pageNo : ((pageNo - 1) * (sdocsPerPage) + 1)}\n                            &nbsp; -&nbsp;\n                            {pageNo * sdocsPerPage <= totalDocs ? (pageNo * sdocsPerPage) : totalDocs\n                            }\n                        </div>\n                        <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                            <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                        </div>\n                        <div className={classes.pgnDivider}>|</div>\n                        <div className='colFlex flexCenter fullHeight'>\n                            <RowsPerPage value={sdocsPerPage} setRowsPerPage={setDocsPerPage} />\n                        </div>\n                    </div>\n                }\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocument",
                "method_begin": "const openDocument = (row) => {",
                "method_end": "}",
                "range": [
                    244,
                    256
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/training/qc/${filterType}/batch/${row.idpId}/${encodeURIComponent(row.fileName"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocStatus",
                "method_begin": "const renderDocStatus = (value, status, row) => {",
                "method_end": "}",
                "range": [
                    284,
                    309
                ],
                "parameters": [
                    "value",
                    "status",
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "(\n                <div className={classes.docStatus} style={{ color: trainingStatus[`${value}`].fcolor }}>\n                    {trainingStatus[`${value}`].feedbackLabel}\n                </div>\n            ) | (\n                <div className={classes.docStatus} style={{ color: value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].color : trainingStatus[`${status}`].color }}>\n                    {value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].feedbackLabel : (row.pushToRejected ? trainingStatus.REJECTED.label : trainingStatus[`${status}`].label)}\n                </div>\n            ) | (\n            <div className={classes.docStatus} style={{ color: value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].color : trainingStatus[`${status}`].color }}>\n                {/* <div className='colFlex flexCenter' >\n                <div className={classes.dot} style={{ backgroundColor: trainingStatus[`${value}`].color }}></div>\n            </div>*/}\n                {\n                    ocrStatusFilter === 'OCR_COMPLETE' ?\n                        (value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].feedbackLabel : (row.isNonTableFlag && row.isTableFlag ? trainingStatus[`${status}`].label : trainingStatus[`${status}`].feedbackLabel)) :\n                        trainingStatus[`${value}`].label\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>*/}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRank",
                "method_begin": "const renderRank = (row) => {",
                "method_end": "}",
                "range": [
                    311,
                    322
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "(\n            <div className={` semiBold`} style={{ backgroundColor: 'transparent', color: temp.color, fontSize: 'inherit' }}>\n                {temp.label}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderStatus",
                "method_begin": "const renderStatus = (row) => {",
                "method_end": "}",
                "range": [
                    324,
                    345
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "'-' | (\n            row.classification === 'STARTED' || row.classification === 'RETRY' ?\n                <div className='rowFlex '>\n                    <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                        {\n                            <LinearProgress classes={{ root: classes.progressRoot1, barColorPrimary: classes.barColorPrimary }} />\n                        }\n                    </div>\n                    {/*  <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>*/}\n                </div>\n                :\n                <div className={classes.docStatus} style={{ color: trainingStatus[`${row.classification}`] && trainingStatus[`${row.classification}`].color }}>\n                    {trainingStatus[`${row.classification}`] && trainingStatus[`${row.classification}`].label}\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/*",
                    "/div>*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "rejectedFilesPresent",
                "method_begin": "const rejectedFilesPresent = (type) => {",
                "method_end": "}",
                "range": [
                    347,
                    354
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "currentBatch[`${type}`] | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = (row) => {",
                "method_end": "}",
                "range": [
                    356,
                    367
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "'25%' | '30%' | Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRejectedReason",
                "method_begin": "const renderRejectedReason = (buckets, index) => {",
                "method_end": "}",
                "range": [
                    369,
                    388
                ],
                "parameters": [
                    "buckets",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "(\n            <React.Fragment>\n                <div data-tip data-for={'rejectionReason' + index} style={{ textDecoration: 'underline', width: 'fit-content' }}>\n                    {buckets.length}&nbsp; found\n                </div>\n                <ReactTooltip id={'rejectionReason' + index} place='right' effect='solid' className={classes.reasonTooltip}>\n                    <div >\n                        <ul>\n                            {\n                                buckets.map((row, bucketIndex) => (\n                                    <li key={index + 'bucket' + bucketIndex} className='sFont'>{classDetails[`${row.bucketId}`]}</li>\n                                ))\n                            }\n                        </ul>\n                    </div>\n                </ReactTooltip>\n            </React.Fragment>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/li>",
                    "/ul>",
                    "/div>",
                    "/ReactTooltip>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderParentFile",
                "method_begin": "const renderParentFile = (buckets, index) => {",
                "method_end": "}",
                "range": [
                    390,
                    407
                ],
                "parameters": [
                    "buckets",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "(\n            <React.Fragment>\n                <div style={{ width: 'fit-content' }}>\n                    {buckets.map((row, bucketIndex) => (\n                        <div className='sFont rowFlex' className={classes.parentName}>\n                            <div  > {row.bucketCategory}</div>\n                            <CopyToClipboard text={row.bucketCategory} className={classes.copyButton1}\n                                onCopy={() => commonStore.handleOpenSnackBar('Bucket Category name copied to clipboard', 'info')}>\n                                <SvgIcon src={Images.copy} />\n                            </CopyToClipboard>\n                        </div>\n                    ))}\n                </div>\n\n            </React.Fragment>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/>",
                    "/CopyToClipboard>",
                    "/div>",
                    "/div>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToResolvedFiles",
                "method_begin": "const goToResolvedFiles = () => {",
                "method_end": "}",
                "range": [
                    409,
                    412
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPageRange",
                "method_begin": "const renderPageRange = (row) => {",
                "method_end": "}",
                "range": [
                    414,
                    425
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "<span>{(parseInt(arr[0]) + 1).toString() + ' - ' + (parseInt(arr[arr.length - 1]) + 1).toString() + ` of  `}{<span className='semiBold'>{row.totalPages} page(s)</span>}</span> | <span>{parseInt(arr[0]) + 1 + ` of  `}{<span className='semiBold'>{row.totalPages} page(s)</span>}</span> | '-'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span>}</span>",
                    "/span>}</span>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocId",
                "method_begin": "const getDocId = (fileName) => {",
                "method_end": "}",
                "range": [
                    427,
                    432
                ],
                "parameters": [
                    "fileName"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "arr[1] | '-'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadFile",
                "method_begin": "const downloadFile = (row) => {",
                "method_end": "}",
                "range": [
                    434,
                    441
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    443,
                    551
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "(<div>{row.totalPages ? row.totalPages : '0'}</div>) | (<div>{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</div>) | (\n                    <div>\n                        <div data-tip data-for={'indexerReview' + index} className='rowFlex flexWrap pointer' style={{ width: 'min-content' }}>\n                            <div className='semiBold'> {row.reviewedBy && row.reviewedBy.email ? getUsernameFromEmail(row.reviewedBy.email) : '-'}</div>\n                        </div>\n                        <ReactTooltip id={'indexerReview' + index} place='right' effect='solid' className={'xsFont'} >\n                            <div ><span className='bold'>{row.reviewedBy && row.reviewedBy.email}</span> &nbsp;<div>At&nbsp;  {row.reviewedAt ? Moment(row.reviewedAt).format('DD MMM YY, h:mm a') : '-'}</div></div>\n                        </ReactTooltip>\n                    </div>\n                ) | (\n                    <div>\n                    <div data-tip data-for={'supervisorReview' + index} className='rowFlex flexWrap pointer' style={{ width: 'min-content' }}>\n                        <div className='semiBold'> {row.reviewAcceptedBy && row.reviewAcceptedBy.email ? getUsernameFromEmail(row.reviewAcceptedBy.email) : '-'}</div>\n                    </div>\n                    <ReactTooltip id={'supervisorReview' + index} place='right' effect='solid' className={'xsFont'} >\n                        <div ><span className='bold'>{row.reviewAcceptedBy && row.reviewAcceptedBy.email}</span> &nbsp;<div>At&nbsp;  {row.revieweAcceptedAt ? Moment(row.revieweAcceptedAt).format('DD MMM YY, h:mm a') : '-'}</div></div>\n                    </ReactTooltip>\n                </div>\n                ) | (<div>{row.revieweAcceptedAt ? Moment(row.revieweAcceptedAt).format('DD MMM YY, h:mm a') : '-'}</div>) | (<div>{row.reviewedAt ? Moment(row.reviewedAt).format('DD MMM YY, h:mm a') : '-'}</div>) | <div className={classes.processBtn}>Process</div> | <div >{row.external && row.external.docId}</div> | <div >{row.external && row.external.batchId}</div> | <div >{renderPageRange(row)}</div> | row.confidenceScore ? renderConfidenceScore(row.confidenceScore) : 'N/A' | row.aiStatus && renderDocStatus(row.aiStatus, row.status, row) | renderRank(row) | renderStatus(row) | (<div>{row.classifiedAcceptedAt ? Moment(row.classifiedAcceptedAt).format('DD MMM YY, h:mm a') : '-'}</div>) | (<div>{row.reviewedAt ? Moment(row.reviewedAt).format('DD MMM YY, h:mm a') : '-'}</div>) | <div className={classes.processBtn}>Process</div> | (\n                        <div className='rowFlex flexWrap'>\n                            <div> {row.reviewedBy && row.reviewedBy.email ? getUsernameFromEmail(row.reviewedBy.email) : '-'}</div>\n                            &nbsp;-&nbsp;\n                            <div className='bold'>\n                                {row.reviewAcceptedBy && row.reviewAcceptedBy.email ? getUsernameFromEmail(row.reviewAcceptedBy.email) : '-'}\n                            </div>\n\n                        </div>\n                    ) | row.reviewedBy && row.reviewedBy.email ? getUsernameFromEmail(row.reviewedBy.email) : '-' | row.buckets && row.buckets.length ? renderRejectedReason(row.buckets, index) : '-' | row.buckets && row.buckets.length ? renderParentFile(row.buckets, index) : '-' | (\n                    row.docType && row.docType.toLowerCase().startsWith('#new_format') ?\n                        <div className='rowFlex'>\n                            <div className='colFlex flexCenter'>\n                                {row.docType}\n                            </div>&nbsp;\n                            <div className='colFlex flexCenter' data-tip data-for={'newFormat' + index}><SvgIcon src={Images.info} /></div>\n                            <ReactTooltip clickable={true} id={'newFormat' + index} place='right' effect='solid' className={'xsFont'} >\n                                <div>This seems to be a new document type<br /> which is yet to be configured</div>\n                            </ReactTooltip>\n                        </div>\n                        :\n                        row.docType\n                ) | (\n                    <div className={classes.docName}>\n                        <div data-tip data-for={'preview' + index} className={ocrStatusFilter === 'OCR_FAILED' ? '' : ((row.reviewStartedLockBy === null || row.reviewStartedLockBy === undefined) ? classes.rowLink : (row.reviewStartedLockBy !== (userStore.user && userStore.user._id) ? classes.lockedLink : classes.rowLink))} style={{ maxWidth: '80%' }} onClick={() => openDocument(row)}>{row.fileOriginalName}</div>\n                        <CopyToClipboard text={row[`${header.type}`]} className={classes.copyButton}\n                            onCopy={() => commonStore.handleOpenSnackBar('Document name copied to clipboard', 'info')}>\n                            <SvgIcon src={Images.copy} />\n                        </CopyToClipboard>\n                        {roleAccess.justAdmin.findIndex(x => x === (userStore.user && userStore.user.role)) > -1 && amygbUserCheck() ?\n                            <div className={classes.copyButton}>\n                                <SvgIcon src={Images.miniDownload} style={'width: 14;height:14;fill:#D2D2D5;'} onClick={() => downloadFile(row)} />\n                            </div> : null}\n\n\n                        { /* <FilePreview index={index} data={row} />*/}\n                    </div>\n                ) | (<div>{row[`${header.type}`] ? row[`${header.type}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/div></div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/div></div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/A",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>&nbsp;",
                    "/></div>",
                    "/>",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/CopyToClipboard>",
                    "/>",
                    "/div>",
                    "/*",
                    "/>*/}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderConfidenceScore",
                "method_begin": "const renderConfidenceScore = (value) => {",
                "method_end": "}",
                "range": [
                    553,
                    564
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "(\n            <div className='rowFlex'>\n                <div style={{ width: '25%' }} className='colFlex flexCenter'>\n                    <div className={classes.percentageBar} >\n                        <hr align=\"left\" width={value + '%'} className={classes.percentageLine} style={{ backgroundColor: getCfScoreColors('percent', value) }} />\n                    </div>\n                </div>\n                <div className={classes.cfScore}>{value + '%'}</div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setDocsPerPage",
                "method_begin": "const setDocsPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    566,
                    594
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/${batchFilter}/all",
                    "/${batchFilter}/passed",
                    "/${batchFilter}/rejected",
                    "/${batchFilter}/review",
                    "/${batchFilter}/completed",
                    "/page/1/${filterType}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    596,
                    598
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDownload",
                "method_begin": "const cancelDownload = () => {",
                "method_end": "}",
                "range": [
                    600,
                    602
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDelete",
                "method_begin": "const confirmDelete = () => {",
                "method_end": "}",
                "range": [
                    604,
                    612
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDownloadFiles",
                "method_begin": "const renderDownloadFiles = () => {",
                "method_end": "}",
                "range": [
                    614,
                    617
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSupervisorStats",
                "method_begin": "const getSupervisorStats = (type) => {",
                "method_end": "}",
                "range": [
                    619,
                    621
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/SupervisorDocListing.js",
                "returnType": "supervisorStore.supervisorStats && supervisorStore.supervisorStats[`${type}`]",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/TableHelp.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    20,
                    23
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/TableHelp.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/TabularRector.js": {
        "method_details_": [
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount()",
                "method_end": "setTimeout(() => { this.highlightAllFields() }, 100)",
                "range": [
                    20,
                    36
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/TabularRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    133,
                    154
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/TabularRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/2",
                    "/>",
                    "/div>",
                    "/Scrollbars>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ToggleFilter.js": {
        "method_details_": [
            {
                "method_name": "ToggleFilter",
                "method_begin": "const ToggleFilter = ({ docType, handleToggle, onColor }) => {",
                "method_end": "};",
                "range": [
                    4,
                    13
                ],
                "parameters": [
                    "{ docType, handleToggle, onColor }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ToggleFilter.js",
                "returnType": "(\n    <div className='rowFlex sFont toggleContainer'>\n      <div onClick={()=> handleToggle(true)} className={`toggleDefault colFlex flexCenter ${docType !== '#NEW_FORMAT#' ? 'toggleOn' : ''}`} >Invoice</div>\n      <div onClick={()=> handleToggle(false)} className={`toggleDefault colFlex flexCenter ${docType === '#NEW_FORMAT#' ? 'toggleOn' : ''}`}>Supporting Document</div>\n      \n    </div>\n\n  )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ZoomableImage.js": {
        "method_details_": [
            {
                "method_name": "resetAll",
                "method_begin": "const resetAll = () => {",
                "method_end": "};",
                "range": [
                    26,
                    32
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ZoomableImage.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onPan",
                "method_begin": "const onPan = (dx, dy) => {",
                "method_end": "};",
                "range": [
                    34,
                    37
                ],
                "parameters": [
                    "dx",
                    "dy"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ZoomableImage.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "settingZoom",
                "method_begin": "const settingZoom = (e) => {",
                "method_end": "}",
                "range": [
                    39,
                    47
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/ZoomableImage.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/router.js": {
        "method_details_": [
            {
                "method_name": "RouterProvider",
                "method_begin": "export const RouterProvider = ({ children, ...props }) => {",
                "method_end": "}",
                "range": [
                    6,
                    12
                ],
                "parameters": [
                    "{ children, ...props }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/router.js",
                "returnType": "(\n    <Router {...props}>\n      <EnhancedWrapper children={children} />\n    </Router>\n  )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/Router>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "Wrapper",
                "method_begin": "const Wrapper = ({ match, location, history, children }) => {",
                "method_end": "}",
                "range": [
                    14,
                    17
                ],
                "parameters": [
                    "{ match, location, history, children }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/router.js",
                "returnType": "<RouterContext.Provider value={contextValue} children={children} />",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "useRouter",
                "method_begin": "export const useRouter = () => {",
                "method_end": "}",
                "range": [
                    21,
                    23
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/router.js",
                "returnType": "useContext(RouterContext)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/tempRector.js": {
        "method_details_": [
            {
                "method_name": "onSelected",
                "method_begin": 800,
                "method_end": 829,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/tempRector.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount(props)",
                "method_end": "// this.addMouseEvents()",
                "range": [
                    187,
                    209
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/tempRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidUpdate",
                "method_begin": "componentDidUpdate(prevProps)",
                "method_end": "this.addMouseEvents()",
                "range": [
                    243,
                    309
                ],
                "parameters": [
                    "prevProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/tempRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.calculateResizedValues(prevProps,",
                    "//zoom"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillUnmount",
                "method_begin": "componentWillUnmount()",
                "method_end": "this.removeMouseEvents()",
                "range": [
                    471,
                    475
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/tempRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillReceiveProps",
                "method_begin": "componentWillReceiveProps(nextProps)",
                "method_end": "this.highlightValues(nextProps, this.props.imageStore.focusOnPoint.zoom)",
                "range": [
                    475,
                    483
                ],
                "parameters": [
                    "nextProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/tempRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.calculateResizedValues(nextProps,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addMouseEvents",
                "method_begin": "addMouseEvents()",
                "method_end": "}*/",
                "range": [
                    605,
                    613
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/tempRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeMouseEvents",
                "method_begin": "removeMouseEvents()",
                "method_end": "this.canvas.removeEventListener('mousedown', this.onMouseDown, false);",
                "range": [
                    613,
                    622
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/tempRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    1061,
                    1108
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/tempRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js": {
        "method_details_": [
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    101,
                    112
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1",
                    "/home/document/batch/${documentListStore.batchFilter}/bucket",
                    "/home/document/batch/${documentListStore.batchFilter}/bucket/${documentListStore.bucketFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlePageClick",
                "method_begin": "const handlePageClick = (data) => {",
                "method_end": "};",
                "range": [
                    114,
                    119
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${documentListStore.batchFilter}/bucket/${documentListStore.bucketFilter}/page/${offset"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchDocumentList",
                "method_begin": "const fetchDocumentList = () => {",
                "method_end": "}",
                "range": [
                    130,
                    135
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    137,
                    140
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    142,
                    149
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortList",
                "method_begin": "const sortList = (sortDirection, index, sortField) => {",
                "method_end": "}",
                "range": [
                    151,
                    153
                ],
                "parameters": [
                    "sortDirection",
                    "index",
                    "sortField"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    155,
                    196
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n                    <TableCell padding=\"checkbox\" className={classes.checkbox}>\n                        <Checkbox className={classes.checkbox}\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            checked={selectAllDocs}\n                            icon={<CheckboxIcon checked={false} />}\n                            onChange={(event, value) => onChangeSelectAll(event, value)}\n                            color=\"primary\"\n                            inputProps={{ classes: { root: classes.checkbox } }} />\n                    </TableCell>\n                    {\n                        tableHeader.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} className={classes.tableHeader} style={{ width: row.width }} align=\"left\">\n                                    <div style={{ display: 'flex' }}>\n                                        <div className='colFlex flexCenter'>{row.name}</div>\n                                        {\n                                            !row.allowSort ? null :\n                                                <div className='colFlex' style={{ marginLeft: '1vh' }}>\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${row.sort == 1 ? '#157fff' : ''}; width: 13;height: 13;`} src={Images.up} onClick={(e) => sortList(1, index, row.type)} />\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${row.sort == -1 ? '#157fff' : ''};width: 13;height: 13;margin-top: -4px`} src={Images.down} onClick={(e) => sortList(-1, index, row.type)} />\n                                                </div>\n                                        }\n                                    </div>\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocStatus",
                "method_begin": "const renderDocStatus = (value) => {",
                "method_end": "}",
                "range": [
                    198,
                    207
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "(\n            <div className={classes.docStatus} style={{ backgroundColor: trainingStatus[`${value}`].bgColor, color: trainingStatus[`${value}`].color }}>\n                <div className='colFlex flexCenter' >\n                    <div className={classes.dot} style={{ backgroundColor: trainingStatus[`${value}`].color }}></div>\n                </div>\n                {trainingStatus[`${value}`].label}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderConfidenceScore",
                "method_begin": "const renderConfidenceScore = (value) => {",
                "method_end": "}",
                "range": [
                    209,
                    220
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "(\n            <div className='rowFlex' style={{ width: '50%' }}>\n                <div style={{ width: '80%' }} className='colFlex flexCenter'>\n                    <SvgIcon src={Images[`${getCfScoreColors('bar', value)}`]} />\n                </div>\n                <div className={classes.cfScore} style={{ color: getCfScoreColors('percent', value) }}>{value + '%'}</div>\n            </div>\n\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteDocs",
                "method_begin": "const deleteDocs = () => {",
                "method_end": "}",
                "range": [
                    222,
                    227
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    229,
                    232
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    234,
                    236
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadDocs",
                "method_begin": "const downloadDocs = () => {",
                "method_end": "}",
                "range": [
                    238,
                    243
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocs",
                "method_begin": "const exportDocs = () => {",
                "method_end": "}",
                "range": [
                    245,
                    256
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocument",
                "method_begin": "const openDocument = (row) => {",
                "method_end": "}",
                "range": [
                    258,
                    266
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/training/batch/${documentListStore.batchFilter}/bucket/${documentListStore.bucketFilter}/${row._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelExport",
                "method_begin": "const cancelExport = () => {",
                "method_end": "}",
                "range": [
                    268,
                    271
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmExport",
                "method_begin": "const confirmExport = () => {",
                "method_end": "}",
                "range": [
                    273,
                    276
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    278,
                    287
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%`",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUnidentifiedFiles",
                "method_begin": "const viewUnidentifiedFiles = () => {",
                "method_end": "}",
                "range": [
                    289,
                    292
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setIdentificationFilter",
                "method_begin": "const setIdentificationFilter = (type) => {",
                "method_end": "}",
                "range": [
                    294,
                    306
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToSuccessfulFiles",
                "method_begin": "const goToSuccessfulFiles = () => {",
                "method_end": "}",
                "range": [
                    308,
                    313
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = () => {",
                "method_end": "}",
                "range": [
                    315,
                    359
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "(\n            sectionList.map((section) => (\n                <React.Fragment key={section}>\n                    <TableRow className={classes.tableRow}  >\n                        <TableCell align=\"left\" style={{ backgroundColor: '#eaebf2' }} colSpan={documentListStore.tableHeader.length + 1}>\n                            <div className={classes.rowLink}>{section}</div>\n                        </TableCell>\n                    </TableRow>\n                    {\n                        documentListStore.documentList.map((row, index) => (\n                            row.sectionName !== section ? null :\n                                <TableRow key={row._id} className={classes.tableRow}  >\n                                    <TableCell padding=\"checkbox\" className={classes.checkbox}>\n                                        <Checkbox\n                                            checkedIcon={<CheckboxIcon checked={true} />}\n                                            key={row._id + \"check\"}\n                                            icon={<CheckboxIcon checked={false} />}\n                                            checked={documentListStore.selectedDocs[index]}\n                                            onChange={(event, value) => onCheckboxChange(event, index, value)}\n                                        /></TableCell>\n                                    <TableCell onClick={(e) => openDocument(row)} align=\"left\"><Tooltip title={row.fileOriginalName}><div className={classes.rowLink}>{row.fileOriginalName}</div></Tooltip></TableCell>\n                                    <TableCell align=\"left\">{row.docType && modifyTextDocType(row.docType)}</TableCell>\n                                    <TableCell align=\"left\">{row.confidenceScore ? renderConfidenceScore(row.confidenceScore) : 'N/A'}</TableCell>\n                                    <TableCell align=\"left\">{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</TableCell>\n                                    <TableCell align=\"left\">\n                                        <div className='rowFlex'>\n                                            <div>{row.aiStatus && renderDocStatus(row.aiStatus)}</div>\n                                            {\n                                                row.aiStatus && trainingStatus[`${row.aiStatus}`] && trainingStatus[`${row.aiStatus}`].showLoader ?\n                                                    <div className={classes.miniLoader}>\n                                                        <MiniLoader type={\"ThreeDots\"} height={20} width={20} color={trainingStatus[`${row.aiStatus}`].color} />\n                                                    </div>\n                                                    : null\n                                            }\n                                        </div>\n                                    </TableCell>\n                                </TableRow>\n                        ))\n                    }\n                </React.Fragment>\n            ))\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/>}",
                    "/>}",
                    "/></TableCell>",
                    "/div></Tooltip></TableCell>",
                    "/TableCell>",
                    "/A",
                    "/TableCell>",
                    "/TableCell>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderClassTable",
                "method_begin": "const renderClassTable = () => {",
                "method_end": "}",
                "range": [
                    361,
                    410
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Documents/test.js",
                "returnType": "(\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow >\n\n                        {\n                            classTableHeader.map((row, index) => (\n                                (\n\n                                    <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                        <div style={{ display: 'flex' }}>\n                                            <div className='colFlex flexCenter'>{row}</div>\n                                        </div>\n                                    </TableCell>\n                                )\n                            ))\n                        }\n\n                    </TableRow>\n                </TableHead>\n                {\n                    <TableBody>\n                        {documentListStore.classList && documentListStore.classList.length ? documentListStore.classList.map((row, index) => (\n                            <TableRow key={index+ 'class'} className={classes.tableRow}  >\n                                <TableCell onClick={(e) => openBucket(row)} align=\"left\"\n                                >\n                                    <div className='rowFlex'>\n                                        <LightTooltip position='left-end' title={classDetails[`${row.bucketId}`]}><InfoOutlinedIcon style={{ color: '#157fff', fontSize: '15px', }} /></LightTooltip>&nbsp;&nbsp;\n                                        <LightTooltip title={row.name}><div className={classes.rowLink} style={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', width: '100%' }}>{row.name}</div></LightTooltip>\n                                    </div>\n                                </TableCell>\n                                <TableCell align=\"left\">\n                                    {\n                                        documentListStore.progressAll ?\n                                            <div className={classes.miniLoader}>\n                                                <MiniLoader type={\"ThreeDots\"} height={13} width={15} color='#157fff'  />\n                                            </div> :\n                                           <div className={classes.miniLoader}>{ row.count}</div>\n                                    }\n                                </TableCell>\n                                <TableCell align=\"left\">{row.reviewedOn ? Moment(row.reviewedOn).format('DD MMM YY, h:mm a') : '-'}</TableCell>\n                                <TableCell align=\"left\">{row.feedbackCount}</TableCell>\n                            </TableRow>\n                        )) : null}\n                    </TableBody>\n                }\n            </Table>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>",
                    "/></LightTooltip>&nbsp;&nbsp;",
                    "/div></LightTooltip>",
                    "/div>",
                    "/TableCell>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableCell>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ErrorBoundary.js": {
        "method_details_": [
            {
                "method_name": "getDerivedStateFromError",
                "method_begin": "static getDerivedStateFromError(error)",
                "method_end": "return { hasError: true };",
                "range": [
                    12,
                    17
                ],
                "parameters": [
                    "error"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ErrorBoundary.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidCatch",
                "method_begin": "componentDidCatch(error, errorInfo)",
                "method_end": "})",
                "range": [
                    17,
                    25
                ],
                "parameters": [
                    "error",
                    "errorInfo"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ErrorBoundary.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/error"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": "return this.props.children;",
                "range": [
                    25,
                    36
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ErrorBoundary.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    55,
                    78
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n\n                    {\n                        tableHeaders.map((row, index) => (\n                            (row.label === 'Type' && type === 'bol') ? null :\n                                (\n\n                                    <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                        {row.label}\n                                    </TableCell>\n\n\n                                )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setItemsPerPage",
                "method_begin": "const setItemsPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    80,
                    86
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/externalData/${type}/1/overall"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (pageType) => {",
                "method_end": "}",
                "range": [
                    88,
                    93
                ],
                "parameters": [
                    "pageType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/externalData/${type}/${pageNo",
                    "/${externalDataStore.searchFilter}",
                    "/home/configuration/externalData/${type}/${pageNo",
                    "/${externalDataStore.searchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    95,
                    97
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    100,
                    122
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalDataCount}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    Page {pageNo} of {Math.ceil(totalDataCount / itemsPerPage)}\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div> <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {<RowsPerPage value={externalDataStore.itemsPerPage} setRowsPerPage={setItemsPerPage} />}\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openVendorDetails",
                "method_begin": "const openVendorDetails = (data) => {",
                "method_end": "}",
                "range": [
                    124,
                    127
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    129,
                    140
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderCreateBtn",
                "method_begin": "const renderCreateBtn = () => {",
                "method_end": "}",
                "range": [
                    163,
                    170
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "(\n                <div className='colFlex flexCenter'>\n                    <SimpleButton label='Export List' disabled={!dataList.length} onClick={() => externalDataStore.exportVendorList(type)} progress={externalDataStore.createProgress} />\n                </div>\n            )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCreate",
                "method_begin": "const onClickCreate = () => {",
                "method_end": "}",
                "range": [
                    172,
                    175
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelCreate",
                "method_begin": "const cancelCreate = () => {",
                "method_end": "}",
                "range": [
                    177,
                    180
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setWorkflowForDelete",
                "method_begin": "const setWorkflowForDelete = (index) => {",
                "method_end": "}",
                "range": [
                    182,
                    186
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    188,
                    196
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/${type",
                    "/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    198,
                    200
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickEdit",
                "method_begin": "const onClickEdit = (id) => {",
                "method_end": "}",
                "range": [
                    204,
                    207
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/workflow/create/input/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalDataSearch.js": {
        "method_details_": [
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    44,
                    56
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalDataSearch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchBatches",
                "method_begin": "const searchBatches = (event) => {",
                "method_end": "}",
                "range": [
                    58,
                    66
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalDataSearch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration/externalData/${props.type}/1/${externalDataStore.searchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onFilterChange",
                "method_begin": "const onFilterChange = (val, index) => {",
                "method_end": "}",
                "range": [
                    72,
                    83
                ],
                "parameters": [
                    "val",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/ExternalData/ExternalDataSearch.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/home/configuration/vendor/${props.type}/1/${val}",
                    "/home/configuration/vendor/${props.type}/${externalDataStore.pageNo}/${val}",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Header.js": {
        "method_details_": [
            {
                "method_name": "logout",
                "method_begin": "const logout = () => {",
                "method_end": "}",
                "range": [
                    87,
                    104
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Header.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/home/training",
                    "/login"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "displayName",
                "method_begin": "const displayName = () => {",
                "method_end": "}",
                "range": [
                    106,
                    110
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Header.js",
                "returnType": "userStore.user.email.split('@')[0] && modifyText(userStore.user.email.split('@')[0]) | ''",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderBreadcrumbs",
                "method_begin": "const renderBreadcrumbs = () => {",
                "method_end": "}",
                "range": [
                    112,
                    114
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Header.js",
                "returnType": "(breadCrumb ? <div className={'breadCrumb bold colFlex flexCenter'}>&nbsp;  / &nbsp;{breadCrumb}</div> : null)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = () => {",
                "method_end": "}",
                "range": [
                    116,
                    256
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Header.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}/all",
                    "/home/document/page/1/batch/${batchFilter}/passed",
                    "/home/document/page/1/batch/${batchFilter}/rejected",
                    "/home/document-qc/page/1/${supervisorStore.qcStatus}${additionalPath}",
                    "/home/document-training/page/1/${trainingUploadStore.qcStatus}${additionalPath}",
                    "/home/document-api/page/1/${markListingStore.qcStatus}${additionalPath}",
                    "//props.history.push(",
                    "/home/document-api/page/1/batch/${trainingStore.batchFilter}/${markListingStore.qcStatus}",
                    "/home/document-qc/page/1/review${additionalPath}",
                    "/home/document-training/page/1/review${additionalPath}",
                    "/home/document-api/page/1/review${additionalPath}",
                    "//props.history.push(",
                    "/home/document-api/page/1/batch/${trainingStore.batchFilter}/${markListingStore.qcStatus}",
                    "/home/document-qc/page/1/${supervisorStore.qcStatus}${additionalPath}",
                    "/home/document-api/page/1/${markListingStore.qcStatus}${additionalPath}",
                    "/home/document/page/1/batch/${batchFilter}/rejected",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/upload/api",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/api/logs/page/1",
                    "/home/admin-panel",
                    "/home/admin-panel",
                    "/home/admin-panel/server-configuration",
                    "/home/admin-panel/server-configuration",
                    "/home/upload",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration/manage-teams/all/1",
                    "/home/configuration/manage-teams/all/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "requestExtension",
                "method_begin": "const requestExtension = () => {",
                "method_end": "}",
                "range": [
                    260,
                    266
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Header.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/span></span>,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderExpiryMsg",
                "method_begin": "const renderExpiryMsg = () => {",
                "method_end": "}",
                "range": [
                    268,
                    292
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Header.js",
                "returnType": "(<div>Welcome! Your free trial begins today.</div>) | (<div>Your free trial is valid until {Moment(b).format('DD MMM')}</div>) | (<div>The clock is ticking. Your free trial is valid until {Moment(b).format('DD MMM YY')}</div>) | (<div>Your free trial expires on {Moment(b).format('DD MMM YY')}</div>) | (<div>2 more days to go ! Your free trial expires on {Moment(b).format('DD MMM YY')}</div>) | (<div className='rowFlex'> 1 day remaining! Your free trial expires tomorrow.&nbsp;\n                <span className='underline pointer' onClick={() => userStore.user.trialRequest === 'PENDING' ? null : requestExtension()}>{userStore.user.trialRequest === 'PENDING' ? 'Requested for extension' : 'Request an extension?'}</span>\n                {<span className={requestProgress ? '' : 'hidden'} style={{ marginLeft: '1vw' }}><Loader mini={true} /></span>}\n            </div>) | (<div className='rowFlex'> Your 7 day free trial expires today.&nbsp;\n                <span className='underline pointer' onClick={() => userStore.user.trialRequest === 'PENDING' ? null : requestExtension()}>{userStore.user.trialRequest === 'PENDING' ? 'Requested for extension' : 'Request an extension?'}</span>\n                {<span className={requestProgress ? '' : 'hidden'} style={{ marginLeft: '1vw' }}><Loader mini={true} /></span>}\n            </div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/></span>}",
                    "/div>",
                    "/span>",
                    "/></span>}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelLogout",
                "method_begin": "const cancelLogout = () => {",
                "method_end": "}",
                "range": [
                    294,
                    296
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Header.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderReviewMessage",
                "method_begin": "const renderReviewMessage = () => {",
                "method_end": "}",
                "range": [
                    298,
                    306
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Header.js",
                "returnType": "(\n                <div className='colFlex flexCenter mFont'>\n                    <div className={`colFlex flexCenter ${classes.reviewSession}`}>Ongoing Review Session</div>\n                </div>\n            ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Home.js": {
        "method_details_": [
            {
                "method_name": "openDrawer",
                "method_begin": "const openDrawer = (e) => {",
                "method_end": "}",
                "range": [
                    129,
                    132
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Home.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/HomeSidebar.js": {
        "method_details_": [
            {
                "method_name": "cancelUpload",
                "method_begin": "const cancelUpload = () => {",
                "method_end": "}",
                "range": [
                    53,
                    55
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/HomeSidebar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setActiveTab",
                "method_begin": "const setActiveTab = (v) => {",
                "method_end": "}",
                "range": [
                    57,
                    89
                ],
                "parameters": [
                    "v"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/HomeSidebar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/training",
                    "/*if",
                    "/home/document/page/1/batch/${documentListStore.batchList[batchInd]._id}/all",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "logout",
                "method_begin": "const logout = () => {",
                "method_end": "}",
                "range": [
                    151,
                    153
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/HomeSidebar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onFooterClick",
                "method_begin": "const onFooterClick = (item, index) => {",
                "method_end": "}",
                "range": [
                    155,
                    163
                ],
                "parameters": [
                    "item",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/HomeSidebar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/training"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "displayName",
                "method_begin": "const displayName = () => {",
                "method_end": "}",
                "range": [
                    165,
                    169
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/HomeSidebar.js",
                "returnType": "userStore.user.email.split('@')[0] && modifyText(userStore.user.email.split('@')[0]) | ''",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/Card.js": {
        "method_details_": [
            {
                "method_name": "Card",
                "method_begin": "function Card({ id, name, index, fullWidth, moveCard, findCard, width, filter, filtered, menuStyle, checkboxClass, align })",
                "method_end": ");",
                "range": [
                    48,
                    124
                ],
                "parameters": [
                    "{ id, name, index, fullWidth, moveCard, findCard, width, filter, filtered, menuStyle, checkboxClass, align }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/Card.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>;",
                    "/home/document/page/1",
                    "/home/document/page/1/batch/${documentListStore.batchFilter}",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "//",
                    "//",
                    "/>}",
                    "/>}",
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/MenuItem>",
                    "/Menu>",
                    "/TableCell>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickFilter",
                "method_begin": "const onClickFilter = (e, type) => {",
                "method_end": "}",
                "range": [
                    53,
                    55
                ],
                "parameters": [
                    "e",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (type, index, value, item) => {",
                "method_end": "}",
                "range": [
                    61,
                    80
                ],
                "parameters": [
                    "type",
                    "index",
                    "value",
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1",
                    "/home/document/page/1/batch/${documentListStore.batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/IndexerDocHome.js": {
        "method_details_": [
            {
                "method_name": "getIndexerStats",
                "method_begin": "const getIndexerStats = (type) => {",
                "method_end": "}",
                "range": [
                    88,
                    97
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/IndexerDocHome.js",
                "returnType": "0 | abbreviateNumber(indexerStats.reviewPendingCount + indexerStats.classificationReviewedCount + indexerStats.reviewCompleted) | abbreviateNumber(markListingStore.indexerStats && markListingStore.indexerStats[`${type}`]) | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortDocList",
                "method_begin": "const sortDocList = () => {",
                "method_end": "}",
                "range": [
                    100,
                    103
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/IndexerDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-api/page/1/${filterType}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshPage",
                "method_begin": "const refreshPage = () => {",
                "method_end": "}",
                "range": [
                    123,
                    186
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/IndexerDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    188,
                    195
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/IndexerDocHome.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    197,
                    219
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/IndexerDocHome.js",
                "returnType": "msToHMS(detailBatchList[i].ocrTime) | `${detailBatchList[i][type]}` | `${detailBatchList[i].passedFilesCount}` | `${detailBatchList[i].failedFilesCount}` | `${detailBatchList[i].reviewFilesPending}` | `${detailBatchList[i].reviewFilesCompleted >= 0 ? detailBatchList[i].reviewFilesCompleted : 0}` | `${detailBatchList[i].classificationFilesReviewed}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    222,
                    232
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/IndexerDocHome.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%` | '0%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "docFilterChange",
                "method_begin": "const docFilterChange = (type) => {",
                "method_end": "}",
                "range": [
                    235,
                    263
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/IndexerDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/home/document-api/page/1/${type}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "docTypeFilterChange",
                "method_begin": "const docTypeFilterChange = (type) => {",
                "method_end": "}",
                "range": [
                    265,
                    273
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/IndexerDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-api/page/1/${filterType}",
                    "/home/document-api/page/1/${filterType}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MBatchFilter.js": {
        "method_details_": [
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    41,
                    49
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MBatchFilter.js",
                "returnType": "`${batchList[i][type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleBatchChange",
                "method_begin": "const handleBatchChange = (value) => {",
                "method_end": "}",
                "range": [
                    82,
                    95
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MBatchFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api-document/page/1/batch/${value}/passed",
                    "/home/api-document/page/1/batch/${value}/rejected",
                    "/home/api-document/page/1/batch/${value}/all",
                    "/home/api-document/page/1/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleScroll",
                "method_begin": "const handleScroll = (event) => {",
                "method_end": "}",
                "range": [
                    97,
                    105
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MBatchFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setIdentificationFilter",
                "method_begin": "const setIdentificationFilter = () => {",
                "method_end": "}",
                "range": [
                    107,
                    115
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MBatchFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/${from",
                    "/page/1/batch/${batchFilter}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchBatches",
                "method_begin": "const fetchBatches = () => {",
                "method_end": "}",
                "range": [
                    117,
                    122
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MBatchFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDetailedFilters.js": {
        "method_details_": [
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    46,
                    56
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDetailedFilters.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%` | '0%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUnidentifiedFiles",
                "method_begin": "const viewUnidentifiedFiles = () => {",
                "method_end": "}",
                "range": [
                    58,
                    65
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDetailedFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${batchFilter}/bucket"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleFilterChange",
                "method_begin": "const handleFilterChange = (value) => {",
                "method_end": "}",
                "range": [
                    67,
                    75
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDetailedFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}/all",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleRejectedFilterChange",
                "method_begin": "const handleRejectedFilterChange = (value) => {",
                "method_end": "}",
                "range": [
                    77,
                    104
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDetailedFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//documentListStore.setTrainingFilter(",
                    "/home/document/page/1/batch/${batchFilter}/rejected",
                    "/home/document/page/1/batch/${batchFilter}/rejected",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getRejectedNumber",
                "method_begin": "const getRejectedNumber = () => {",
                "method_end": "}",
                "range": [
                    106,
                    114
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDetailedFilters.js",
                "returnType": "currentBatch.nonIdentified | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRadioFilters",
                "method_begin": "const renderRadioFilters = () => {",
                "method_end": "}",
                "range": [
                    116,
                    168
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDetailedFilters.js",
                "returnType": "(\n                <div className='rowFlex'  >\n                    <FormControl component=\"fieldset\" style={{ width: '100%' }}>\n                        <RadioGroup\n                            aria-label=\"vType\"\n                            defaultValue=\"OCR\"\n                            name=\"radio-buttons-group\"\n                            className={classes.radioCont}\n                            value={ocrStatusFilter}\n                            onChange={(e) => handleFilterChange(e.target.value)}\n                        >\n                            {\n                                allFilesFilter.map((row, index) => (\n                                    <FormControlLabel classes={{ label: `${classes.vRadio} mFont` }} className={classes.smallRadioButton} key={'vTypes' + index} value={row.value} control={<Radio color='primary' classes={{ root: classes.radioRoot }} />} label={row.label + ` ( ${getBatchDetails(row.type)} )`} />\n                                ))\n                            }\n                        </RadioGroup>\n                    </FormControl>\n                </div>\n            ) | (\n\n                <div className='rowFlex'>\n                    <FormControl component=\"fieldset\" style={{ width: '100%' }}>\n                        <RadioGroup\n                            aria-label=\"vType\"\n                            defaultValue=\"OCR\"\n                            name=\"radio-buttons-group\"\n                            className={classes.radioCont}\n                            value={feedbackFilter}\n                            onChange={(e) => handleRejectedFilterChange(e.target.value)}\n                        >\n                            {\n                                rejectedFilters.map((row, index) => (\n                                    row.hide && trialUserCheck() ? null :\n                                        <FormControlLabel classes={{ label: `${classes.vRadio} mFont` }} className={classes.smallRadioButton} key={'vTypes' + index} value={row.value} control={<Radio color='primary' classes={{ root: classes.radioRoot }} />}\n                                            label={index === 0 ?\n                                                <div className='rowFlex'><div>{row.label + ` ( ${getBatchDetails(row.type)} )`}</div>&nbsp;&nbsp;<Tooltip title={`Recommended by AI engine for feedback out of ${getRejectedNumber()} Rejected files`}><div className='colFlex flexCenter'><SvgIcon style='width: 15;height:15' src={Images.info} /></div></Tooltip></div>\n                                                : row.label + ` ( ${getBatchDetails(row.type)} )`}\n                                        />\n                                ))\n                            }\n                        </RadioGroup>\n                    </FormControl>\n                </div>\n            ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "/>}",
                    "/>",
                    "/RadioGroup>",
                    "/FormControl>",
                    "/div>",
                    "/>}",
                    "/div>&nbsp;&nbsp;<Tooltip",
                    "/></div></Tooltip></div>",
                    "/>",
                    "/RadioGroup>",
                    "/FormControl>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    170,
                    178
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDetailedFilters.js",
                "returnType": "`${batchList[i][type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setIdentificationFilter",
                "method_begin": "const setIdentificationFilter = (type) => {",
                "method_end": "}",
                "range": [
                    180,
                    206
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDetailedFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//viewUnidentifiedFiles(",
                    "//return",
                    "/home/document/page/1/batch/${batchFilter}/passed",
                    "/home/document/page/1/batch/${batchFilter}/rejected",
                    "/home/document/page/1/batch/${batchFilter}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTooltip",
                "method_begin": "const getTooltip = (type) => {",
                "method_end": "}",
                "range": [
                    208,
                    212
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDetailedFilters.js",
                "returnType": "'We are still working. Please review the Passed Files while we fetch the Rejected Files' | ''",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js": {
        "method_details_": [
            {
                "method_name": "deleteDocs",
                "method_begin": "const deleteDocs = () => {",
                "method_end": "}",
                "range": [
                    30,
                    35
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "skipReview",
                "method_begin": "const skipReview = () => {",
                "method_end": "}",
                "range": [
                    37,
                    48
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startFeedback",
                "method_begin": "const startFeedback = () => {",
                "method_end": "}",
                "range": [
                    68,
                    70
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startReview",
                "method_begin": "const startReview = () => {",
                "method_end": "}",
                "range": [
                    72,
                    96
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/review/batch/${batchId}/${documentList[0]._id}",
                    "/home/document/review/batch/${batchId}/${currentBatch.qcCurrentDocument}",
                    "/home/document/review/batch/${batchId}/${currentBatch.qcCurrentDocument}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = () => {",
                "method_end": "}",
                "range": [
                    98,
                    108
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "batchList[i].processedPercentage | 0 | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelFeedback",
                "method_begin": "const cancelFeedback = () => {",
                "method_end": "}",
                "range": [
                    110,
                    112
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelReview",
                "method_begin": "const cancelReview = () => {",
                "method_end": "}",
                "range": [
                    114,
                    116
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocs",
                "method_begin": "const exportDocs = () => {",
                "method_end": "}",
                "range": [
                    118,
                    129
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadDocs",
                "method_begin": "const downloadDocs = () => {",
                "method_end": "}",
                "range": [
                    131,
                    136
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTriggerStyles",
                "method_begin": "const getTriggerStyles = () => {",
                "method_end": "}",
                "range": [
                    138,
                    142
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "'stroke: ##666666' | 'stroke: #e5e5e5'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "triggerAiProcess",
                "method_begin": "const triggerAiProcess = () => {",
                "method_end": "}",
                "range": [
                    144,
                    148
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "giveFeedback",
                "method_begin": "const giveFeedback = () => {",
                "method_end": "}",
                "range": [
                    150,
                    166
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/passed/batch/${batchId}/${documentList[0]._id}",
                    "/home/training/${feedbackFilter",
                    "/batch/${batchId}/${documentList[0]._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startSession",
                "method_begin": "const startSession = (value) => {",
                "method_end": "}",
                "range": [
                    169,
                    213
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/review/batch/${batchId}/${currentBatch.qcCurrentDocument",
                    "/home/document/review/batch/${batchId}/${currentBatch.qcCurrentDocument}",
                    "/home/document/review/batch/${batchId}/${documentList[0]._id}",
                    "/*",
                    "/home/document/review/batch/${batchId}/${currentBatch.qcCurrentDocument"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocFilter.js": {
        "method_details_": [
            {
                "method_name": "filterDocuments",
                "method_begin": "const filterDocuments = (value) => {",
                "method_end": "}",
                "range": [
                    28,
                    30
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (type, index, value, item) => {",
                "method_end": "}",
                "range": [
                    32,
                    60
                ],
                "parameters": [
                    "type",
                    "index",
                    "value",
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1",
                    "/home/document/page/1/batch/${markListingStore.batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocFilters.js": {
        "method_details_": [
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    62,
                    72
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocFilters.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%` | '0%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUnidentifiedFiles",
                "method_begin": "const viewUnidentifiedFiles = () => {",
                "method_end": "}",
                "range": [
                    74,
                    81
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${batchFilter}/bucket"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRadioFilters",
                "method_begin": "const renderRadioFilters = () => {",
                "method_end": "}",
                "range": [
                    83,
                    91
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocFilters.js",
                "returnType": "(\n                <div className='rowFlex'>\n\n                </div>\n            ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    93,
                    101
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocFilters.js",
                "returnType": "`${batchList[i][type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setIdentificationFilter",
                "method_begin": "const setIdentificationFilter = (type) => {",
                "method_end": "}",
                "range": [
                    103,
                    134
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocFilters.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//viewUnidentifiedFiles(",
                    "//return",
                    "/home/document/page/1/batch/${batchFilter}/passed",
                    "/home/document/page/1/batch/${batchFilter}/rejected",
                    "/home/document/page/1/batch/${batchFilter}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTooltip",
                "method_begin": "const getTooltip = (type) => {",
                "method_end": "}",
                "range": [
                    136,
                    149
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocFilters.js",
                "returnType": "'We are still working. Please review the Passed Files while we fetch the Rejected Files' | 'Please complete the review process' | 'Please complete the review process' | ''",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js": {
        "method_details_": [
            {
                "method_name": "setDocsPerPage",
                "method_begin": "const setDocsPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    54,
                    77
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/${batchFilter}/all",
                    "/${batchFilter}/passed",
                    "/${batchFilter}/rejected",
                    "/home/document/page/1/${routeExtension}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onMouseEnter",
                "method_begin": "const onMouseEnter = (row) => {",
                "method_end": "}",
                "range": [
                    88,
                    91
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onMouseLeave",
                "method_begin": "const onMouseLeave = () => {",
                "method_end": "}",
                "range": [
                    93,
                    96
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTableHeaders",
                "method_begin": "const setTableHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    100,
                    102
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    122,
                    134
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    136,
                    138
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    140,
                    146
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    158,
                    199
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "(\n            <TableHead>\n                <TableRow>\n                    {adminCheck() ?\n                        <TableCell padding=\"checkbox\" className={classes.checkbox} style={{ width: '1%' }}>\n                            <Checkbox\n                                checkedIcon={<CheckboxIcon checked={true} />}\n                                checked={selectAllDocs}\n                                icon={<CheckboxIcon checked={false} />}\n                                onChange={(event, value) => onChangeSelectAll(event, value)}\n                                color=\"primary\"\n                                inputProps={{ classes: { root: classes.checkbox } }} />\n                        </TableCell> : null}\n                    <TableCell style={{ width: '5%' }}>\n                        S.No.\n                    </TableCell>\n                    {\n                        tableHeader.map((row, index) => (\n                            !row.selected ? null :\n                                <Card\n                                    index={index}\n                                    filter={row.filter}\n                                    filtered={getFilterStatus(row)}\n                                    key={row.id} id={`${row.id}`}\n                                    align={row.align}\n                                    fullWidth={getWidth()}\n                                    menuStyle={classes.filterMenu}\n                                    checkboxClass={classes.checkbox}\n                                    width={row.width} name={row.label} moveCard={moveCard} findCard={findCard} />\n\n                        ))\n                    }\n                    <TableCell align=\"left\" style={{ width: '5%' }}>\n                        <ColumnConfig filterType={filterType} onComplete={markListingStore.setTableHeaders} from='documents' headers={tableHeader} onChange={onHeaderChange} />\n                    </TableCell>\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/TableCell>",
                    "/>",
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    203,
                    223
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/${batchFilter}/all",
                    "/${batchFilter}/passed",
                    "/${batchFilter}/rejected",
                    "/home/document/page/${pageNo",
                    "/${routeExtension}",
                    "/home/document/page/${pageNo",
                    "/${routeExtension}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (checked, index) => {",
                "method_end": "}",
                "range": [
                    225,
                    230
                ],
                "parameters": [
                    "checked",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    232,
                    258
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalDocs}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {pageNo === 1 ? pageNo : ((pageNo - 1) * (docsPerPage) + 1)}\n                    -\n                    {pageNo * docsPerPage <= totalDocs ? (pageNo * docsPerPage) : totalDocs\n                    }\n                </div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={docsPerPage} setRowsPerPage={setDocsPerPage} />\n                </div>\n\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocument",
                "method_begin": "const openDocument = (row) => {",
                "method_end": "}",
                "range": [
                    260,
                    287
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/passed/batch/${batchFilter}/${row._id}",
                    "/home/training/resolved/batch/${batchFilter}/${row._id}",
                    "/home/document/training/batch/${batchFilter}/${row._id}",
                    "/home/training/feedback/batch/${batchFilter}/${row._id}",
                    "/home/document/all/batch/${batchFilter}/${row._id}",
                    "/home/document/all/batch/${batchFilter}/${row._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocStatus",
                "method_begin": "const renderDocStatus = (value, status, row) => {",
                "method_end": "}",
                "range": [
                    315,
                    340
                ],
                "parameters": [
                    "value",
                    "status",
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "(\n                <div className={classes.docStatus} style={{ color: trainingStatus[`${value}`].fcolor }}>\n                    {trainingStatus[`${value}`].feedbackLabel}\n                </div>\n            ) | (\n                <div className={classes.docStatus} style={{ color: value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].color : trainingStatus[`${status}`].color }}>\n                    {value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].feedbackLabel : (row.pushToRejected ? trainingStatus.REJECTED.label : trainingStatus[`${status}`].label)}\n                </div>\n            ) | (\n            <div className={classes.docStatus} style={{ color: value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].color : trainingStatus[`${status}`].color }}>\n                {/* <div className='colFlex flexCenter' >\n                <div className={classes.dot} style={{ backgroundColor: trainingStatus[`${value}`].color }}></div>\n            </div>*/}\n                {\n                    ocrStatusFilter === 'OCR_COMPLETE' ?\n                        (value.startsWith('FEEDBACK') ? trainingStatus[`${value}`].feedbackLabel : (row.isNonTableFlag && row.isTableFlag ? trainingStatus[`${status}`].label : trainingStatus[`${status}`].feedbackLabel)) :\n                        trainingStatus[`${value}`].label\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>*/}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRank",
                "method_begin": "const renderRank = (row) => {",
                "method_end": "}",
                "range": [
                    342,
                    353
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "(\n            <div className={` semiBold`} style={{ backgroundColor: 'transparent', color: temp.color, fontSize: 'inherit' }}>\n                {temp.label}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "rejectedFilesPresent",
                "method_begin": "const rejectedFilesPresent = (type) => {",
                "method_end": "}",
                "range": [
                    355,
                    362
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "currentBatch[`${type}`] | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    364,
                    371
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderRejectedReason",
                "method_begin": "const renderRejectedReason = (buckets, index) => {",
                "method_end": "}",
                "range": [
                    373,
                    392
                ],
                "parameters": [
                    "buckets",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "(\n            <React.Fragment>\n                <div data-tip data-for={'rejectionReason' + index} style={{ textDecoration: 'underline', width: 'fit-content' }}>\n                    {buckets.length}&nbsp; found\n                </div>\n                <ReactTooltip id={'rejectionReason' + index} place='right' effect='solid' className={classes.reasonTooltip}>\n                    <div >\n                        <ul>\n                            {\n                                buckets.map((row, bucketIndex) => (\n                                    <li key={index + 'bucket' + bucketIndex} className='sFont'>{classDetails[`${row.bucketId}`]}</li>\n                                ))\n                            }\n                        </ul>\n                    </div>\n                </ReactTooltip>\n            </React.Fragment>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/li>",
                    "/ul>",
                    "/div>",
                    "/ReactTooltip>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderParentFile",
                "method_begin": "const renderParentFile = (buckets, index) => {",
                "method_end": "}",
                "range": [
                    394,
                    411
                ],
                "parameters": [
                    "buckets",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "(\n            <React.Fragment>\n                <div style={{ width: 'fit-content' }}>\n                    {buckets.map((row, bucketIndex) => (\n                        <div className='sFont rowFlex' className={classes.parentName}>\n                            <div  > {row.bucketCategory}</div>\n                            <CopyToClipboard text={row.bucketCategory} className={classes.copyButton1}\n                                onCopy={() => commonStore.handleOpenSnackBar('Bucket Category name copied to clipboard', 'info')}>\n                                <SvgIcon src={Images.copy} />\n                            </CopyToClipboard>\n                        </div>\n                    ))}\n                </div>\n\n            </React.Fragment>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/>",
                    "/CopyToClipboard>",
                    "/div>",
                    "/div>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToResolvedFiles",
                "method_begin": "const goToResolvedFiles = () => {",
                "method_end": "}",
                "range": [
                    413,
                    416
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPageRange",
                "method_begin": "const renderPageRange = (row) => {",
                "method_end": "}",
                "range": [
                    418,
                    429
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "<span>{(parseInt(arr[0]) + 1).toString() + ' - ' + (parseInt(arr[arr.length - 1]) + 1).toString() + ` of  ` }{<span className='semiBold'>{row.totalPages} page(s)</span>}</span> | <span>{parseInt(arr[0]) + 1 + ` of  `}{<span className='semiBold'>{row.totalPages} page(s)</span>}</span> | '-'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span>}</span>",
                    "/span>}</span>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    431,
                    480
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "(<div>{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</div>) | (<div>{row.createdAt && Moment(row.reviewedOn).format('DD MMM YY, h:mm a')}</div>) | <div className={classes.processBtn}>Process</div> | <div >{renderPageRange(row)}</div> | row.confidenceScore ? renderConfidenceScore(row.confidenceScore) : 'N/A' | row.aiStatus && renderDocStatus(row.aiStatus, row.status, row) | renderRank(row) | row.buckets && row.buckets.length ? renderRejectedReason(row.buckets, index) : '-' | row.buckets && row.buckets.length ? renderParentFile(row.buckets, index) : '-' | (\n                    row.docType && row.docType.toLowerCase().startsWith('#new_format') ?\n                        <div className='rowFlex'>\n                            <div className='colFlex flexCenter'>\n                                {row.docType}\n                            </div>&nbsp;\n                            <div className='colFlex flexCenter' data-tip data-for={'newFormat' + index}><SvgIcon src={Images.info} /></div>\n                            <ReactTooltip clickable={true} id={'newFormat' + index} place='right' effect='solid' className={'xsFont'} >\n                                <div>This seems to be a new document type<br /> which is yet to be configured</div>\n                            </ReactTooltip>\n                        </div>\n                        :\n                        row.docType\n                ) | (\n                    <div className={classes.docName}>\n                        <div data-tip data-for={'preview' + index} className={classes.rowLink} onClick={() => openDocument(row)}>{row[`${header.type}`]}</div>\n                        <CopyToClipboard text={row[`${header.type}`]} className={classes.copyButton}\n                            onCopy={() => commonStore.handleOpenSnackBar('Document name copied to clipboard', 'info')}>\n                            <SvgIcon src={Images.copy} />\n                        </CopyToClipboard>\n                        <FilePreview index={index} data={row} />\n                    </div>\n                ) | (<div>{row[`${header.type}`] ? row[`${header.type}`] : '-'}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/A",
                    "/div>&nbsp;",
                    "/></div>",
                    "/>",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/CopyToClipboard>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderConfidenceScore",
                "method_begin": "const renderConfidenceScore = (value) => {",
                "method_end": "}",
                "range": [
                    482,
                    493
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "(\n            <div className='rowFlex'>\n                <div style={{ width: '25%' }} className='colFlex flexCenter'>\n                    <div className={classes.percentageBar} >\n                        <hr align=\"left\" width={value + '%'} className={classes.percentageLine} style={{ backgroundColor: getCfScoreColors('percent', value) }} />\n                    </div>\n                </div>\n                <div className={classes.cfScore}>{value + '%'}</div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    495,
                    504
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocListing.js",
                "returnType": "`${batchList[i][type]}` | 0 | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocSearchBar.js": {
        "method_details_": [
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    21,
                    34
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocSearchBar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1",
                    "/home/document/page/1/batch/${markListingStore.batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchDocs",
                "method_begin": "const searchDocs = (event) => {",
                "method_end": "}",
                "range": [
                    37,
                    63
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MDocSearchBar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/all",
                    "/${batchFilter}/all",
                    "/${batchFilter}/passed",
                    "/${batchFilter}/rejected",
                    "/home/document/page/1/${routeExtension}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MHeaderStats.js": {
        "method_details_": [
            {
                "method_name": "CustomSvgIcon",
                "method_begin": "function CustomSvgIcon(props)",
                "method_end": ");",
                "range": [
                    23,
                    30
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MHeaderStats.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    58,
                    76
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MHeaderStats.js",
                "returnType": "batchAnalytics.processedPercentage | 0 | `c${batchList[i].processedPercentage} p50` | `${batchList[i].processedPercentage}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentage",
                "method_begin": "const getPercentage = (type) => {",
                "method_end": "}",
                "range": [
                    78,
                    88
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MHeaderStats.js",
                "returnType": "`c${batchList[i].processedPercentage} p50` | `${batchList[i].processedPercentage}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    90,
                    120
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MHeaderStats.js",
                "returnType": "batchAnalytics[`${type}`] | getTimeElapsed(currentBatch.timeElapsed) | getTimeElapsed(currentBatch.ocrTime) | Math.ceil((currentBatch.identified / currentBatch.docCount) * 100) | Math.round(currentBatch.accuracy) | `${currentBatch[type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getResolvedPercentage",
                "method_begin": "const getResolvedPercentage = () => {",
                "method_end": "}",
                "range": [
                    122,
                    129
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MHeaderStats.js",
                "returnType": "Math.ceil((currentBatch.feedbackApplied / (currentBatch.nonIdentified + currentBatch.feedbackApplied)) * 100) | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchAnalytics",
                "method_begin": "const getBatchAnalytics = (type) => {",
                "method_end": "}",
                "range": [
                    131,
                    150
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MHeaderStats.js",
                "returnType": "`${batchAnalytics[type]}` | `${batchList[i].analytics[type]}` | 0 | 0 | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getAutomationPercent",
                "method_begin": "const getAutomationPercent = () => {",
                "method_end": "}",
                "range": [
                    152,
                    163
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MHeaderStats.js",
                "returnType": "percent | '0'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (time) => {",
                "method_end": "}",
                "range": [
                    165,
                    167
                ],
                "parameters": [
                    "time"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MHeaderStats.js",
                "returnType": "msToHMS(time)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderStats",
                "method_begin": "const renderStats = () => {",
                "method_end": "}",
                "range": [
                    169,
                    422
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MHeaderStats.js",
                "returnType": "(\n                <div className={clsx({[classes.statContainer]: true, [classes.blurredStats]:batchFilter === ' '})}>\n                    <AnimatedDiv className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.totalFiles} />\n                        <div className='fullWidth lFont'>\n                            Total Documents\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont colFlex flexCenter`}>{getBatchDetails('docCount')}</div>\n                                <div className={classes.successText}>{getBatchDetails('identified')}</div>\n                                <div className={classes.failedText}>{getBatchDetails('nonIdentified')}</div>\n                            </div>\n                        </div>\n                    </AnimatedDiv>\n                    <AnimatedDiv className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.automation} />\n                        <div className='fullWidth lFont'>\n                            Automation\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont`}>{getBatchAnalytics('automation')}%</div>\n                                {/*<div className={`${classes.subText} ${classes.greenText}`}>\n                                    +7%&nbsp;&nbsp; <div className={classes.subText}>previous batch</div>\n                                </div>*/}\n                            </div>\n                        </div>\n                    </AnimatedDiv>\n                    <AnimatedDiv className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.accuracy} />\n                        <div className='fullWidth lFont'>\n                            Accuracy\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont`}>{getBatchAnalytics('accuracy')}%</div>\n                                {/*<div className={`${classes.subText} ${classes.greenText}`}>\n                                    +50%&nbsp;&nbsp; <div className={classes.subText}>previous batch</div>\n                                </div>*/}\n                            </div>\n                        </div>\n                    </AnimatedDiv>\n                    <AnimatedDiv className={classes.statCard}>\n                        <SvgIcon className={classes.icon} src={Images.hourglass} />\n                        <div className='fullWidth lFont'>\n                            OCR Time\n                            <div className='rowFlex'>\n                                <div className={`${classes.fileCount} mFont`}>{getPercentageClass()}%</div>\n                                <div className={`${classes.subText} sFont`}></div>\n                            </div>\n                        </div>\n                    </AnimatedDiv>\n\n                </div>\n\n            ) | (\n                    <div className={clsx({[classes.statContainer]: true, [classes.blurredStats]:batchFilter === ' '})}>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.totalFiles} />\n                            <div className='fullWidth lFont'>\n                                Total Documents\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont colFlex flexCenter`}>{getBatchDetails('docCount')}</div>\n                                    <div className={classes.successText}>{getBatchDetails('identified')}</div>\n                                    <div className={classes.failedText}>{getBatchDetails('nonIdentified')}</div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.automation} />\n                            <div className='fullWidth lFont'>\n                                Automation\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('automation')}%</div>\n                                    {/* <div className={`${classes.subText} ${classes.greenText}`}>\n                                        +7%&nbsp;&nbsp; <div className={classes.subText}>previous batch</div>\n                                    </div>*/}\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.accuracy} />\n                            <div className='fullWidth lFont'>\n                                Accuracy\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('accuracy')}%</div>\n                                    {/*<div className={`${classes.subText} ${classes.greenText}`}>\n                                        +50%&nbsp;&nbsp; <div className={classes.subText}>previous batch</div>\n                                    </div>*/}\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.hourglass} />\n                            <div className='fullWidth lFont'>\n                                OCR Time\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('ocrTime')}</div>\n                                    <div className={`${classes.subText} xsFont`}></div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n\n                    </div>\n                ) | (\n                    <div className={clsx({[classes.statContainer]: true, [classes.blurredStats]:batchFilter === ' '})}>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.identified} />\n                            <div className='fullWidth lFont'>\n                                Passed Files\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('identified')}</div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.qc} />\n                            <div className='fullWidth lFont'>\n                                Quality Check\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('qcCount')}</div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.reviewed} />\n                            <div className='fullWidth lFont'>\n                                Modified\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('modifiedCount')}</div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.hourglass} />\n                            <div className='fullWidth lFont'>\n                                Review Time\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('ocrTime')}</div>\n                                    <div className={`${classes.subText} xsFont`}></div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n\n                    </div>\n                ) | (\n                    <div className={clsx({[classes.statContainer]: true, [classes.blurredStats]:batchFilter === ' '})}>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.unidentified} />\n                            <div className='fullWidth lFont'>\n                                Rejected Files\n                                <div className={`${classes.fileCount} mFont`}>{getBatchDetails('nonIdentified')}</div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.fgiven} />\n                            <div className='fullWidth lFont'>\n                                Feedback Given\n                                <div className={`${classes.fileCount} mFont`}>{getBatchDetails('feedbackGiven')}</div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.fapplied} />\n                            <div className='fullWidth lFont'>\n                                Resolved\n                                <div className={`${classes.fileCount} mFont`}>{getResolvedPercentage() + `%`}</div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.hourglass} />\n                            <div className='fullWidth lFont'>\n                                Feedback Time\n                                <div className='rowFlex'>\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('ocrTime')}</div>\n                                    <div className={`${classes.subText} xsFont`}></div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                    </div>\n                ) | (\n                    <div className={clsx({[classes.statContainer]: true, [classes.blurredStats]:batchFilter === ' '})}>\n                        <AnimatedDiv className={classes.statCard} style={{ flexDirection: 'column' }}  >\n                            <SvgIcon className={classes.icon} src={Images.unidentified} />\n                            Feedback Applied\n                            <div className='rowFlex'>\n                                <div className='fullWidth' style={{ flex: '1' }} >\n                                    <div className={`${classes.fileCount} mFont`}>{getBatchDetails('nonIdentified')}</div>\n                                </div>\n                                <div style={{ flex: '1', marginRight: '3vw' }} className='rowFlex flexCenter'>\n                                    <div className='colFlex flexCenter'> <SvgIcon src={Images.graph} /></div>\n                                </div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.fgiven} />\n                            <div className='fullWidth' style={{ flex: '1' }} >\n                                Feedback Given\n                                <div className={`${classes.fileCount} mFont`}>2</div>\n                            </div>\n                            <div style={{ flex: '1', marginRight: '3vw' }} className='rowFlex flexCenter'>\n                                <div className='colFlex flexCenter'> <SvgIcon src={Images.graph} /></div>\n                            </div>\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.fapplied} />\n                            <div className='fullWidth'>\n                                Feedback Applied\n                                <div className='rowFlex fullWidth spaceBetween'>\n                                    <div style={{ flex: '1' }}>\n                                        <div className={`${classes.fileCount} mFont`}>48%</div>\n                                        {/*<div className={`${classes.subText} ${classes.greenText}`}>\n                                            +7%&nbsp;&nbsp; <div className={classes.subText}>previous batch</div>\n                                        </div>*/}\n                                    </div>\n                                    <div className='rowFlex flexCenter' style={{ flex: '1' }}>\n                                        <div className={`c100 p38`}>\n\n                                            <div className=\"slice\">\n                                                <div className=\"bar\"></div>\n                                                <div className=\"fill\"></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </AnimatedDiv>\n                        <AnimatedDiv className={classes.statCard}>\n                            <SvgIcon className={classes.icon} src={Images.time} />\n                            <div style={{ flex: '1' }} >\n                                Time taken\n                                <div className={`${classes.fileCount} mFont`}>00:02:14</div>\n                                <div className={`${classes.subText} ${classes.greenText}`}>\n                                    <div className={classes.subText}></div>\n                                </div>\n                            </div>\n                            <div style={{ flex: '1' }} className='rowFlex flexCenter'>\n                                <div className='colFlex flexCenter'> <SvgIcon src={Images.clock} /></div>\n                            </div>\n                        </AnimatedDiv>\n                    </div>\n                )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/*<div",
                    "/div>",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/*<div",
                    "/div>",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/*<div",
                    "/div>",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/*<div",
                    "/div>",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/AnimatedDiv>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MStartReview.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MarkDocHome.js": {
        "method_details_": [
            {
                "method_name": "refreshPage",
                "method_begin": "const refreshPage = () => {",
                "method_end": "}",
                "range": [
                    105,
                    163
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MarkDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    165,
                    172
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MarkDocHome.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    174,
                    196
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MarkDocHome.js",
                "returnType": "msToHMS(detailBatchList[i].ocrTime) | `${detailBatchList[i][type]}` | `${detailBatchList[i].passedFilesCount}` | `${detailBatchList[i].failedFilesCount}` | `${detailBatchList[i].reviewFilesPending}` | `${detailBatchList[i].reviewFilesCompleted >= 0 ? detailBatchList[i].reviewFilesCompleted : 0}` | `${detailBatchList[i].classificationFilesReviewed}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    199,
                    209
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MarkDocHome.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%` | '0%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "docFilterChange",
                "method_begin": "const docFilterChange = (type) => {",
                "method_end": "}",
                "range": [
                    212,
                    258
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/MarkDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/home/document/page/1/batch/${batchFilter}/passed",
                    "/home/document/page/1/batch/${batchFilter}/rejected",
                    "/home/document-api/page/1/batch/${batchFilter}/review",
                    "/home/document-api/page/1/batch/${batchFilter}/creview",
                    "/home/document-api/page/1/batch/${batchFilter}/completed",
                    "/home/document-api/page/1/batch/${batchFilter}/pending",
                    "/home/document-api/page/1/batch/${batchFilter}/all"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/OcrFailureHome.js": {
        "method_details_": [
            {
                "method_name": "sortDocList",
                "method_begin": "const sortDocList = () => {",
                "method_end": "}",
                "range": [
                    56,
                    58
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/OcrFailureHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/ocr-failure/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshPage",
                "method_begin": "const refreshPage = () => {",
                "method_end": "}",
                "range": [
                    78,
                    84
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/OcrFailureHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    86,
                    93
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/OcrFailureHome.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    95,
                    117
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/OcrFailureHome.js",
                "returnType": "msToHMS(detailBatchList[i].ocrTime) | `${detailBatchList[i][type]}` | `${detailBatchList[i].passedFilesCount}` | `${detailBatchList[i].failedFilesCount}` | `${detailBatchList[i].reviewFilesPending}` | `${detailBatchList[i].reviewFilesCompleted >= 0 ? detailBatchList[i].reviewFilesCompleted : 0}` | `${detailBatchList[i].classificationFilesReviewed}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    120,
                    130
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/OcrFailureHome.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%` | '0%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "docFilterChange",
                "method_begin": "const docFilterChange = (type) => {",
                "method_end": "}",
                "range": [
                    133,
                    159
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/OcrFailureHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/home/ocr-failure/page/1/${type}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SplitFiles.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = (headers) => {",
                "method_end": "}",
                "range": [
                    76,
                    87
                ],
                "parameters": [
                    "headers"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SplitFiles.js",
                "returnType": "(\n            <TableHead>\n                <TableRow>\n                    {serverHeaders.map((row, index) => (\n                        <TableCell key={'serverHeader' + index} className={classes.tableCellSuper}>{row.label}</TableCell>\n                    ))}\n                </TableRow>\n            </TableHead>\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item, type) => {",
                "method_end": "}",
                "range": [
                    89,
                    110
                ],
                "parameters": [
                    "item",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SplitFiles.js",
                "returnType": "msToHMS(item.ocrResponseInMs) | msToHMS(item.timeElapsed) | msToHMS(duration) | <TimeElapsed offsetTimestamp={stopwatchOffset} />",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//todays",
                    "//",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setFileForAction",
                "method_begin": "const setFileForAction = (row, index, status, data) => {",
                "method_end": "}",
                "range": [
                    112,
                    114
                ],
                "parameters": [
                    "row",
                    "index",
                    "status",
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SplitFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelStatusChange",
                "method_begin": "const cancelStatusChange = () => {",
                "method_end": "}",
                "range": [
                    116,
                    118
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SplitFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmStatusChange",
                "method_begin": "const confirmStatusChange = () => {",
                "method_end": "}",
                "range": [
                    120,
                    122
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SplitFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (type, row, index) => {",
                "method_end": "}",
                "range": [
                    125,
                    163
                ],
                "parameters": [
                    "type",
                    "row",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SplitFiles.js",
                "returnType": "((pageNo - 1) * 100) + index + 1 | row.batchNumber | row.user && row.user.email | row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a') | row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a') | row.ocrRequestTime ? getTimeElapsed(row) : '-' | row.ocrResponseTime ? getTimeElapsed(row, 'ocrResponseTime') : '-' | (\n                    <SimpleButton label='Payload' style={{ marginLeft: '0' }} onClick={() => setFileForAction(row, index, 'OCR_PENDING', row.payloadObject)} />\n                ) | (\n                    <SimpleButton label='Force to failure' style={{ backgroundColor: '#fc525c', marginLeft: '0' }} onClick={() => setFileForAction(row, index, 'OCR_FAILED')} />\n                ) | row[`${type}`] !== undefined ? row[`${type}`] : '-'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    165,
                    170
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SplitFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/split-files/page/${pageNo",
                    "/home/split-files/page/${pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    172,
                    199
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SplitFiles.js",
                "returnType": "(\n            adminStore.inProgress || totalSplitFiles === 0 ? null :\n                <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                    <div className='colFlex flexCenter fullHeight bold'>\n                        Total Count: {totalSplitFiles}\n                    </div>\n                    {totalSplitFiles === 0  ? null :\n                        <div className='rowFlex'>\n                            <div className={classes.pgnDivider}>|</div>\n                            <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                                <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                            </div>\n                            <div className='colFlex flexCenter fullHeight'>\n                                {pageNo === 1 ? pageNo : ((pageNo - 1) * (100) + 1)}\n                                &nbsp; -&nbsp;\n                                {pageNo * 100 <= totalSplitFiles ? (pageNo * 100) : totalSplitFiles\n                                }\n                            </div>\n                            <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                                <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                            </div>\n                        </div>\n                    }\n\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refresh",
                "method_begin": "const refresh = () => {",
                "method_end": "}",
                "range": [
                    201,
                    205
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SplitFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshCFiles",
                "method_begin": "const refreshCFiles = () => {",
                "method_end": "}",
                "range": [
                    207,
                    212
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SplitFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SupervisorDocHome.js": {
        "method_details_": [
            {
                "method_name": "refreshPage",
                "method_begin": "const refreshPage = () => {",
                "method_end": "}",
                "range": [
                    102,
                    160
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SupervisorDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    162,
                    169
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SupervisorDocHome.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    171,
                    193
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SupervisorDocHome.js",
                "returnType": "msToHMS(detailBatchList[i].ocrTime) | `${detailBatchList[i][type]}` | `${detailBatchList[i].passedFilesCount}` | `${detailBatchList[i].failedFilesCount}` | `${detailBatchList[i].reviewFilesPending}` | `${detailBatchList[i].reviewFilesCompleted >= 0 ? detailBatchList[i].reviewFilesCompleted : 0}` | `${detailBatchList[i].classificationFilesReviewed}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    196,
                    206
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SupervisorDocHome.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%` | '0%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "docFilterChange",
                "method_begin": "const docFilterChange = (type) => {",
                "method_end": "}",
                "range": [
                    209,
                    213
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SupervisorDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-qc/page/1/${type}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "docTypeFilterChange",
                "method_begin": "const docTypeFilterChange = (type) => {",
                "method_end": "}",
                "range": [
                    215,
                    223
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SupervisorDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-qc/page/1/${filterType}",
                    "/home/document-qc/page/1/${filterType}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSupervisorStats",
                "method_begin": "const getSupervisorStats = (type) => {",
                "method_end": "}",
                "range": [
                    225,
                    234
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SupervisorDocHome.js",
                "returnType": "0 | abbreviateNumber(supervisorStats.reviewPendingCount + supervisorStats.classificationReviewedCount + supervisorStats.reviewCompleted) | abbreviateNumber(supervisorStore.supervisorStats && supervisorStore.supervisorStats[`${type}`]) | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortDocList",
                "method_begin": "const sortDocList = () => {",
                "method_end": "}",
                "range": [
                    236,
                    240
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MDocuments/SupervisorDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-qc/page/1/${filterType}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/Card.js": {
        "method_details_": [
            {
                "method_name": "Card",
                "method_begin": "function Card({ id, name, width, filter, equalWidth, filtered, menuStyle, checkboxClass, index, headers, align, configList, rowFocus, classes, handleWorkflowChange, onHeaderClick })",
                "method_end": ");",
                "range": [
                    34,
                    109
                ],
                "parameters": [
                    "{ id, name, width, filter, equalWidth, filtered, menuStyle, checkboxClass, index, headers, align, configList, rowFocus, classes, handleWorkflowChange, onHeaderClick }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/Card.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span></div>",
                    "/></div>",
                    "/div>",
                    "/>}",
                    "/>}",
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/MenuItem>",
                    "/AnimatedDiv>",
                    "/TableCell>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickFilter",
                "method_begin": "const onClickFilter = (e, type) => {",
                "method_end": "}",
                "range": [
                    41,
                    44
                ],
                "parameters": [
                    "e",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlewWfChange",
                "method_begin": "const handlewWfChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    64,
                    70
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/Card.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/DocTypeFilter.js": {
        "method_details_": [
            {
                "method_name": "deleteDocs",
                "method_begin": "const deleteDocs = () => {",
                "method_end": "}",
                "range": [
                    32,
                    37
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/DocTypeFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "skipReview",
                "method_begin": "const skipReview = () => {",
                "method_end": "}",
                "range": [
                    39,
                    50
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/DocTypeFilter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js": {
        "method_details_": [
            {
                "method_name": "setBatchesPerPage",
                "method_begin": "const setBatchesPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    52,
                    58
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSortStart",
                "method_begin": "const onSortStart = (e) => {",
                "method_end": "}",
                "range": [
                    71,
                    73
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilterStatus",
                "method_begin": "const getFilterStatus = (row) => {",
                "method_end": "}",
                "range": [
                    93,
                    105
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "false | true | false | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = (column) => () => {",
                "method_end": "};",
                "range": [
                    115,
                    117
                ],
                "parameters": [
                    "column"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "() => {\n\n    }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    119,
                    126
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleWorkflowChange",
                "method_begin": "const handleWorkflowChange = () => {",
                "method_end": "}",
                "range": [
                    128,
                    134
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    136,
                    168
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "(\n            <SortableHead axis=\"x\" distance={5} onSortEnd={onReorderEnd} onSortStart={onSortStart} >\n                {\n                    batchHeaders.map((row, index) => (\n                        !row.selected ? null :\n                            <Card\n                                index={index}\n                                filter={row.filter}\n                                equalWidth={getWidth()}\n                                filtered={getFilterStatus(row)}\n                                key={row.id} id={`${row.id}`}\n                                menuStyle={classes.filterMenu}\n                                checkboxClass={classes.checkbox}\n                                headers={batchHeaders}\n                                onHeaderClick={onHeaderClick}\n                                align={row.align}\n                                width={row.width} name={row.label}\n                                configList={configListUpload}\n                                rowFocus={rowFocus}\n                                classes={classes}\n                                handleWorkflowChange={handleWorkflowChange}\n                            />\n\n                    ))\n                }\n                <TableCell align=\"left\" style={{ width: '5%' }}>\n                    <ColumnConfig headers={batchHeaders} onComplete={markListingStore.setBatchHeaders} onChange={onHeaderChange} onReorderEnd={onReorderEnd} />\n                </TableCell>\n            </SortableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/TableCell>",
                    "/SortableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderProcessingStatus",
                "method_begin": "const renderProcessingStatus = (value) => {",
                "method_end": "}",
                "range": [
                    170,
                    181
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "(\n            // value < 100 ?\n            true ?\n                <div className={classes.processingLoader} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div> :\n                <div className={`${classes.processingLoader} ${classes.ocrComplete}`} >\n                    <MiniLoader type='ThreeDots' width='15' height='15' color='#4484FF' className='rowFlex flexCenter' />\n                </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    183,
                    188
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/${batchPageNo",
                    "/home/upload-api/page/${batchPageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderChange",
                "method_begin": "const onHeaderChange = (value, index) => {",
                "method_end": "}",
                "range": [
                    190,
                    192
                ],
                "parameters": [
                    "value",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchHeaders",
                "method_begin": "const setBatchHeaders = (value) => {",
                "method_end": "}",
                "range": [
                    194,
                    196
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    198,
                    224
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "(\n            <div className={`sFont rowFlex ${classes.tableFooter}`}>\n                <div className='colFlex flexCenter fullHeight bold'>\n                    Total Count: {totalBatches}\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowLeftIcon className='paginationIconLeft xlFont' onClick={() => goToPage('prev')} />\n                </div>\n                <div className='colFlex flexCenter fullHeight'>\n                    {batchPageNo === 1 ? batchPageNo : ((batchPageNo - 1) * (batchesPerPage) + 1)}\n                    -\n                    {batchPageNo * batchesPerPage <= totalBatches ? (batchPageNo * batchesPerPage) : totalBatches\n                    }\n                </div>\n\n                <div className='colFlex flexCenter' style={{ height: 'auto' }}>\n                    <KeyboardArrowRightIcon className='paginationIconRight xlFont' onClick={() => goToPage('next')} />\n                </div>\n                <div className={classes.pgnDivider}>|</div>\n                <div className='colFlex flexCenter fullHeight'>\n                    <RowsPerPage value={batchesPerPage} setRowsPerPage={setBatchesPerPage} />\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatch",
                "method_begin": "const openBatch = (data) => {",
                "method_end": "}",
                "range": [
                    226,
                    239
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api-document/page/1/batch/${data._id}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTimeElapsed",
                "method_begin": "const getTimeElapsed = (item) => {",
                "method_end": "}",
                "range": [
                    241,
                    260
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "msToHMS(item.timeElapsed) | msToHMS(milli) | <TimeElapsed offsetTimestamp={stopwatchOffset} />",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//todays",
                    "//",
                    "//todays",
                    "//",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderUploadButton",
                "method_begin": "const renderUploadButton = () => {",
                "method_end": "}",
                "range": [
                    290,
                    299
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "(\n            <div className='colFlex flexCenter'>\n                <div className={`rowFlex ${classes.uploadButton}`} onClick={() => setUploadBox(true)}>\n                    <SvgIcon src={Images.upload} />&nbsp;&nbsp;\n                    Upload Documents\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header, index) => {",
                "method_end": "}",
                "range": [
                    301,
                    366
                ],
                "parameters": [
                    "row",
                    "header",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "(<div>{row[`${header.name}`] && Moment(row[`${header.name}`]).format('DD MMM YY, h:mm a')}</div>) | (row.uploadedVia === undefined ?\n                    <div className={classes.uploadedVia}>\n                        <div><SvgIcon src={Images[`${uploadSources.upload.icon}`]} /></div>&nbsp;\n                        <div className='xsFont'>{uploadSources.upload.name}</div>\n                        {/*<div>{uploadSources[`${row.uploadedVia}`].type}</div>*/}\n                    </div>\n                    : null) | (<div>\n                    <div data-tip data-for={'docCount' + index} className={row.processedPercentage == 100 ? classes.docCount: ''}>{row.filesUploadedCount}</div>\n\n                    {row.processedPercentage == 100 ? <ReactTooltip id={'docCount' + index} place='right' effect='solid' className={classes.reasonTooltip} >\n                        <div >\n                            <ul>\n                                <li className='sFont'>Passed : {row.identified}</li>\n                                <li className='sFont'>Rejected : {row.nonIdentified}</li>\n                            </ul>\n                        </div>\n                    </ReactTooltip> : null}\n                </div>\n                ) | (<div>{((batchPageNo - 1) * batchesPerPage) + index + 1}</div>) | (\n                    <div className='rowFlex '>\n                        <div className={'colFlex flexCenter'} style={{ width: '50%' }}>\n                            {row.processedPercentage == 100 ? <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#33cb74' }} align=\"left\" width={row.processedPercentage + '%'} className={classes.percentageLine} />\n                            </div> :\n                                <LinearProgress classes={{ root: classes.progressRoot1, barColorPrimary: classes.barColorPrimary }} />\n                            }\n                        </div>\n                        {/*  <div className={classes.percentageCount}>{row.processedPercentage + '%'}</div>*/}\n                    </div>\n                ) | <div data-for={'exportBtn' + index} data-tip={'exportBtn' + index} style={{ cursor: (row.processedPercentage < 100) ? 'not-allowed' : 'pointer' }}>\n                    <div onClick={() => markListingStore.exportXls(true, row._id, index)}\n                        className={clsx({ ['custom-btn btn-3']: true, [classes.disProcessBtn]: (row.processedPercentage < 100), sFont: true })}><span >{row.exportedFromUpload ? 'Export Again' : 'Quick Export'}</span></div>\n                    {row.processedPercentage < 100 ? <ReactTooltip id={'exportBtn' + index}>Please wait for OCR processing to complete</ReactTooltip> : null}\n                </div> | (\n                    <div>\n                        <div data-tip data-for={'batchList' + index} className={clsx({ [classes.rowLink]: true, [classes.disRowLink]: row.processedPercentage < 100 })} onClick={() => openBatch(row)}>{row[`${header.name}`]}</div>\n                        {row.processedPercentage >= 100 || row.step > 0 ?\n                            null\n                            : <ReactTooltip id={'batchList' + index} className='reactTooltip' place='right'><div className='xsFont'>{row.processedPercentage < 100 ? (row.processedPercentage == 0 ? <span>We are experiencing high traffic at this time. <br />Your batch is in queue and OCR shall begin shortly.</span> : 'OCR in progress') : ''}</div></ReactTooltip>}\n                    </div>\n                ) | <div >{row.workFlow && (row.workFlow.name ? row.workFlow.name : row.workFlow.workflow)}</div> | getTimeElapsed(row) | (<div>{row[`${header.name}`]}</div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "/div>",
                    "/li>",
                    "/li>",
                    "/ul>",
                    "/div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/*",
                    "/div>*/}",
                    "/div>",
                    "/span></div>",
                    "/ReactTooltip>",
                    "/div>",
                    "/div>",
                    "/>Your",
                    "/span>",
                    "/div></ReactTooltip>}",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "const cancelUpload = () => {",
                "method_end": "}",
                "range": [
                    368,
                    370
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MApiBatchList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkApiLogsHome.js": {
        "method_details_": [
            {
                "method_name": "setLogsPerPage",
                "method_begin": "const setLogsPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    54,
                    60
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api-logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleWorkflowChange",
                "method_begin": "const handleWorkflowChange = () => {",
                "method_end": "}",
                "range": [
                    63,
                    68
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api-logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleStatusCodeChange",
                "method_begin": "const handleStatusCodeChange = () => {",
                "method_end": "}",
                "range": [
                    70,
                    75
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api-logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    77,
                    87
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api-logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    91,
                    98
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api-logs/page/${logPageNo",
                    "/home/api-logs/page/${logPageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderUploadButton",
                "method_begin": "const renderUploadButton = () => {",
                "method_end": "}",
                "range": [
                    121,
                    125
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkApiLogsHome.js",
                "returnType": "(\n            null\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocument",
                "method_begin": "const openDocument = (item) => {",
                "method_end": "}",
                "range": [
                    128,
                    132
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api/document/${item.response._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatchDialog",
                "method_begin": "const openBatchDialog = (value) => {",
                "method_end": "}",
                "range": [
                    135,
                    137
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderBatchButton",
                "method_begin": "const renderBatchButton = () => {",
                "method_end": "}",
                "range": [
                    139,
                    143
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkApiLogsHome.js",
                "returnType": "(\n            null\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchLogs",
                "method_begin": "const searchLogs = (event) => {",
                "method_end": "}",
                "range": [
                    145,
                    152
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkApiLogsHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api-logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js": {
        "method_details_": [
            {
                "method_name": "renderBatchSearch",
                "method_begin": "const renderBatchSearch = () => {",
                "method_end": "}",
                "range": [
                    32,
                    34
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js",
                "returnType": "(<BatchSearch placeholder='Search by External Batch ID, Batch ID, Customer ID' setSearchText={setSearchText} searchBatches={searchBatches} batchSearchText={batchSearchText} />)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    36,
                    47
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchBatches",
                "method_begin": "const searchBatches = (event) => {",
                "method_end": "}",
                "range": [
                    49,
                    56
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/1/${reviewFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortBatchList",
                "method_begin": "const sortBatchList = () => {",
                "method_end": "}",
                "range": [
                    95,
                    100
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/1/${reviewFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    119,
                    131
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/${batchPageNo",
                    "/${reviewFilter}",
                    "/home/upload-api/page/${batchPageNo",
                    "/${reviewFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchesPerPage",
                "method_begin": "const setBatchesPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    147,
                    155
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/1/${reviewFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatch",
                "method_begin": "const openBatch = (data) => {",
                "method_end": "}",
                "range": [
                    157,
                    179
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-api/page/1/${type",
                    "//",
                    "/home/document-api/page/1/batch/${data._id}/review"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlewWfChange",
                "method_begin": "const handlewWfChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    181,
                    190
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    193,
                    200
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderUploadButton",
                "method_begin": "const renderUploadButton = () => {",
                "method_end": "}",
                "range": [
                    202,
                    210
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js",
                "returnType": "(\n            <div className='colFlex flexCenter'>\n                <div className={`rowFlex ${classes.uploadButton}`} onClick={() => setUploadBox(true)}>\n                    <SvgIcon src={Images.upload} />\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "docTypeFilterChange",
                "method_begin": "const docTypeFilterChange = (val) => {",
                "method_end": "}",
                "range": [
                    212,
                    218
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/MarkUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/1/${reviewFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MarkApi/ViewPayload.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MyAccount.js": {
        "method_details_": [
            {
                "method_name": "onWhitelistAllIps",
                "method_begin": "const onWhitelistAllIps = (value) => {",
                "method_end": "}",
                "range": [
                    52,
                    57
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MyAccount.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    60,
                    62
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MyAccount.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/configuration"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "saveWhiteListing",
                "method_begin": "const saveWhiteListing = () => {",
                "method_end": "}",
                "range": [
                    64,
                    90
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MyAccount.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickDelete",
                "method_begin": "const onClickDelete = (index) => {",
                "method_end": "}",
                "range": [
                    92,
                    94
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MyAccount.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "generateApiKey",
                "method_begin": "const generateApiKey = () => {",
                "method_end": "}",
                "range": [
                    96,
                    104
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MyAccount.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelKeyDialog",
                "method_begin": "const cancelKeyDialog = () => {",
                "method_end": "}",
                "range": [
                    106,
                    108
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/MyAccount.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingDocHome.js": {
        "method_details_": [
            {
                "method_name": "getIndexerStats",
                "method_begin": "const getIndexerStats = (type) => {",
                "method_end": "}",
                "range": [
                    85,
                    94
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingDocHome.js",
                "returnType": "0 | abbreviateNumber(indexerStats.reviewPendingCount + indexerStats.classificationReviewedCount + indexerStats.reviewCompleted) | abbreviateNumber(trainingUploadStore.indexerStats && trainingUploadStore.indexerStats[`${type}`]) | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortDocList",
                "method_begin": "const sortDocList = () => {",
                "method_end": "}",
                "range": [
                    97,
                    100
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-training/page/1/${filterType}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshPage",
                "method_begin": "const refreshPage = () => {",
                "method_end": "}",
                "range": [
                    120,
                    178
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    180,
                    187
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingDocHome.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    189,
                    211
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingDocHome.js",
                "returnType": "msToHMS(detailBatchList[i].ocrTime) | `${detailBatchList[i][type]}` | `${detailBatchList[i].passedFilesCount}` | `${detailBatchList[i].failedFilesCount}` | `${detailBatchList[i].reviewFilesPending}` | `${detailBatchList[i].reviewFilesCompleted >= 0 ? detailBatchList[i].reviewFilesCompleted : 0}` | `${detailBatchList[i].classificationFilesReviewed}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    214,
                    224
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingDocHome.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%` | '0%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "docFilterChange",
                "method_begin": "const docFilterChange = (type) => {",
                "method_end": "}",
                "range": [
                    227,
                    253
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingDocHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/home/document-training/page/1/${type}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingUploadHome.js": {
        "method_details_": [
            {
                "method_name": "renderBatchSearch",
                "method_begin": "const renderBatchSearch = () => {",
                "method_end": "}",
                "range": [
                    31,
                    33
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingUploadHome.js",
                "returnType": "(<BatchSearch placeholder='Search by External Batch ID, Batch ID, Customer ID' setSearchText={setSearchText} searchBatches={searchBatches} batchSearchText={batchSearchText} />)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    35,
                    46
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchBatches",
                "method_begin": "const searchBatches = (event) => {",
                "method_end": "}",
                "range": [
                    48,
                    55
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-training/page/1/${reviewFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortBatchList",
                "method_begin": "const sortBatchList = () => {",
                "method_end": "}",
                "range": [
                    94,
                    99
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-training/page/1/${reviewFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    118,
                    130
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-training/page/${batchPageNo",
                    "/${reviewFilter}",
                    "/home/upload-training/page/${batchPageNo",
                    "/${reviewFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchesPerPage",
                "method_begin": "const setBatchesPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    146,
                    154
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-training/page/1/${reviewFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatch",
                "method_begin": "const openBatch = (data) => {",
                "method_end": "}",
                "range": [
                    156,
                    176
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-training/page/1/${type",
                    "//",
                    "/home/document-api/page/1/batch/${data._id}/review"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlewWfChange",
                "method_begin": "const handlewWfChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    178,
                    187
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingUploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-training/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    190,
                    197
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingUploadHome.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderUploadButton",
                "method_begin": "const renderUploadButton = () => {",
                "method_end": "}",
                "range": [
                    199,
                    208
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/OcrTraining/TrainingUploadHome.js",
                "returnType": "(\n            <div className='colFlex flexCenter'>\n                <div className={`rowFlex ${classes.uploadButton}`} onClick={() => setUploadBox(true)}>\n                    <SvgIcon src={Images.upload} />&nbsp;&nbsp;\n                    Upload Files for Training\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/RequestExtension.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    21,
                    28
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/RequestExtension.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCancel",
                "method_begin": "const onClickCancel = () => {",
                "method_end": "}",
                "range": [
                    30,
                    35
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/RequestExtension.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onTrialChange",
                "method_begin": "const onTrialChange =(val)=>{",
                "method_end": "}",
                "range": [
                    37,
                    39
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/RequestExtension.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/ContextMenu.js": {
        "method_details_": [
            {
                "method_name": "checkCondition",
                "method_begin": "const checkCondition = () => {",
                "method_end": "}",
                "range": [
                    52,
                    59
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/ContextMenu.js",
                "returnType": "true | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkPrecedingCondition",
                "method_begin": "const checkPrecedingCondition = () => {",
                "method_end": "}",
                "range": [
                    61,
                    68
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/ContextMenu.js",
                "returnType": "true | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeAllMenus",
                "method_begin": "const closeAllMenus = () => {",
                "method_end": "}",
                "range": [
                    70,
                    73
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/ContextMenu.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js": {
        "method_details_": [
            {
                "method_name": "setPages",
                "method_begin": "const setPages = () => {",
                "method_end": "}",
                "range": [
                    46,
                    48
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkIfSplit",
                "method_begin": "const checkIfSplit = (item, index, from) => {",
                "method_end": "}",
                "range": [
                    74,
                    78
                ],
                "parameters": [
                    "item",
                    "index",
                    "from"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "'Split' | 'Merge'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "mergeAllPages",
                "method_begin": "const mergeAllPages = () => {",
                "method_end": "}",
                "range": [
                    80,
                    88
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onDocTypeChange",
                "method_begin": "const onDocTypeChange = (type, markAll) => {",
                "method_end": "}",
                "range": [
                    90,
                    103
                ],
                "parameters": [
                    "type",
                    "markAll"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "markSubsequentPages",
                "method_begin": "const markSubsequentPages = (index, type, docType) => {",
                "method_end": "}",
                "range": [
                    105,
                    108
                ],
                "parameters": [
                    "index",
                    "type",
                    "docType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "rotateImage",
                "method_begin": "const rotateImage = (index, src, type) => {",
                "method_end": "}",
                "range": [
                    110,
                    126
                ],
                "parameters": [
                    "index",
                    "src",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "changeStrategy",
                "method_begin": "const changeStrategy = (index, val) => {",
                "method_end": "}",
                "range": [
                    128,
                    134
                ],
                "parameters": [
                    "index",
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updatePagesInStore",
                "method_begin": "const updatePagesInStore = (file, value, from) => {",
                "method_end": "}",
                "range": [
                    136,
                    147
                ],
                "parameters": [
                    "file",
                    "value",
                    "from"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updatePages",
                "method_begin": "const updatePages = (item, index) => {",
                "method_end": "}",
                "range": [
                    150,
                    185
                ],
                "parameters": [
                    "item",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSortEnd",
                "method_begin": "const onSortEnd = ({ oldIndex, newIndex }) => {",
                "method_end": "};",
                "range": [
                    187,
                    329
                ],
                "parameters": [
                    "{ oldIndex, newIndex }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//If",
                    "//If",
                    "//If",
                    "//If",
                    "//If",
                    "//",
                    "//",
                    "//",
                    "//If",
                    "//If"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmSupportingDocs",
                "method_begin": "const confirmSupportingDocs = () => {",
                "method_end": "}",
                "range": [
                    331,
                    375
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*else"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelSupportingDocs",
                "method_begin": "const cancelSupportingDocs = () => {",
                "method_end": "}",
                "range": [
                    377,
                    381
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "hideAllMenus",
                "method_begin": "const hideAllMenus = () => {",
                "method_end": "}",
                "range": [
                    383,
                    386
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "movePageToFile",
                "method_begin": "const movePageToFile = (destination) => {",
                "method_end": "}",
                "range": [
                    388,
                    427
                ],
                "parameters": [
                    "destination"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//Check",
                    "//Appending"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "moveDocumentToFile",
                "method_begin": "const moveDocumentToFile = (destination) => {",
                "method_end": "}",
                "range": [
                    430,
                    480
                ],
                "parameters": [
                    "destination"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*temp.map((row,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onPageSort",
                "method_begin": "const onPageSort = () => {",
                "method_end": "}",
                "range": [
                    482,
                    487
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//trainingStore.setUpdatedReviewPages(props.id,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderEachFile",
                "method_begin": "const renderEachFile = (pages) => {",
                "method_end": "}",
                "range": [
                    489,
                    522
                ],
                "parameters": [
                    "pages"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "(\n                <SortableItem id={props.id} key={`item-${index}`} onDragStart={() => ReactTooltip.hide()} index={index} value={\n                    <PageItem\n                        page={value}\n                        src={value.src}\n                        index={index}\n                        ocrStrategy={value.ocrStrategy}\n                        setCurrentIndex={setCurrentIndex}\n                        onDocTypeChange={onDocTypeChange}\n                        updatePages={updatePages}\n                        pages={pages}\n                        setPages={setPages}\n                        markSubsequentPages={markSubsequentPages}\n                        rotateImage={rotateImage}\n                        changeStrategy={changeStrategy}\n                        checkIfSplit={checkIfSplit}\n                        hideAllMenus={hideAllMenus}\n                        moved={moved}\n                        setMoved={setMoved}\n                        movePageToFile={movePageToFile}\n                        moveDocumentToFile={moveDocumentToFile}\n                        currentIndex={currentIndex}\n                        {...props}\n                    />\n\n                } />\n            )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderAllPages",
                "method_begin": "const renderAllPages = () => {",
                "method_end": "}",
                "range": [
                    528,
                    579
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "(\n            <SortableContainer\n                onSortEnd={onSortEnd}\n                onSortStart={onPageSort}\n                onSortMove={onPageSort}\n                distance={1}\n                axis=\"xy\"\n                // useWindowAsScrollContainer\n                lockToContainerEdges={true}\n\n            //  getContainer={() => document.getElementById(\"setting-right-panel\" + props.id)}\n            >\n                {pages.length ?\n\n                    pages.map((value, index) => {\n                        if (classificationPageRange[`${props.fileName}`]) {\n                            if (index > classificationPageRange[`${props.fileName}`].endIndex || index < classificationPageRange[`${props.fileName}`].startIndex) return null\n                        }\n\n                        return (\n                            <SortableItem id={props.id} key={`item-${index}`} onDragStart={() => ReactTooltip.hide()} index={index} value={\n                                <PageItem\n                                    page={value}\n                                    src={value.src}\n                                    index={index}\n                                    ocrStrategy={value.ocrStrategy}\n                                    setCurrentIndex={setCurrentIndex}\n                                    onDocTypeChange={onDocTypeChange}\n                                    updatePages={updatePages}\n                                    pages={pages}\n                                    setPages={setPages}\n                                    markSubsequentPages={markSubsequentPages}\n                                    rotateImage={rotateImage}\n                                    changeStrategy={changeStrategy}\n                                    checkIfSplit={checkIfSplit}\n                                    hideAllMenus={hideAllMenus}\n                                    moved={moved}\n                                    setMoved={setMoved}\n                                    movePageToFile={movePageToFile}\n                                    moveDocumentToFile={moveDocumentToFile}\n                                    currentIndex={currentIndex}\n                                    {...props}\n                                />\n\n                            } />\n                        )\n                    })\n                    : <div className='sFont'>&nbsp;&nbsp;No documents in file</div>}\n            </SortableContainer>\n        ) | null | (\n                            <SortableItem id={props.id} key={`item-${index}`} onDragStart={() => ReactTooltip.hide()} index={index} value={\n                                <PageItem\n                                    page={value}\n                                    src={value.src}\n                                    index={index}\n                                    ocrStrategy={value.ocrStrategy}\n                                    setCurrentIndex={setCurrentIndex}\n                                    onDocTypeChange={onDocTypeChange}\n                                    updatePages={updatePages}\n                                    pages={pages}\n                                    setPages={setPages}\n                                    markSubsequentPages={markSubsequentPages}\n                                    rotateImage={rotateImage}\n                                    changeStrategy={changeStrategy}\n                                    checkIfSplit={checkIfSplit}\n                                    hideAllMenus={hideAllMenus}\n                                    moved={moved}\n                                    setMoved={setMoved}\n                                    movePageToFile={movePageToFile}\n                                    moveDocumentToFile={moveDocumentToFile}\n                                    currentIndex={currentIndex}\n                                    {...props}\n                                />\n\n                            } />\n                        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "/>",
                    "/>",
                    "/div>}",
                    "/SortableContainer>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderLoadMore",
                "method_begin": "const renderLoadMore = () => {",
                "method_end": "}",
                "range": [
                    581,
                    589
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "(\n                <div style={{ marginTop: '2vh' }} className=\"rowFlex flexCenter fullWidth\">\n                    <SimpleButton label={'Load more pages...'} onClick={() => trainingStore.loadMorePages(props.fileName)} />\n                </div>\n            ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "arePropsEqual",
                "method_begin": "function arePropsEqual(prevProps, nextProps)",
                "method_end": "return false",
                "range": [
                    621,
                    625
                ],
                "parameters": [
                    "prevProps",
                    "nextProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileLevelClassification.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileNameInput.js": {
        "method_details_": [
            {
                "method_name": "setFileToMove",
                "method_begin": "const setFileToMove = (val) => {",
                "method_end": "}",
                "range": [
                    26,
                    29
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileNameInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileView.js": {
        "method_details_": [
            {
                "method_name": "FileView",
                "method_begin": "const FileView = (props) => {",
                "method_end": "};",
                "range": [
                    27,
                    53
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/FileView.js",
                "returnType": "(\n    <Draggable draggableId={_id} index={index}>\n      {(provided, snapshot) => (\n        <Container ref={provided.innerRef} {...provided.draggableProps}>\n          <Header isDragging={snapshot.isDragging}>\n\n          </Header>\n          <PageList\n            listId={_id}\n            listType=\"QUOTE\"\n            style={{\n              backgroundColor: snapshot.isDragging ? 'yellow' : null\n            }}\n            pages={pages}\n            internalScroll={props.isScrollable}\n            isCombineEnabled={Boolean(props.isCombineEnabled)}\n            useClone={undefined}\n          />\n        </Container>\n      )}\n    </Draggable>\n  )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/Header>",
                    "/>",
                    "/Container>",
                    "/Draggable>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/MoveFileDialog.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    16,
                    21
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/MoveFileDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/PageItem.js": {
        "method_details_": [
            {
                "method_name": "getBackgroundColor",
                "method_begin": "const getBackgroundColor = (isDragging, isGroupedOver, authorColors) => {",
                "method_end": "};",
                "range": [
                    28,
                    38
                ],
                "parameters": [
                    "isDragging",
                    "isGroupedOver",
                    "authorColors"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/PageItem.js",
                "returnType": "'purple' | '#EBECF0' | '#FFFFFF'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBorderColor",
                "method_begin": "const getBorderColor = (isDragging, authorColors) =>",
                "method_end": "isDragging ? 'red' : 'transparent';",
                "range": [
                    40,
                    41
                ],
                "parameters": [
                    "isDragging",
                    "authorColors"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/PageItem.js",
                "returnType": "isDragging ? 'red' : 'transparent'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getStyle",
                "method_begin": "function getStyle(provided, style)",
                "method_end": "};",
                "range": [
                    113,
                    125
                ],
                "parameters": [
                    "provided",
                    "style"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/PageItem.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "PageItem",
                "method_begin": "// Previously this extended React.Component",
                "method_end": ");",
                "range": [
                    125,
                    263
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/PageItem.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/*index+1*/}",
                    "/div>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/Content>",
                    "/Container>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onImageClick",
                "method_begin": "const onImageClick = (e, index) => {",
                "method_end": "}",
                "range": [
                    140,
                    157
                ],
                "parameters": [
                    "e",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/PageItem.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setMyPages",
                "method_begin": "const setMyPages = () => {",
                "method_end": "}",
                "range": [
                    159,
                    160
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/PageItem.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPageSplitter",
                "method_begin": "const renderPageSplitter = (item, index) => {",
                "method_end": "}",
                "range": [
                    163,
                    178
                ],
                "parameters": [
                    "item",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/PageItem.js",
                "returnType": "(\n      <div className={classes.pageDivContainer} style={{ cursor: props.activeFile === props.fileIndex ? 'grab' : (props.activeFile === -1 ? 'grab' : 'no-drop') }}>\n        <div className={classes.pageDivider} style={{ borderLeft: 'solid 1px black' }}>\n\n        </div>\n        <div data-tooltip-html='hello' onClick={() => props.updatePages(item, index)} key={item}\n          className={classes.splitIcon} data-for={'mergeSplit' + index} data-tip={'mergeSplit' + index} >\n          <SvgIcon src={Images[`${props.checkIfSplit(item, index, 'icon')}`]} style={'margin: 4px 0;'} />\n        </div>\n\n      </div>\n    )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMoveDialog",
                "method_begin": "const openMoveDialog = (index, file, type) => {",
                "method_end": "}",
                "range": [
                    180,
                    183
                ],
                "parameters": [
                    "index",
                    "file",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/PageItem.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelMove",
                "method_begin": "const cancelMove = () => {",
                "method_end": "}",
                "range": [
                    185,
                    188
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/PageItem.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onConfirmMove",
                "method_begin": "const onConfirmMove = (destination) => {",
                "method_end": "}",
                "range": [
                    190,
                    196
                ],
                "parameters": [
                    "destination"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CReview/PageItem.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ClassificationHelp.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    20,
                    23
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ClassificationHelp.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ClassificationReview.js": {
        "method_details_": [
            {
                "method_name": "shouldForwardProp",
                "method_begin": 652,
                "method_end": 698,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ClassificationReview.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setNewCurrentPage",
                "method_begin": "const setNewCurrentPage = (page) => {",
                "method_end": "}",
                "range": [
                    52,
                    55
                ],
                "parameters": [
                    "page"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ClassificationReview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closePreview",
                "method_begin": "const closePreview = () => {",
                "method_end": "}",
                "range": [
                    165,
                    168
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ClassificationReview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "hideAllTooltips",
                "method_begin": "const hideAllTooltips = () => {",
                "method_end": "}",
                "range": [
                    181,
                    183
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ClassificationReview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentFile",
                "method_begin": "const setCurrentFile = (i) => {",
                "method_end": "}",
                "range": [
                    185,
                    188
                ],
                "parameters": [
                    "i"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ClassificationReview.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderLoadPrev",
                "method_begin": "const renderLoadPrev = () => {",
                "method_end": "}",
                "range": [
                    190,
                    195
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ClassificationReview.js",
                "returnType": "(\n            <div onClick={() => trainingStore.loadMorePages('prev')}>Load previous pages...</div>\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ColumnMenu.js": {
        "method_details_": [
            {
                "method_name": "activateAutoFill",
                "method_begin": "const activateAutoFill = () => {",
                "method_end": "}",
                "range": [
                    17,
                    21
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ColumnMenu.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/CreateDocType.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/DeleteTable.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    23,
                    26
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/DeleteTable.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickRedraw",
                "method_begin": "const onClickRedraw = (extend) => {",
                "method_end": "}",
                "range": [
                    28,
                    31
                ],
                "parameters": [
                    "extend"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/DeleteTable.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/DocumentDetails.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    20,
                    27
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/DocumentDetails.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickForceSubmit",
                "method_begin": "const onClickForceSubmit = () => {",
                "method_end": "}",
                "range": [
                    29,
                    41
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/DocumentDetails.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelForceSubmit",
                "method_begin": "const cancelForceSubmit = () => {",
                "method_end": "}",
                "range": [
                    43,
                    47
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/DocumentDetails.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js": {
        "method_details_": [
            {
                "method_name": "allowTabularFeedback",
                "method_begin": "const allowTabularFeedback = () => {",
                "method_end": "}",
                "range": [
                    80,
                    90
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "giveTabularFeedback",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "navigateTableValues",
                "method_begin": "const navigateTableValues = (type) => {",
                "method_end": "}",
                "range": [
                    92,
                    196
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//scrollIntoView(elem1[0],"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onPressTab",
                "method_begin": "const onPressTab = (e) => {",
                "method_end": "}",
                "range": [
                    198,
                    202
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//setTabPressed(true"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmReset",
                "method_begin": "const confirmReset = () => {",
                "method_end": "}",
                "range": [
                    251,
                    254
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openResetDialog",
                "method_begin": "const openResetDialog = () => {",
                "method_end": "}",
                "range": [
                    256,
                    258
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelReset",
                "method_begin": "const cancelReset = () => {",
                "method_end": "}",
                "range": [
                    260,
                    262
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleTableDataChange",
                "method_begin": "const handleTableDataChange = (pageNo, val, cellIndex, index, tIndex) => {",
                "method_end": "}",
                "range": [
                    264,
                    269
                ],
                "parameters": [
                    "pageNo",
                    "val",
                    "cellIndex",
                    "index",
                    "tIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "scrollParentToChild",
                "method_begin": "const scrollParentToChild = (parent, child) => {",
                "method_end": "}",
                "range": [
                    270,
                    299
                ],
                "parameters": [
                    "parent",
                    "child"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setActiveTableField",
                "method_begin": "const setActiveTableField = (pageNo, cellIndex, tIndex, index, pageIndex) => {",
                "method_end": "}",
                "range": [
                    301,
                    361
                ],
                "parameters": [
                    "pageNo",
                    "cellIndex",
                    "tIndex",
                    "index",
                    "pageIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//scrollParentToChild(elems[0],childElem",
                    "//scrollParentToChild(elems[0],childElem"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleContextMenu",
                "method_begin": "const handleContextMenu = (event, pageIndex, tableIndex, index, pageNo) => {",
                "method_end": "};",
                "range": [
                    363,
                    382
                ],
                "parameters": [
                    "event",
                    "pageIndex",
                    "tableIndex",
                    "index",
                    "pageNo"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleClose",
                "method_begin": "const handleClose = () => {",
                "method_end": "};",
                "range": [
                    385,
                    387
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "insertRow",
                "method_begin": "const insertRow = (type) => {",
                "method_end": "}",
                "range": [
                    389,
                    394
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteRow",
                "method_begin": "const deleteRow = () => {",
                "method_end": "}",
                "range": [
                    396,
                    399
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelAddTable",
                "method_begin": "const cancelAddTable = () => {",
                "method_end": "}",
                "range": [
                    401,
                    403
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addNewTable",
                "method_begin": "const addNewTable = (extend) => {",
                "method_end": "}",
                "range": [
                    405,
                    412
                ],
                "parameters": [
                    "extend"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleTabChange",
                "method_begin": "const handleTabChange = () => {",
                "method_end": "}",
                "range": [
                    414,
                    419
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = () => {",
                "method_end": "}",
                "range": [
                    421,
                    467
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "(\n            <div className={classes.tableContainer} style={{ height: '100%', display: 'flex', flexDirection: 'column' }} >\n                <div className={classes.closeTable} onClick={handleTabChange}><SvgIcon src={Images.closeTable} /></div>\n\n                {trainingStore.trainingDoc && trainingStore.trainingDoc.tablePresent !== undefined && !trainingStore.addTableActive ?\n                    (\n                        <TableContainer id='scrollableTable' elevation={0} component={Paper} classes={{ root: classes.tableRoot }} style={{\n                            maxHeight: allowTabularFeedback() ? '80%' : '100%', borderTop: 'solid 1px lightGray', width: '98%'\n                        }} >\n                            <Table className={classes.table} aria-label=\"simple table\" stickyHeader style={{ width: 'calc(100% - 1vw)' }}>\n                                {renderTableDataHead()}\n                                <TableBody>\n                                    {renderTableBody()}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    ) : <div className='rowFlex fullWidth flexCenter'>\n                        <div>\n                            <br />\n                            <br />\n                            <div className='xsFont'>No table detected</div><br />\n                            <div className='rowFlex flexCenter'>\n                                {props.disableTableEdit ? null : <SimpleButton label={'Add Table'} disabled={trainingStore.addTableActive} onClick={() => addNewTable(0)} style={{ marginLeft: '0' }} />}\n                            </div>\n                            <div className='rowFlex flexCenter'>\n                                {props.disableTableEdit || (trainingDoc && trainingDoc.pageArray && trainingDoc.pageArray.length) === 1 ? null : <SimpleButton label={'Add Table - Extended'} disabled={trainingStore.addTableActive} onClick={() => addNewTable(1)} style={{ marginLeft: '0' }} />}\n                            </div>\n                            <br />\n                            {props.disableTableEdit ? null : (trainingStore.initialTablePresent ? <div className='sFont pointer underline' onClick={openResetDialog}>Reset Tabular Data</div> : null)}\n                        </div>\n                    </div>}\n                <CustomDialog\n                    title='Reset Table'\n                    message={<div>This will reset tabular data to the original state. <br /> Are you sure you want to proceed?</div>}\n                    open={resetOpen}\n                    cancel={cancelReset}\n                    submit={confirmReset}\n                    labelYes='Yes'\n                    labelNo='No'\n                />\n                <TabularFormAction highlightTable={props.highlightTable} showBorder={allowTableEdit && currentPage.tabularContent && currentPage.tabularContent.length && currentPage.tabularContent[0].data && currentPage.tabularContent[0].data.length} />\n                <TableOptions contextMenu={contextMenu} handleClose={handleClose} insertRow={insertRow} deleteRow={deleteRow} />\n            </div>\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/>",
                    "/>",
                    "/div><br",
                    "/>",
                    "/>}",
                    "/div>",
                    "/>}",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>}",
                    "/>",
                    "/div>}",
                    "/>",
                    "/>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "clearData",
                "method_begin": "const clearData = () => {",
                "method_end": "}",
                "range": [
                    469,
                    472
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeSpacesFromData",
                "method_begin": "const removeSpacesFromData = () => {",
                "method_end": "}",
                "range": [
                    474,
                    477
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "switchColumnData",
                "method_begin": "const switchColumnData = (newMapping) => {",
                "method_end": "}",
                "range": [
                    479,
                    483
                ],
                "parameters": [
                    "newMapping"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeColumnMenu",
                "method_begin": "const closeColumnMenu = () => {",
                "method_end": "}",
                "range": [
                    485,
                    487
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateColumn",
                "method_begin": "const validateColumn = (e, text) => {",
                "method_end": "}",
                "range": [
                    489,
                    492
                ],
                "parameters": [
                    "e",
                    "text"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableDataHead",
                "method_begin": "const renderTableDataHead = () => {",
                "method_end": "}",
                "range": [
                    494,
                    543
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n                    <TableCell key={'headertablesno'} className={classes.tableHeader} style={{\n                        maxWidth: '4vw', position: \"sticky\",\n                        left: 0,\n                        background: \"white\",\n                        boxShadow: 'lightGray -1px 0px 1px 0px inset, lightGray 0px 0px 0px 0px inset',\n                        zIndex: \"999\"\n                    }} align=\"left\">\n                        <div className={classes.overflowHeader}>S. No.</div>\n                    </TableCell>\n                    {\n                        table.mappedColumns && table.mappedColumns.length && table.mappedColumns.map((row, index) => (\n                            (\n                                <TableCell key={'headertable' + index} className={classes.tableHeader} align=\"left\" >\n                                    <div onClick={(e) => props.disableTableEdit ? undefined : setMenuElement({ el: e.currentTarget, columnName: row.text, columnMatch: row.mappedColumn })} className={`${classes.overflowHeader} rowFlex `} style={{ width: (row.colWidth * 8), minWidth: '10vw' }}>\n                                        <div>{row.text}</div>&nbsp;&nbsp;&nbsp;\n                                        {props.disableTableEdit ? null : <div className='colFlex flexCenter'><SvgIcon src={Images.dropDown} style={'width:10;height:10'} /></div>}&nbsp;&nbsp;\n                                        {props.disableTableEdit || !table.numericColumns.includes(row && row.text) ? null : <div className='colFlex flexCenter' data-for='validateColumn' data-tip='validateColumn' onClick={(e) => validateColumn(e, row.text)}><SvgIcon src={Images.validate} style={'width:12;height:12'} /></div>}\n\n                                    </div>\n                                </TableCell>\n                            )\n                        ))\n                    }\n                </TableRow>\n                <ColumnMenu menuEl={menuEl && menuEl.el}\n                    matchCol={menuEl && menuEl.columnMatch}\n                    setMenuElement={setMenuElement}\n                    clearData={clearData}\n                    removeSpacesFromData={removeSpacesFromData}\n                    switchColumnData={switchColumnData}\n                    columnName={menuEl && menuEl.columnName}\n                    close={closeColumnMenu}\n                    disableAll={props.disableTableEdit}\n                    highlightTableField={props.highlightTableField}\n                />\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/TableCell>",
                    "/div>&nbsp;&nbsp;&nbsp;",
                    "/></div>}&nbsp;&nbsp;",
                    "/></div>}",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onPressEnter",
                "method_begin": "const onPressEnter = (e) => {",
                "method_end": "}",
                "range": [
                    545,
                    549
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getConfidenceBorder",
                "method_begin": "const getConfidenceBorder = (cell, row) => {",
                "method_end": "}",
                "range": [
                    551,
                    571
                ],
                "parameters": [
                    "cell",
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "'' | 'solid red' | 'solid #ff7000' | 'solid #ff7000' | 'solid #ff7000' | ''",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableBody",
                "method_begin": "const renderTableBody = () => {",
                "method_end": "}",
                "range": [
                    573,
                    628
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExpandedTableData.js",
                "returnType": "(\n                <TableRow className={classes.tableRow}  >\n                    <TableCell key={'cellsno'} colSpan={(trainingDoc.table_columns && trainingDoc.table_columns.length) + 1} classes={{ root: classes.tableCell }} align=\"left\" >\n                        <SimpleButton label='Add line item' onClick={trainingStore.addNewRow} />\n                    </TableCell>\n\n                </TableRow>\n            ) | (\n            trainingDoc.pageArray.map((eachPage, index) => (\n                eachPage.tabularContent && eachPage.tabularContent.map((table, tableIndex) => (\n                    table.table_id === trainingDoc.tablePresent ?\n                        table.data && table.data.map((item, tIndex) => {\n                            lastIndex = lastIndex + 1\n                            return (\n                                <TableRow key={tIndex + 'tabular'} className={classes.tableRow} style={{ borderTop: tIndex === 0 && index > 0 ? 'solid 2px black' : '' }} >\n                                    <TableCell key={'cellsno'} classes={{ root: classes.tableCell }} align=\"left\" onContextMenu={(e) => handleContextMenu(e, index, tableIndex, tIndex, eachPage.pageNo)} style={{\n                                        cursor: 'context-menu', position: \"sticky\",\n                                        left: 0,\n                                        background: \"white\",\n                                        boxShadow: 'lightGray -1px 0px 1px 0px inset, lightGray 0px 0px 0px 0px inset'\n                                    }}>{lastIndex} </TableCell>                                    {\n                                        item.map((cell, cellIndex) => {\n                                            return (\n                                                <TableCell key={'cell' + cellIndex} classes={{ root: classes.tableCell }} align=\"left\"\n                                                    style={{\n                                                        border: table.numericColumns.includes(cell && cell.column)\n                                                            ? ((!NUMERIC_REGEX.test(Number(cell && cell.text)) && ((cell && cell.text) !== '')) ? 'solid red' : getConfidenceBorder(cell, item)) : getConfidenceBorder(cell, item)\n                                                    }}\n                                                >\n                                                    <div className={classes.tableCellData}\n                                                        style={{ border: (trainingStore.activeTableField.cellIndex === cellIndex && trainingStore.activeTableField.tableIndex === tableIndex && trainingStore.activeTableField.dataIndex === tIndex && trainingStore.activeTableField.pageIndex === index) ? (columnActive === cell.column ? 'solid 2px #157fff' : 'solid 2px') : (columnActive === cell.column ? 'solid 2px #157fff' : ''), backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white') }}>\n                                                        <textarea className={`expandpage${index}table${tableIndex}data${tIndex}cell${cellIndex}`} cols='100' onClick={() => setActiveTableField(eachPage.pageNo, cellIndex, tIndex, tableIndex, index)} disabled={columnActive !== undefined ? (columnActive !== cell.column) : false} onChange={(e) => handleTableDataChange(eachPage.pageNo, e.target.value, cellIndex, tIndex, tableIndex)} value={cell && cell.text} style={{ border: 'none', width: '100%', maxWidth: '100%', boxShadow: 'none', outline: 'none', backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white'), cursor: props.disableTableEdit ? 'pointer' : 'initial', caretColor: props.disableTableEdit ? 'transparent' : 'initial' }} />\n                                                    </div>\n                                                </TableCell>)\n                                        })\n                                    }\n                                </TableRow>\n                            )\n                        })\n                        : null\n                ))\n            ))\n        ) | (\n                                <TableRow key={tIndex + 'tabular'} className={classes.tableRow} style={{ borderTop: tIndex === 0 && index > 0 ? 'solid 2px black' : '' }} >\n                                    <TableCell key={'cellsno'} classes={{ root: classes.tableCell }} align=\"left\" onContextMenu={(e) => handleContextMenu(e, index, tableIndex, tIndex, eachPage.pageNo)} style={{\n                                        cursor: 'context-menu', position: \"sticky\",\n                                        left: 0,\n                                        background: \"white\",\n                                        boxShadow: 'lightGray -1px 0px 1px 0px inset, lightGray 0px 0px 0px 0px inset'\n                                    }}>{lastIndex} </TableCell>                                    {\n                                        item.map((cell, cellIndex) => {\n                                            return (\n                                                <TableCell key={'cell' + cellIndex} classes={{ root: classes.tableCell }} align=\"left\"\n                                                    style={{\n                                                        border: table.numericColumns.includes(cell && cell.column)\n                                                            ? ((!NUMERIC_REGEX.test(Number(cell && cell.text)) && ((cell && cell.text) !== '')) ? 'solid red' : getConfidenceBorder(cell, item)) : getConfidenceBorder(cell, item)\n                                                    }}\n                                                >\n                                                    <div className={classes.tableCellData}\n                                                        style={{ border: (trainingStore.activeTableField.cellIndex === cellIndex && trainingStore.activeTableField.tableIndex === tableIndex && trainingStore.activeTableField.dataIndex === tIndex && trainingStore.activeTableField.pageIndex === index) ? (columnActive === cell.column ? 'solid 2px #157fff' : 'solid 2px') : (columnActive === cell.column ? 'solid 2px #157fff' : ''), backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white') }}>\n                                                        <textarea className={`expandpage${index}table${tableIndex}data${tIndex}cell${cellIndex}`} cols='100' onClick={() => setActiveTableField(eachPage.pageNo, cellIndex, tIndex, tableIndex, index)} disabled={columnActive !== undefined ? (columnActive !== cell.column) : false} onChange={(e) => handleTableDataChange(eachPage.pageNo, e.target.value, cellIndex, tIndex, tableIndex)} value={cell && cell.text} style={{ border: 'none', width: '100%', maxWidth: '100%', boxShadow: 'none', outline: 'none', backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white'), cursor: props.disableTableEdit ? 'pointer' : 'initial', caretColor: props.disableTableEdit ? 'transparent' : 'initial' }} />\n                                                    </div>\n                                                </TableCell>)\n                                        })\n                                    }\n                                </TableRow>\n                            ) | (\n                                                <TableCell key={'cell' + cellIndex} classes={{ root: classes.tableCell }} align=\"left\"\n                                                    style={{\n                                                        border: table.numericColumns.includes(cell && cell.column)\n                                                            ? ((!NUMERIC_REGEX.test(Number(cell && cell.text)) && ((cell && cell.text) !== '')) ? 'solid red' : getConfidenceBorder(cell, item)) : getConfidenceBorder(cell, item)\n                                                    }}\n                                                >\n                                                    <div className={classes.tableCellData}\n                                                        style={{ border: (trainingStore.activeTableField.cellIndex === cellIndex && trainingStore.activeTableField.tableIndex === tableIndex && trainingStore.activeTableField.dataIndex === tIndex && trainingStore.activeTableField.pageIndex === index) ? (columnActive === cell.column ? 'solid 2px #157fff' : 'solid 2px') : (columnActive === cell.column ? 'solid 2px #157fff' : ''), backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white') }}>\n                                                        <textarea className={`expandpage${index}table${tableIndex}data${tIndex}cell${cellIndex}`} cols='100' onClick={() => setActiveTableField(eachPage.pageNo, cellIndex, tIndex, tableIndex, index)} disabled={columnActive !== undefined ? (columnActive !== cell.column) : false} onChange={(e) => handleTableDataChange(eachPage.pageNo, e.target.value, cellIndex, tIndex, tableIndex)} value={cell && cell.text} style={{ border: 'none', width: '100%', maxWidth: '100%', boxShadow: 'none', outline: 'none', backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white'), cursor: props.disableTableEdit ? 'pointer' : 'initial', caretColor: props.disableTableEdit ? 'transparent' : 'initial' }} />\n                                                    </div>\n                                                </TableCell>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableCell>",
                    "/>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExternalDataInput.js": {
        "method_details_": [
            {
                "method_name": "setChangedValue",
                "method_begin": "const setChangedValue = (val) => {",
                "method_end": "}",
                "range": [
                    128,
                    143
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExternalDataInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "filterOptions",
                "method_begin": "const filterOptions = (options, state) => {",
                "method_end": "};",
                "range": [
                    148,
                    233
                ],
                "parameters": [
                    "options",
                    "state"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExternalDataInput.js",
                "returnType": "a | results | results | results",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkVendorError",
                "method_begin": "const checkVendorError = () => {",
                "method_end": "}",
                "range": [
                    236,
                    248
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExternalDataInput.js",
                "returnType": "matching | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "displayOption",
                "method_begin": "const displayOption = (val, type) => {",
                "method_end": "}",
                "range": [
                    250,
                    275
                ],
                "parameters": [
                    "val",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ExternalDataInput.js",
                "returnType": "str",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/FuzzyResults.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/KeyInput.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/MultiTabMessage.js": {
        "method_details_": [
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    63,
                    68
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/MultiTabMessage.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-qc/page/1/${(props.location.appState",
                    "/home/document-api/page/1/${(props.location.appState"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/MultipleTabsRestriction.js": {
        "method_details_": [
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    82,
                    88
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/MultipleTabsRestriction.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-qc/page/1/${type}",
                    "/home/document-api/page/1/${type}"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/PageRangeInput.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    24,
                    49
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/PageRangeInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*if"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onPageChange",
                "method_begin": "const onPageChange = (val, type) => {",
                "method_end": "}",
                "range": [
                    51,
                    69
                ],
                "parameters": [
                    "val",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/PageRangeInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    76,
                    81
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/PageRangeInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ResponsiveDrawer.js": {
        "method_details_": [
            {
                "method_name": "styles",
                "method_begin": "const styles = theme => ({",
                "method_end": "});",
                "range": [
                    9,
                    61
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ResponsiveDrawer.js",
                "returnType": "({\n  root: {\n    flexGrow: 1,\n    height: 430,\n    zIndex: 1,\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    width: '100%'\n  },\n  zoomDrawer: {\n    position: 'absolute !important',\n    // width: '40% !important',\n    height: '100%'\n  },\n  appBar: {\n    position: 'absolute',\n    marginLeft: drawerWidth,\n    [theme.breakpoints.up('md')]: {\n      width: `calc(100% - ${drawerWidth}px)`\n    }\n  },\n  navIconHide: {\n    [theme.breakpoints.up('md')]: {\n      display: 'none'\n    }\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n    marginRight: '1vh',\n    [theme.breakpoints.up('md')]: {\n      position: 'relative'\n    }\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing.unit * 3\n  },\n  dragger: {\n    width: '5px',\n    cursor: 'ew-resize',\n    padding: '4px 0 0',\n    borderTop: '1px solid #ddd',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    zIndex: '100',\n    backgroundColor: '#f4f7f9'\n  }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount()",
                "method_end": "document.addEventListener('mouseup', e => this.handleMouseup(e));",
                "range": [
                    103,
                    109
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ResponsiveDrawer.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    109,
                    159
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/ResponsiveDrawer.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "//",
                    "/>",
                    "/Drawer>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/RightContext.js": {
        "method_details_": [
            {
                "method_name": "useContextMenu",
                "method_begin": "const useContextMenu = () => {",
                "method_end": "};",
                "range": [
                    3,
                    22
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/RightContext.js",
                "returnType": "() => {\n      document.removeEventListener(\"click\", handleClick);\n    } | {\n    clicked,\n    setClicked,\n    points,\n    setPoints,\n  }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleClick",
                "method_begin": "const handleClick = () => setClicked(false);",
                "method_end": "const handleClick = () => setClicked(false);",
                "range": [
                    10,
                    10
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/RightContext.js",
                "returnType": "setClicked(false)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableActions.js": {
        "method_details_": [
            {
                "method_name": "cancelSubmit",
                "method_begin": "const cancelSubmit = () => {",
                "method_end": "}",
                "range": [
                    44,
                    46
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelConfirm",
                "method_begin": "const cancelConfirm = () => {",
                "method_end": "}",
                "range": [
                    48,
                    50
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSubmit",
                "method_begin": "const onSubmit = (finalSubmit, autoSave, next) => {",
                "method_end": "}",
                "range": [
                    53,
                    106
                ],
                "parameters": [
                    "finalSubmit",
                    "autoSave",
                    "next"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/incomplete.",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmSubmit",
                "method_begin": "const confirmSubmit = () => {",
                "method_end": "}",
                "range": [
                    109,
                    115
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    117,
                    157
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableActions.js",
                "returnType": "errors",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    159,
                    164
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/home/document/batch/${batchId}/bucket/${bucketId}/page/${documentListStore.pageNo}",
                    "/home/document/page/1/batch/${batchId}/rejected"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderSubmitButton",
                "method_begin": "const renderSubmitButton = () => {",
                "method_end": "}",
                "range": [
                    166,
                    188
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableActions.js",
                "returnType": "null | null | (\n                    <div ><SimpleButton progress={trainingStore.editProgress} style={{ marginLeft: '0vw' }} label={'Submit'} onClick={(e) => onSubmit(true, false, false)} /></div>\n                ) | null | (\n                    <div ><SimpleButton progress={trainingStore.editProgress} style={{ marginLeft: '0vw' }} label={'Submit'} onClick={(e) => onSubmit(true, false, false)} /></div>\n                ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/></div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableDrawActions.js": {
        "method_details_": [
            {
                "method_name": "extractTableData",
                "method_begin": "const extractTableData = () => {",
                "method_end": "}",
                "range": [
                    50,
                    60
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableDrawActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteTable",
                "method_begin": "const deleteTable = () => {",
                "method_end": "}",
                "range": [
                    62,
                    70
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableDrawActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteTable",
                "method_begin": "const confirmDeleteTable = (type) => {",
                "method_end": "}",
                "range": [
                    72,
                    76
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableDrawActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDeleteTable",
                "method_begin": "const cancelDeleteTable = () => {",
                "method_end": "}",
                "range": [
                    78,
                    80
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableDrawActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "editTable",
                "method_begin": "const editTable = () => {",
                "method_end": "}",
                "range": [
                    85,
                    90
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableDrawActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//if"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmReset",
                "method_begin": "const confirmReset = () => {",
                "method_end": "}",
                "range": [
                    92,
                    95
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableDrawActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openResetDialog",
                "method_begin": "const openResetDialog = () => {",
                "method_end": "}",
                "range": [
                    97,
                    100
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableDrawActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelReset",
                "method_begin": "const cancelReset = () => {",
                "method_end": "}",
                "range": [
                    102,
                    104
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableDrawActions.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDataFields",
                "method_begin": "const renderDataFields = () => {",
                "method_end": "}",
                "range": [
                    106,
                    167
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableDrawActions.js",
                "returnType": "(\n            dataFields.map((row, i) => (\n                row === null ? null :\n                    (\n                        <div id={row.id} key={row.id}\n                            className={'xcontouredField'}\n                            style={{\n                                height: row.h + 'px',\n                                width: row.w + 'px',\n                                position: 'absolute',\n                                left: row.x + 'px',\n                                top: row.y + 'px',\n                                cursor: 'pointer',\n                                borderWidth: row.borderWidth,\n                                backgroundColor: 'transparent',\n                                visibility: 'hidden'\n                            }}> </div>\n                    )\n            ))\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableOptions.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableRector.js": {
        "method_details_": [
            {
                "method_name": "onSelected",
                "method_begin": 820,
                "method_end": 849,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableRector.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount(props)",
                "method_end": "this.addMouseEvents()",
                "range": [
                    192,
                    214
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidUpdate",
                "method_begin": "componentDidUpdate(prevProps)",
                "method_end": "this.removeMouseEvents()",
                "range": [
                    261,
                    336
                ],
                "parameters": [
                    "prevProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.calculateResizedValues(prevProps,",
                    "//zoom"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillUnmount",
                "method_begin": "componentWillUnmount()",
                "method_end": "this.removeMouseEvents()",
                "range": [
                    502,
                    507
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillReceiveProps",
                "method_begin": "componentWillReceiveProps(nextProps)",
                "method_end": "this.highlightValues(nextProps, nextProps.trainingImageStore.focusOnPoint.zoom)",
                "range": [
                    507,
                    520
                ],
                "parameters": [
                    "nextProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.calculateResizedValues(nextProps,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addMouseEvents",
                "method_begin": "addMouseEvents()",
                "method_end": "this.canvas.addEventListener('mousedown', this.onMouseDown, false);",
                "range": [
                    666,
                    677
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeMouseEvents",
                "method_begin": "removeMouseEvents()",
                "method_end": "this.canvas.removeEventListener('mousedown', this.onMouseDown, false);",
                "range": [
                    677,
                    686
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    1455,
                    1498
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "//",
                    "//",
                    "/canvas>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js": {
        "method_details_": [
            {
                "method_name": "drawTable",
                "method_begin": "const drawTable = () => {",
                "method_end": "}",
                "range": [
                    138,
                    147
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onWheelCapture",
                "method_begin": "const onWheelCapture = (e) => {",
                "method_end": "}",
                "range": [
                    149,
                    162
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onWheelCapture1",
                "method_begin": "const onWheelCapture1 = (e) => {",
                "method_end": "}",
                "range": [
                    163,
                    176
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteAndRedraw",
                "method_begin": "const deleteAndRedraw = (type, extend) => {",
                "method_end": "}",
                "range": [
                    178,
                    184
                ],
                "parameters": [
                    "type",
                    "extend"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//confirmDeleteTable(type"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "drawFromPayload",
                "method_begin": "const drawFromPayload = (payload) => {",
                "method_end": "}",
                "range": [
                    186,
                    193
                ],
                "parameters": [
                    "payload"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setNewData",
                "method_begin": "const setNewData = (data, shiftPress) => {",
                "method_end": "}",
                "range": [
                    195,
                    199
                ],
                "parameters": [
                    "data",
                    "shiftPress"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "extractTableData",
                "method_begin": "const extractTableData = () => {",
                "method_end": "}",
                "range": [
                    201,
                    288
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div><br",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeErrorDialog",
                "method_begin": "const closeErrorDialog = () => {",
                "method_end": "}",
                "range": [
                    290,
                    292
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteTable",
                "method_begin": "const deleteTable = () => {",
                "method_end": "}",
                "range": [
                    294,
                    302
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteTable",
                "method_begin": "const confirmDeleteTable = (type) => {",
                "method_end": "}",
                "range": [
                    304,
                    312
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDeleteTable",
                "method_begin": "const cancelDeleteTable = () => {",
                "method_end": "}",
                "range": [
                    314,
                    316
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "editTable",
                "method_begin": "const editTable = () => {",
                "method_end": "}",
                "range": [
                    318,
                    326
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//if"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmReset",
                "method_begin": "const confirmReset = () => {",
                "method_end": "}",
                "range": [
                    328,
                    336
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openResetDialog",
                "method_begin": "const openResetDialog = () => {",
                "method_end": "}",
                "range": [
                    338,
                    341
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelReset",
                "method_begin": "const cancelReset = () => {",
                "method_end": "}",
                "range": [
                    343,
                    345
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "autofillColumn",
                "method_begin": "const autofillColumn = () => {",
                "method_end": "}",
                "range": [
                    389,
                    392
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelAddTable",
                "method_begin": "const cancelAddTable = () => {",
                "method_end": "}",
                "range": [
                    394,
                    397
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmPageRangeUpdate",
                "method_begin": "const confirmPageRangeUpdate = (start, end) => {",
                "method_end": "}",
                "range": [
                    399,
                    410
                ],
                "parameters": [
                    "start",
                    "end"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableTest.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableValueRector.js": {
        "method_details_": [
            {
                "method_name": "onSelected",
                "method_begin": 825,
                "method_end": 854,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableValueRector.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount(props)",
                "method_end": "this.addMouseEvents()",
                "range": [
                    189,
                    210
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableValueRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidUpdate",
                "method_begin": "componentDidUpdate(prevProps)",
                "method_end": "this.removeMouseEvents()",
                "range": [
                    258,
                    333
                ],
                "parameters": [
                    "prevProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableValueRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.calculateResizedValues(prevProps,",
                    "//zoom"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillUnmount",
                "method_begin": "componentWillUnmount()",
                "method_end": "this.removeMouseEvents()",
                "range": [
                    499,
                    503
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableValueRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillReceiveProps",
                "method_begin": "componentWillReceiveProps(nextProps)",
                "method_end": "this.highlightValues(nextProps, this.props.trainingImageStore.focusOnPoint.zoom)",
                "range": [
                    503,
                    511
                ],
                "parameters": [
                    "nextProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableValueRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.calculateResizedValues(nextProps,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addMouseEvents",
                "method_begin": "addMouseEvents()",
                "method_end": "this.canvas.addEventListener('mousedown', this.onMouseDown, false);",
                "range": [
                    643,
                    654
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableValueRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeMouseEvents",
                "method_begin": "removeMouseEvents()",
                "method_end": "this.canvas.removeEventListener('mousedown', this.onMouseDown, false);",
                "range": [
                    654,
                    663
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableValueRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    1221,
                    1274
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TableValueRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "//",
                    "//",
                    "/canvas>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/*<TrainingPopup",
                    "/>*/}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularFormAction.js": {
        "method_details_": [
            {
                "method_name": "onSubmit",
                "method_begin": "const onSubmit = (finalSubmit, autoSave, next) => {",
                "method_end": "}",
                "range": [
                    29,
                    34
                ],
                "parameters": [
                    "finalSubmit",
                    "autoSave",
                    "next"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularFormAction.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmSubmit",
                "method_begin": "const confirmSubmit = () => {",
                "method_end": "}",
                "range": [
                    36,
                    38
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularFormAction.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelSubmit",
                "method_begin": "const cancelSubmit = () => {",
                "method_end": "}",
                "range": [
                    40,
                    42
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularFormAction.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addColumnsAndRows",
                "method_begin": "const addColumnsAndRows = (type) => {",
                "method_end": "}",
                "range": [
                    47,
                    74
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularFormAction.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetHighlight",
                "method_begin": "const resetHighlight = () => {",
                "method_end": "}",
                "range": [
                    76,
                    78
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularFormAction.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fitPage",
                "method_begin": "const fitPage = () => {",
                "method_end": "}",
                "range": [
                    80,
                    83
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularFormAction.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "highlightTable",
                "method_begin": "const highlightTable = () => {",
                "method_end": "}",
                "range": [
                    85,
                    88
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularFormAction.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "allowTabularFeedback",
                "method_begin": "const allowTabularFeedback = () => {",
                "method_end": "}",
                "range": [
                    90,
                    100
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularFormAction.js",
                "returnType": "giveTabularFeedback",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "highlightColumnsAndRows",
                "method_begin": "const highlightColumnsAndRows = (type) => {",
                "method_end": "}",
                "range": [
                    102,
                    118
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularFormAction.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularRector.js": {
        "method_details_": [
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount()",
                "method_end": "setTimeout(() => { this.highlightAllFields() }, 100)",
                "range": [
                    20,
                    36
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    98,
                    118
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TabularRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/Scrollbars>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingDoc.js": {
        "method_details_": [
            {
                "method_name": "componentWillUnmount",
                "method_begin": "componentWillUnmount()",
                "method_end": "window.removeEventListener('beforeunload', this.componentCleanup);",
                "range": [
                    116,
                    121
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingDoc.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount()",
                "method_end": "this.props.trainingStore.closeDocumentDrawer()",
                "range": [
                    134,
                    199
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingDoc.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetHighlight",
                "method_begin": "resetHighlight(reset)",
                "method_end": "this.props.trainingImageStore.eraseDrawPoint();",
                "range": [
                    451,
                    460
                ],
                "parameters": [
                    "reset"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingDoc.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    561,
                    680
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingDoc.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/*",
                    "/>",
                    "/>",
                    "/>",
                    "/>",
                    "/>",
                    "/></div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/SizeMe>",
                    "/div>",
                    "/TrainingForm>",
                    "/div>",
                    "/></div>",
                    "/AnimatedDiv>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "MyTimer",
                "method_begin": "function MyTimer(props)",
                "method_end": ");",
                "range": [
                    682,
                    709
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingDoc.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingField.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    218,
                    288
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingField.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "//onBlur={(",
                    "//endAdornment:",
                    "/></InputAdornment>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/LightTooltip>",
                    "/div>&nbsp;&nbsp;",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/ReactTooltip>}",
                    "/div>",
                    "/>",
                    "/></div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js": {
        "method_details_": [
            {
                "method_name": "cancelTotalSubmit",
                "method_begin": "const cancelTotalSubmit = () => {",
                "method_end": "}",
                "range": [
                    64,
                    67
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelSubmit",
                "method_begin": "const cancelSubmit = () => {",
                "method_end": "}",
                "range": [
                    69,
                    95
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelConfirm",
                "method_begin": "const cancelConfirm = () => {",
                "method_end": "}",
                "range": [
                    97,
                    99
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateTableData",
                "method_begin": "const validateTableData = () => {",
                "method_end": "}",
                "range": [
                    101,
                    124
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "errorField",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSubmit",
                "method_begin": "const onSubmit = (finalSubmit, autoSave, next, checkTotal) => {",
                "method_end": "}",
                "range": [
                    127,
                    245
                ],
                "parameters": [
                    "finalSubmit",
                    "autoSave",
                    "next",
                    "checkTotal"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//setSubmit(true",
                    "//",
                    "//",
                    "//",
                    "/*if",
                    "/*if",
                    "/incomplete.",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/><br",
                    "/></div>",
                    "//",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmTotalSubmit",
                "method_begin": "const confirmTotalSubmit = () => {",
                "method_end": "}",
                "range": [
                    247,
                    312
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "/*if",
                    "/*if",
                    "/incomplete.",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/><br",
                    "/></div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmSubmit",
                "method_begin": "const confirmSubmit = (forced, reason) => {",
                "method_end": "}",
                "range": [
                    315,
                    455
                ],
                "parameters": [
                    "forced",
                    "reason"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//Removing",
                    "//trainingStore.saveTrainingDetails(trainingDoc._id,",
                    "//markListingStore.getBatchDetail(props.match.params[",
                    "/home/training/qc/${props.match.params[",
                    "/batch/${data.idpId}/${data.fileName}${additionalPath}",
                    "/home/training/ocr/${props.match.params[",
                    "/batch/${data.idpId}/${data.fileName}${additionalPath}",
                    "/home/training/${props.match.params[",
                    "/batch/${data.idpId}/${data.fileName}${additionalPath}",
                    "/home/document-qc/page/1/creview${additionalPath}",
                    "/home/document-training/page/1/creview${additionalPath}",
                    "/home/document-api/page/1/creview${additionalPath}",
                    "/home/training/qc/${props.match.params[",
                    "/batch/${props.match.params[",
                    "/${props.match.params[",
                    "/${allPages[i]._id}${additionalPath}",
                    "/home/training/ocr/${props.match.params[",
                    "/batch/${props.match.params[",
                    "/${props.match.params[",
                    "/${allPages[i]._id}${additionalPath}",
                    "/home/training/${props.match.params[",
                    "/batch/${props.match.params[",
                    "/${props.match.params[",
                    "/${allPages[i]._id}${additionalPath}",
                    "/home/training/qc/${props.match.params[",
                    "/batch/${props.match.params[",
                    "/${props.match.params[",
                    "/${allPages[newInd]._id}${additionalPath}",
                    "/home/training/ocr/${props.match.params[",
                    "/batch/${props.match.params[",
                    "/${props.match.params[",
                    "/${allPages[newInd]._id}${additionalPath}",
                    "/home/training/${props.match.params[",
                    "/batch/${props.match.params[",
                    "/${props.match.params[",
                    "/${allPages[newInd]._id}${additionalPath}",
                    "/home/document-qc/page/1/${type}${additionalPath}",
                    "/home/document-training/page/1/${type}${additionalPath}",
                    "/home/document-api/page/1/${type}${additionalPath}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFieldsForDatatype",
                "method_begin": "const validateFieldsForDatatype = (checkTotal) => {",
                "method_end": "}",
                "range": [
                    458,
                    590
                ],
                "parameters": [
                    "checkTotal"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "{ errorFields: errFields, fields: fieldsWithError, numericError: numericError, vendorError, totalError }",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/DD/YYYY",
                    "/DD/YYYY",
                    "/*",
                    "/*",
                    "/DD/YYYY",
                    "/DD/YYYY"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    592,
                    641
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "errors",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    643,
                    658
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-qc/page/1/${type}${additionalPath}",
                    "/home/document-training/page/1/${type}${additionalPath}",
                    "/home/document-api/page/1/${type}${additionalPath}",
                    "//Commenting",
                    "//props.history.push(",
                    "/home/document-api/page/1/batch/${batchId}/${type}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderSubmitButton",
                "method_begin": "const renderSubmitButton = () => {",
                "method_end": "}",
                "range": [
                    661,
                    675
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "null | (\n            (props.match.params['type'] === 'completed' || trainingDoc.qcStatus === 'COMPLETED' || (trainingDoc.qcStatus === 'ASSIGNED_SUPERVISOR' && qcType !== 'qc')) ? null : (\n                roleAccess.justAdmin.findIndex(x => (userStore.user && userStore.user.role) === x) > -1 || qcType == 'qc' ?\n                    <div style={{ zIndex: '1500' }} className='colFlex flexCenter' ><SimpleButton progress={trainingStore.editProgress} disabled={trainingStore.saveProgress} style={{ marginLeft: '0vw' }} label={(type === 'review' || type === 'creview') && (trainingDoc.status === 'UPLOADED' || (qcType == 'qc' && trainingDoc.status === 'IN_REVIEW')) ? 'Submit' : 'Submit'} onClick={(e) => onSubmit(true, false, false, true)} /></div>\n                    : (\n                        type === 'creview' && trainingDoc.qcStatus !== 'COMPLETED' ?\n                            <div style={{ zIndex: '1500' }} className='colFlex flexCenter'><SimpleButton progress={trainingStore.editProgress} disabled={trainingStore.saveProgress} style={{ marginLeft: '0vw' }} label={'Submit'} onClick={(e) => onSubmit(true, false, false, true)} /></div> : null\n                    )\n            )\n        ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/></div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderAutoSaveButton",
                "method_begin": "const renderAutoSaveButton = () => {",
                "method_end": "}",
                "range": [
                    677,
                    691
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "null | (\n            (props.match.params['type'] === 'completed' || trainingDoc.qcStatus === 'COMPLETED' || (trainingDoc.qcStatus === 'ASSIGNED_SUPERVISOR' && qcType !== 'qc')) ? null : (\n                roleAccess.supervisor.findIndex(x => (userStore.user && userStore.user.role) === x) > -1 || qcType == 'qc' ?\n                    <div style={{ zIndex: '1500', marginRight: '1vw' }} ><SimpleButton progress={trainingStore.saveProgress} style={{ marginLeft: '0vw' }} label={(type === 'review' || type === 'creview') && (trainingDoc.status === 'UPLOADED' || (qcType == 'qc' && trainingDoc.status === 'IN_REVIEW')) ? 'Save Progress' : 'Save Progress'} onClick={(e) => trainingStore.saveTrainingDetails(trainingDoc._id, false, 'Document saved successfully')} /></div>\n                    : (\n                        type === 'creview' && trainingDoc.qcStatus !== 'COMPLETED' ?\n                            <div style={{ zIndex: '1500', marginRight: '1vw' }} ><SimpleButton progress={trainingStore.saveProgress} style={{ marginLeft: '0vw' }} label={'Save Progress'} onClick={(e) => trainingStore.saveTrainingDetails(trainingDoc._id, false, 'Document saved successfully')} /></div> : null\n                    )\n            )\n        ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/></div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelClassification",
                "method_begin": "const cancelClassification = () => {",
                "method_end": "}",
                "range": [
                    694,
                    702
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelSubmitClassification",
                "method_begin": "const cancelSubmitClassification = () => {",
                "method_end": "}",
                "range": [
                    704,
                    708
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getNewData1",
                "method_begin": "const getNewData1 = (pages, fileLabel, finalSubmit) => {",
                "method_end": "}",
                "range": [
                    711,
                    785
                ],
                "parameters": [
                    "pages",
                    "fileLabel",
                    "finalSubmit"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "null | newData | newData",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getNewData",
                "method_begin": "const getNewData = (pages, fileLabel, finalSubmit) => {",
                "method_end": "}",
                "range": [
                    787,
                    889
                ],
                "parameters": [
                    "pages",
                    "fileLabel",
                    "finalSubmit"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "null | newData | newData",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCounts",
                "method_begin": "const getCounts = (data) => {",
                "method_end": "}",
                "range": [
                    891,
                    910
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "(\n            <div>\n                <div>{`${fileDetails && fileDetails.uploadedDocType} - ${inv}`}</div>\n                <div>{`Supporting Documents - ${sup}`}</div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCountsNew",
                "method_begin": "const getCountsNew = (data, type) => {",
                "method_end": "}",
                "range": [
                    912,
                    977
                ],
                "parameters": [
                    "data",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "getCounts(data) | (\n                <div>\n                    <div>{`${fileDetails.uploadedDocType === 'Invoices Custom' ? 'Invoices' : 'BOL'} - ${inv}`}</div>\n                    <div>{`Supporting Documents - ${sup}`}</div>\n                </div>\n            ) | (\n            <div>\n                {\n                    Object.keys(tempResult).map((ob) => (\n                        <div>{`${ob} - ${tempResult[ob]}`}</div>\n                    ))\n                }\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/*",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSubmitClassificationReview",
                "method_begin": "const onSubmitClassificationReview = (noOcr) => {",
                "method_end": "}",
                "range": [
                    979,
                    1082
                ],
                "parameters": [
                    "noOcr"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "null | null | (\n                                    <div key={'oldData' + ind}>\n                                        <div className='bold'>\n                                            {pagesArr}\n                                        </div>\n                                        {getCountsNew(oldArr[`${pagesArr}`], 'old')}\n                                        <br />\n                                    </div>\n                                )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/b>,",
                    "/b>",
                    "/div><br",
                    "/>",
                    "/div>",
                    "/div><br",
                    "/>",
                    "/div>",
                    "/div><br",
                    "/>",
                    "/div><br",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div><div",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "submitTrainingClassification",
                "method_begin": "const submitTrainingClassification = () => {",
                "method_end": "}",
                "range": [
                    1084,
                    1095
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "submitClassification",
                "method_begin": "const submitClassification = () => {",
                "method_end": "}",
                "range": [
                    1097,
                    1173
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "///",
                    "//",
                    "//}",
                    "/home/training/qc/${type}/batch/${data.idpId}/${data.fileName}/${additionalPath}",
                    "/home/training/ocr/${type}/batch/${data.idpId}/${data.fileName}/${additionalPath}",
                    "/home/training/${type}/batch/${data.idpId}/${data.fileName}/${additionalPath}",
                    "/home/document-qc/page/1/${type}${additionalPath}",
                    "/home/document-training/page/1/${type}${additionalPath}",
                    "/home/document-api/page/1/${type}${additionalPath}",
                    "//",
                    "/home/document-qc/page/1/${type}${additionalPath}",
                    "/home/document-training/page/1/${type}${additionalPath}",
                    "/home/document-api/page/1/${type}${additionalPath}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmReset",
                "method_begin": "const confirmReset = () => {",
                "method_end": "}",
                "range": [
                    1175,
                    1179
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmHardReset",
                "method_begin": "const confirmHardReset = () => {",
                "method_end": "}",
                "range": [
                    1181,
                    1207
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-api/page/1/review/?batchName=${fileDetails.batchName}",
                    "/home/document-qc/page/1/review${additionalPath}",
                    "/home/document-training/page/1/review${additionalPath}",
                    "/home/document-api/page/1/review${additionalPath}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goBackToKv",
                "method_begin": "const goBackToKv = () => {",
                "method_end": "}",
                "range": [
                    1209,
                    1211
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelReset",
                "method_begin": "const cancelReset = () => {",
                "method_end": "}",
                "range": [
                    1213,
                    1216
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setOpenClassification",
                "method_begin": "const setOpenClassification = () => {",
                "method_end": "}",
                "range": [
                    1293,
                    1296
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingFooter.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js": {
        "method_details_": [
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    93,
                    98
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${batchId}/bucket/${bucketId}/page/${documentListStore.pageNo}${additionalPath}",
                    "/home/document/batch/${batchId}/bucket${additionalPath}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmReset",
                "method_begin": "const confirmReset = () => {",
                "method_end": "}",
                "range": [
                    133,
                    141
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openResetDialog",
                "method_begin": "const openResetDialog = () => {",
                "method_end": "}",
                "range": [
                    143,
                    145
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelReset",
                "method_begin": "const cancelReset = () => {",
                "method_end": "}",
                "range": [
                    147,
                    149
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "navigateExtractedValues",
                "method_begin": "const navigateExtractedValues = (type) => {",
                "method_end": "}",
                "range": [
                    152,
                    164
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "navigateTableValues",
                "method_begin": "const navigateTableValues = (type) => {",
                "method_end": "}",
                "range": [
                    166,
                    242
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "allowTabularFeedback",
                "method_begin": "const allowTabularFeedback = () => {",
                "method_end": "}",
                "range": [
                    311,
                    321
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "giveTabularFeedback",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentField",
                "method_begin": "const setCurrentField = (e, index, item, type, pgIndex) => {",
                "method_end": "}",
                "range": [
                    323,
                    359
                ],
                "parameters": [
                    "e",
                    "index",
                    "item",
                    "type",
                    "pgIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//setField(index",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTableField",
                "method_begin": "const setTableField = (item, index, cellIndex) => {",
                "method_end": "}",
                "range": [
                    362,
                    368
                ],
                "parameters": [
                    "item",
                    "index",
                    "cellIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSubmit",
                "method_begin": "const onSubmit = (finalSubmit, autoSave, next) => {",
                "method_end": "}",
                "range": [
                    370,
                    423
                ],
                "parameters": [
                    "finalSubmit",
                    "autoSave",
                    "next"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/incomplete.",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFields",
                "method_begin": "const validateFields = () => {",
                "method_end": "}",
                "range": [
                    425,
                    465
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "errors",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmSubmit",
                "method_begin": "const confirmSubmit = () => {",
                "method_end": "}",
                "range": [
                    492,
                    521
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${batchId}/bucket${additionalPath}",
                    "/home/document/batch/${batchId}/bucket${additionalPath}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelSubmit",
                "method_begin": "const cancelSubmit = () => {",
                "method_end": "}",
                "range": [
                    524,
                    527
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleFormFieldChange",
                "method_begin": "const handleFormFieldChange = (value, index, fieldId, type) => {",
                "method_end": "}",
                "range": [
                    530,
                    532
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "highlightTableData",
                "method_begin": "const highlightTableData = (pts) => {",
                "method_end": "}",
                "range": [
                    534,
                    548
                ],
                "parameters": [
                    "pts"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleTableDataChange",
                "method_begin": "const handleTableDataChange = (pageNo, val, cellIndex, index, tIndex) => {",
                "method_end": "}",
                "range": [
                    550,
                    556
                ],
                "parameters": [
                    "pageNo",
                    "val",
                    "cellIndex",
                    "index",
                    "tIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fitPage",
                "method_begin": "const fitPage = () => {",
                "method_end": "}",
                "range": [
                    558,
                    561
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetHighlight",
                "method_begin": "const resetHighlight = () => {",
                "method_end": "}",
                "range": [
                    563,
                    565
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkFieldData",
                "method_begin": "const checkFieldData = (obj) => {",
                "method_end": "}",
                "range": [
                    567,
                    584
                ],
                "parameters": [
                    "obj"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "true | true | true | true | true | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderFieldsTable",
                "method_begin": "const renderFieldsTable = () => {",
                "method_end": "}",
                "range": [
                    586,
                    626
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "(\n            <div id='extractedKvPairs' className={'fullWidth'} style={{ height: '100%', overflowY: 'scroll' }} onScroll={trainingStore.setScrollValue}>\n\n                <List style={{\n                    position: (currentField && currentField.data_type) === 'date' ? 'static' : 'relative',\n                    overflow: 'auto'\n                }} >\n\n                    {\n                        trainingStore.sortedData && trainingStore.sortedData.map((item, i) => (\n                            getFormFields(item, item.index, item.pageIndex, item.pageNo)\n                        ))\n                    }\n\n\n\n\n                </List>\n            </div>\n        ) | (\n            currentPage.nonTabularContent && currentPage.nonTabularContent.length ?\n                <div className={'fullWidth'} style={{ height: '100%', overflowY: 'scroll' }}>\n                    <List>\n                        {currentPage && currentPage.nonTabularContent && currentPage.nonTabularContent.map((item, index) => (\n                            <ListItem key={index + 'formElement'} id={index + 'formElement'} classes={{ root: classes.listGutter }}>\n                                <TrainingField field={item} recon={item.recon} coords={item.local_value && item.local_value.pts && item.local_value.pts.slice()} key={item.fieldId} label={item.global_key} value={item.local_value && item.local_value.edited_value}\n                                    // ref={c => _areaElement.set(index, c)}\n                                    disabled={currentPage.isNonTabularFeedbackRequested || currentPage.isTabularFeedbackRequested}\n                                    onClick={(e) => setCurrentField(e, index, item, 'local_value')}\n                                    confidenceScore={item.confidence_score}\n                                //onChange={(event) => handleFormFieldChange(event.target.value, index, item.fieldId, item.local_value && item.local_value.edited_value !== \"\" ? \"edited_value\" : \"text\")}\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                </div>\n                : null\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/List>",
                    "/div>",
                    "//",
                    "//onChange={(event",
                    "/>",
                    "/ListItem>",
                    "/List>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "settingPageMenu",
                "method_begin": "const settingPageMenu = (val) => {",
                "method_end": "}",
                "range": [
                    628,
                    631
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFormFields",
                "method_begin": "const getFormFields = (item, index, pgIndex, pageNo) => {",
                "method_end": "}",
                "range": [
                    633,
                    669
                ],
                "parameters": [
                    "item",
                    "index",
                    "pgIndex",
                    "pageNo"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "(\n\n\n            <ListItem key={index + 'formElement' + pageNo + item.pageNo} id={'formElement' + item.fieldId} classes={{ root: classes.listGutter }} style={{ position: item.data_type === 'date' ? 'static' : 'relative' }}>\n\n                <TrainingField index={index} field={item} recon={item.recon} coords={item.local_value && item.local_value.pts && item.local_value.pts.slice()} key={item.fieldId} label={item.global_key} value={item.local_value && item.local_value.edited_value}\n                    // ref={c => _areaElement.set(index, c)}\n                    pageNo={item.pageNo}\n                    setPageMenu={settingPageMenu}\n                    reviewType={props.match.params['type']}\n                    qcType={props.match.params['qcType']}\n                    metaData={trainingDoc && trainingDoc.pageArray[pgIndex].metaData}\n                    role={userStore.user && userStore.user.role}\n                    id={'extractedValue' + item.fieldId}\n                    qcStatus={trainingDoc && trainingDoc.qcStatus}\n                    icon={\n                        (currentField.fieldId !== item.fieldId || (trainingDoc && trainingDoc.qcStatus) === 'COMPLETED') ? null :\n                            ((currentField && currentField.local_value && currentField.local_value.pts && currentField.local_value.pts.length === 1) ? 'addContour' : 'deleteContour')}\n                    disabled={\n                        currentPage.isNonTabularFeedbackRequested ||\n                        currentPage.isTabularFeedbackRequested ||\n                        (vendorFields.includes(item.global_key) && vendorAllowed.includes(trainingDoc && trainingDoc.docType))||\n                        trainingDoc.external_sheet && trainingDoc.external_sheet.findIndex(x => x.keyMapping == item.global_key) > -1\n                        }\n                    onClick={(e) => (vendorFields.includes(item.global_key) && vendorAllowed.includes(trainingDoc && trainingDoc.docType)) ? undefined : setCurrentField(e, index, item, 'local_value', item.pageIndex)}\n                    currentField={currentField.fieldId === item.fieldId}\n                    activeField={currentField}\n                    confidenceScore={item.confidence_score !== undefined ? (item.confidence_score < item.confidence_threshold ? 'L' : 'H') : undefined}\n                    hidePageNo={trainingDoc.qcStatus === 'COMPLETED' || trainingDoc.pageArray.findIndex(x => x.pageNo !== item.pageNo) == -1 || trainingDoc.pageArray.findIndex(x => x.page_type !== '#NEW_FORMAT#' && x.pageNo !== item.pageNo) == -1 || item.hidePageNo}\n                //onChange={(event) => handleFormFieldChange(event.target.value, index, item.fieldId, item.local_value && item.local_value.edited_value !== \"\" ? \"edited_value\" : \"text\")}\n                />\n            </ListItem>\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//onChange={(event",
                    "/>",
                    "/ListItem>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleTabChange",
                "method_begin": "const handleTabChange = (index) => {",
                "method_end": "}",
                "range": [
                    671,
                    681
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setActiveTableField",
                "method_begin": "const setActiveTableField = (pageNo, cellIndex, tIndex, index, pageIndex) => {",
                "method_end": "}",
                "range": [
                    683,
                    716
                ],
                "parameters": [
                    "pageNo",
                    "cellIndex",
                    "tIndex",
                    "index",
                    "pageIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//scrollParentToChild(elems[0],childElem"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelAddTable",
                "method_begin": "const cancelAddTable = () => {",
                "method_end": "}",
                "range": [
                    719,
                    721
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addNewTable",
                "method_begin": "const addNewTable = (extend) => {",
                "method_end": "}",
                "range": [
                    723,
                    730
                ],
                "parameters": [
                    "extend"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = () => {",
                "method_end": "}",
                "range": [
                    732,
                    800
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "(\n                <div className={classes.tableContainer} style={{ height: '50%', display: 'flex', flexDirection: 'column' }} >\n                    <div className='rowFlex fullWidth flexCenter'>\n                        <div>\n                            <br />\n                            <br />\n                            <div className='xsFont'>Table detection is not applicable for older documents.</div><br />\n                        </div>\n                    </div>\n                </div>\n            ) | (\n            <div className={classes.tableContainer} style={{ height: '50%', display: 'flex', flexDirection: 'column' }} >\n                {trainingStore.trainingDoc && trainingStore.trainingDoc.tablePresent !== undefined && !trainingStore.addTableActive ?\n                    (\n                        <TableContainer elevation={0} component={Paper} classes={{ root: classes.tableRoot }} style={{\n                            maxHeight: allowTabularFeedback() ? '80%' : '100%', borderTop: 'solid 1px lightGray'\n                        }} >\n                            <Table className={classes.table} aria-label=\"simple table\" stickyHeader>\n                                {renderTableDataHead()}\n                                <TableBody>\n                                    {renderTableBody()}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    ) :\n                    (\n                        trainingDoc && trainingDoc.table_columns && trainingDoc.table_columns.length ?\n                            <div className='rowFlex fullWidth flexCenter'>\n                                <div>\n                                    <br />\n                                    <br />\n                                    <div className='xsFont'>No table detected</div><br />\n                                    {props.disableTableEdit ? null : <SimpleButton label={'Add Table'} disabled={trainingStore.addTableActive} onClick={() => addNewTable(0)} />}\n                                    <br />\n                                    {props.disableTableEdit || (trainingDoc && trainingDoc.pageArray && trainingDoc.pageArray.length) === 1 ? null : <SimpleButton label={'Add Table - Extended'} disabled={trainingStore.addTableActive} onClick={() => addNewTable(1)} />}\n                                    <br />\n                                    {props.disableTableEdit ? null : (trainingStore.initialTablePresent ? <div className='sFont pointer underline' onClick={openResetDialog}>Reset Tabular Data</div> : null)}\n                                </div>\n                            </div>\n                            :\n                            <div className='rowFlex fullWidth flexCenter'>\n                                <div>\n                                    <br />\n                                    <br />\n                                    <div className='xsFont'>Table detection has not been configured for this document.</div><br />\n                                </div>\n                            </div>\n                    )\n                }\n                <CustomDialog\n                    title='Reset Table'\n                    message={<div>This will reset tabular data to the original state. <br /> Are you sure you want to proceed?</div>}\n                    open={resetOpen}\n                    cancel={cancelReset}\n                    submit={confirmReset}\n                    labelYes='Yes'\n                    labelNo='No'\n                />\n                <TabularFormAction highlightTable={props.highlightTable} showBorder={allowTableEdit && currentPage.tabularContent && currentPage.tabularContent.length && currentPage.tabularContent[0].data && currentPage.tabularContent[0].data.length} />\n                <TableOptions contextMenu={contextMenu} handleClose={handleClose} insertRow={insertRow} deleteRow={deleteRow} />\n            </div>\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>",
                    "/>",
                    "/div><br",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>",
                    "/>",
                    "/>",
                    "/div><br",
                    "/>",
                    "/>}",
                    "/>",
                    "/>}",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div><br",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>}",
                    "/>",
                    "/>",
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "clearData",
                "method_begin": "const clearData = () => {",
                "method_end": "}",
                "range": [
                    802,
                    805
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeSpacesFromData",
                "method_begin": "const removeSpacesFromData = () => {",
                "method_end": "}",
                "range": [
                    807,
                    810
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "switchColumnData",
                "method_begin": "const switchColumnData = (newMapping) => {",
                "method_end": "}",
                "range": [
                    812,
                    815
                ],
                "parameters": [
                    "newMapping"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeColumnMenu",
                "method_begin": "const closeColumnMenu = () => {",
                "method_end": "}",
                "range": [
                    817,
                    819
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableDataHead",
                "method_begin": "const renderTableDataHead = () => {",
                "method_end": "}",
                "range": [
                    821,
                    872
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n                    <TableCell key={'headertablesno'} className={classes.tableHeader} style={{\n                        maxWidth: '4vw', position: \"sticky\",\n                        left: 0,\n                        background: \"white\",\n                        zIndex: \"9999\",\n                        boxShadow: 'lightGray -1px 0px 1px 0px inset, lightGray 0px 0px 0px 0px inset'\n\n                    }} align=\"left\">\n                        <div className={classes.overflowHeader}>S. No.</div>\n                    </TableCell>\n                    {\n                        table.mappedColumns && table.mappedColumns.length && table.mappedColumns.map((row, index) => {\n                            return (\n\n                                <TableCell key={'headertable' + index} className={classes.tableHeader} align=\"left\" >\n                                    <div onClick={(e) => props.disableTableEdit ? undefined : setMenuElement({ el: e.currentTarget, columnName: row.text, columnMatch: row.mappedColumn })} className={`${classes.overflowHeader} rowFlex`} style={{ width: (row.colWidth * 8), minWidth: '10vw' }}>\n                                        <div>{row.text}</div>&nbsp;&nbsp;&nbsp;\n                                        {props.disableTableEdit ? null : <div className='colFlex flexCenter'><SvgIcon src={Images.dropDown} style={'width:7;height:7'} /></div>}\n                                    </div>\n                                </TableCell>\n\n                            )\n                        })\n                    }\n                </TableRow>\n                <ColumnMenu menuEl={menuEl && menuEl.el}\n                    matchCol={menuEl && menuEl.columnMatch}\n                    setMenuElement={setMenuElement}\n                    clearData={clearData}\n                    removeSpacesFromData={removeSpacesFromData}\n                    columnName={menuEl && menuEl.columnName}\n                    switchColumnData={switchColumnData}\n                    close={closeColumnMenu}\n                    disableAll={props.disableTableEdit}\n                    highlightTableField={props.highlightTableField}\n                />\n            </TableHead>\n        ) | (\n\n                                <TableCell key={'headertable' + index} className={classes.tableHeader} align=\"left\" >\n                                    <div onClick={(e) => props.disableTableEdit ? undefined : setMenuElement({ el: e.currentTarget, columnName: row.text, columnMatch: row.mappedColumn })} className={`${classes.overflowHeader} rowFlex`} style={{ width: (row.colWidth * 8), minWidth: '10vw' }}>\n                                        <div>{row.text}</div>&nbsp;&nbsp;&nbsp;\n                                        {props.disableTableEdit ? null : <div className='colFlex flexCenter'><SvgIcon src={Images.dropDown} style={'width:7;height:7'} /></div>}\n                                    </div>\n                                </TableCell>\n\n                            )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/TableCell>",
                    "/div>&nbsp;&nbsp;&nbsp;",
                    "/></div>}",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleContextMenu",
                "method_begin": "const handleContextMenu = (event, pageIndex, tableIndex, index, pageNo) => {",
                "method_end": "};",
                "range": [
                    874,
                    893
                ],
                "parameters": [
                    "event",
                    "pageIndex",
                    "tableIndex",
                    "index",
                    "pageNo"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleClose",
                "method_begin": "const handleClose = () => {",
                "method_end": "};",
                "range": [
                    895,
                    897
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "insertRow",
                "method_begin": "const insertRow = (type) => {",
                "method_end": "}",
                "range": [
                    899,
                    905
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteRow",
                "method_begin": "const deleteRow = () => {",
                "method_end": "}",
                "range": [
                    907,
                    911
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onPressTab",
                "method_begin": "const onPressTab = (e) => {",
                "method_end": "}",
                "range": [
                    913,
                    917
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableBody",
                "method_begin": "const renderTableBody = () => {",
                "method_end": "}",
                "range": [
                    920,
                    967
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "(\n                <TableRow className={classes.tableRow}  >\n                    <TableCell key={'cellsno'} colSpan={(trainingDoc.table_columns && trainingDoc.table_columns.length) + 1} classes={{ root: classes.tableCell }} align=\"left\" >\n                        <SimpleButton label='Add line item' onClick={trainingStore.addNewRow} />\n                    </TableCell>\n\n                </TableRow>\n            ) | (\n            trainingDoc.pageArray.map((eachPage, index) => (\n                eachPage.tabularContent && eachPage.tabularContent.map((table, tableIndex) => (\n                    table.table_id === trainingDoc.tablePresent ?\n                        table.data && table.data.map((item, tIndex) => {\n                            lastIndex = lastIndex + 1\n                            return (\n                                <TableRow key={tIndex + 'tabular'} className={classes.tableRow} style={{ borderTop: tIndex === 0 && index > 0 ? 'solid 2px black' : '' }} >\n                                    <TableCell key={'cellsno'} classes={{ root: classes.tableCell }} align=\"left\" onContextMenu={(e) => handleContextMenu(e, index, tableIndex, tIndex, eachPage.pageNo)} style={{\n                                        cursor: 'context-menu', position: \"sticky\",\n                                        left: 0,\n                                        background: \"white\",\n                                        boxShadow: 'lightGray -1px 0px 1px 0px inset, lightGray 0px 0px 0px 0px inset'\n                                    }}>{lastIndex} </TableCell>\n                                    {\n                                        item.map((cell, cellIndex) => {\n                                            return (<TableCell key={'cell' + cellIndex} classes={{ root: classes.tableCell }} align=\"left\" ><div className={classes.tableCellData}\n                                                style={{ border: (trainingStore.activeTableField.cellIndex === cellIndex && trainingStore.activeTableField.tableIndex === tableIndex && trainingStore.activeTableField.dataIndex === tIndex && trainingStore.activeTableField.pageIndex === index) ? (columnActive === cell.column ? 'solid 2px #157fff' : 'solid 2px') : (columnActive === cell.column ? 'solid 2px #157fff' : ''), backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white') }}>\n                                                <textarea className={`page${index}table${tableIndex}data${tIndex}cell${cellIndex}`} cols='100' onClick={() => setActiveTableField(eachPage.pageNo, cellIndex, tIndex, tableIndex, index)} disabled={columnActive !== undefined ? (columnActive !== cell.column) : false} onKeyUp={(e) => e.code === 'Tab' ? setTabPressed(false) : undefined} onKeyDown={(e) => e.code === 'Tab' ? onPressTab(e) : undefined} onChange={(e) => handleTableDataChange(eachPage.pageNo, e.target.value, cellIndex, tIndex, tableIndex)} value={cell && cell.text} style={{ border: 'none', width: '100%', maxWidth: '100%', boxShadow: 'none', outline: 'none', backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white'), cursor: props.disableTableEdit ? 'pointer' : 'initial', caretColor: props.disableTableEdit ? 'transparent' : 'initial' }} /></div></TableCell>)\n                                        })\n                                    }\n                                </TableRow>\n                            )\n                        })\n                        : null\n                ))\n            ))\n        ) | (\n                                <TableRow key={tIndex + 'tabular'} className={classes.tableRow} style={{ borderTop: tIndex === 0 && index > 0 ? 'solid 2px black' : '' }} >\n                                    <TableCell key={'cellsno'} classes={{ root: classes.tableCell }} align=\"left\" onContextMenu={(e) => handleContextMenu(e, index, tableIndex, tIndex, eachPage.pageNo)} style={{\n                                        cursor: 'context-menu', position: \"sticky\",\n                                        left: 0,\n                                        background: \"white\",\n                                        boxShadow: 'lightGray -1px 0px 1px 0px inset, lightGray 0px 0px 0px 0px inset'\n                                    }}>{lastIndex} </TableCell>\n                                    {\n                                        item.map((cell, cellIndex) => {\n                                            return (<TableCell key={'cell' + cellIndex} classes={{ root: classes.tableCell }} align=\"left\" ><div className={classes.tableCellData}\n                                                style={{ border: (trainingStore.activeTableField.cellIndex === cellIndex && trainingStore.activeTableField.tableIndex === tableIndex && trainingStore.activeTableField.dataIndex === tIndex && trainingStore.activeTableField.pageIndex === index) ? (columnActive === cell.column ? 'solid 2px #157fff' : 'solid 2px') : (columnActive === cell.column ? 'solid 2px #157fff' : ''), backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white') }}>\n                                                <textarea className={`page${index}table${tableIndex}data${tIndex}cell${cellIndex}`} cols='100' onClick={() => setActiveTableField(eachPage.pageNo, cellIndex, tIndex, tableIndex, index)} disabled={columnActive !== undefined ? (columnActive !== cell.column) : false} onKeyUp={(e) => e.code === 'Tab' ? setTabPressed(false) : undefined} onKeyDown={(e) => e.code === 'Tab' ? onPressTab(e) : undefined} onChange={(e) => handleTableDataChange(eachPage.pageNo, e.target.value, cellIndex, tIndex, tableIndex)} value={cell && cell.text} style={{ border: 'none', width: '100%', maxWidth: '100%', boxShadow: 'none', outline: 'none', backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white'), cursor: props.disableTableEdit ? 'pointer' : 'initial', caretColor: props.disableTableEdit ? 'transparent' : 'initial' }} /></div></TableCell>)\n                                        })\n                                    }\n                                </TableRow>\n                            ) | (<TableCell key={'cell' + cellIndex} classes={{ root: classes.tableCell }} align=\"left\" ><div className={classes.tableCellData}\n                                                style={{ border: (trainingStore.activeTableField.cellIndex === cellIndex && trainingStore.activeTableField.tableIndex === tableIndex && trainingStore.activeTableField.dataIndex === tIndex && trainingStore.activeTableField.pageIndex === index) ? (columnActive === cell.column ? 'solid 2px #157fff' : 'solid 2px') : (columnActive === cell.column ? 'solid 2px #157fff' : ''), backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white') }}>\n                                                <textarea className={`page${index}table${tableIndex}data${tIndex}cell${cellIndex}`} cols='100' onClick={() => setActiveTableField(eachPage.pageNo, cellIndex, tIndex, tableIndex, index)} disabled={columnActive !== undefined ? (columnActive !== cell.column) : false} onKeyUp={(e) => e.code === 'Tab' ? setTabPressed(false) : undefined} onKeyDown={(e) => e.code === 'Tab' ? onPressTab(e) : undefined} onChange={(e) => handleTableDataChange(eachPage.pageNo, e.target.value, cellIndex, tIndex, tableIndex)} value={cell && cell.text} style={{ border: 'none', width: '100%', maxWidth: '100%', boxShadow: 'none', outline: 'none', backgroundColor: (columnActive !== undefined ? (columnActive !== cell.column ? 'lightGray' : 'white') : 'white'), cursor: props.disableTableEdit ? 'pointer' : 'initial', caretColor: props.disableTableEdit ? 'transparent' : 'initial' }} /></div></TableCell>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableCell>",
                    "/></div></TableCell>",
                    "/TableRow>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderSubmitButton",
                "method_begin": "const renderSubmitButton = () => {",
                "method_end": "}",
                "range": [
                    969,
                    991
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "null | null | (\n                    <div ><SimpleButton progress={trainingStore.editProgress} style={{ marginLeft: '0vw' }} label={'Submit'} onClick={(e) => onSubmit(true, false, false)} /></div>\n                ) | null | (\n                    <div ><SimpleButton progress={trainingStore.editProgress} style={{ marginLeft: '0vw' }} label={'Submit'} onClick={(e) => onSubmit(true, false, false)} /></div>\n                ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/></div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTabStatus",
                "method_begin": "const getTabStatus = (tab) => {",
                "method_end": "}",
                "range": [
                    993,
                    999
                ],
                "parameters": [
                    "tab"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "true | true | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDocCreation",
                "method_begin": "const cancelDocCreation = () => {",
                "method_end": "}",
                "range": [
                    1001,
                    1004
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleDocTypeChange",
                "method_begin": "const handleDocTypeChange = (value, from) => {",
                "method_end": "}",
                "range": [
                    1006,
                    1024
                ],
                "parameters": [
                    "value",
                    "from"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//",
                    "//",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTabs",
                "method_begin": "const getTabs = () => {",
                "method_end": "}",
                "range": [
                    1026,
                    1056
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "(\n                        <Tab classes={{ root: `${classes.tabRoot} mFont` }} key={'tab1'} color=\"primary\" label={'Key Value Extraction'} />\n                    ) | (\n                        <Tab classes={{ root: `${classes.tabRoot} mFont` }} key={'tab1'} color=\"primary\" label={'Key Value Extraction'} />\n                    ) | (\n                        <Tab classes={{ root: `${classes.tabRoot} mFont` }} key={'tab1'} color=\"primary\" label={'Tabular Data'} />\n                    ) | (\n                        currentPage.tabularContent ?\n                            tabList.map((row, index) => (\n                                <Tab classes={{ root: `${classes.tabRoot} mFont` + (getTabStatus(row) === true ? ` ${classes.feedbackTab}` : '') }} key={'tab1' + index} color=\"primary\" label={row} />\n                            ))\n                            :\n                            tabList1.map((row, index) => (\n                                <Tab classes={{ root: `${classes.tabRoot} mFont` + (getTabStatus(row) === true ? ` ${classes.feedbackTab}` : '') }} key={'tab2' + index} color=\"primary\" label={row} />\n                            ))\n                    )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/>",
                    "/>",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDisabledCondition",
                "method_begin": "const getDisabledCondition = () => {",
                "method_end": "}",
                "range": [
                    1058,
                    1063
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "(currentPage.isNonTabularFeedbackApplied && currentPage.isNonTabularFeedbackRequested) || currentPage.isNonTabularFeedbackRequested | (currentPage.isTabularFeedbackApplied && currentPage.isTabularFeedbackRequested) || currentPage.isTabularFeedbackRequested",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleToggle",
                "method_begin": "const handleToggle = (val) => {",
                "method_end": "}",
                "range": [
                    1065,
                    1074
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "scrollParentToChild",
                "method_begin": "const scrollParentToChild = (parent, child) => {",
                "method_end": "}",
                "range": [
                    1076,
                    1105
                ],
                "parameters": [
                    "parent",
                    "child"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "moveValueToPage",
                "method_begin": "const moveValueToPage = (page) => {",
                "method_end": "}",
                "range": [
                    1108,
                    1119
                ],
                "parameters": [
                    "page"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openHelpDialog",
                "method_begin": "const openHelpDialog = (e) => {",
                "method_end": "}",
                "range": [
                    1121,
                    1125
                ],
                "parameters": [
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderQrData",
                "method_begin": "const renderQrData = () => {",
                "method_end": "}",
                "range": [
                    1127,
                    1162
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "(\n                <div className={classes.qrData}>\n                    {\n                        trainingDoc && trainingDoc.pageArray && trainingDoc.pageArray.length ?\n                            trainingDoc.pageArray.map((page, pageIndex) => (\n                                page.qrContent && page.qrContent.extractedData && pageIndex === 0 ?\n                                    (\n                                        Object.keys(page.qrContent.extractedData).map((row, index) => (\n                                            row === 'QR_DETECTED' ? null :\n                                                <div key={'qr' + index + pageIndex} className={'rowFlex mFont'}>\n                                                    <div className={classes.qrKey}>{row}</div>&nbsp;:&nbsp;\n                                                    <div style={{ width: '60%' }}> {typeof currentPage.qrContent.extractedData[`${row}`] === 'string' ? currentPage.qrContent.extractedData[`${row}`] : JSON.stringify(currentPage.qrContent.extractedData[`${row}`])}</div>\n                                                </div>\n                                        ))\n                                    ) : null\n                            )) : null\n                    }\n                </div>\n            ) | (\n            <div className={classes.qrData}>\n                <div className={'rowFlex mFont'}>\n                    <div style={{ width: '100%' }}> No data found</div>\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>&nbsp;:&nbsp;",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderBarcodeData",
                "method_begin": "const renderBarcodeData = () => {",
                "method_end": "}",
                "range": [
                    1164,
                    1189
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "(\n                <div className={classes.qrData}>\n                    {\n                        trainingDoc && trainingDoc.pageArray && trainingDoc.pageArray.length ?\n                            trainingDoc.pageArray.map((page, pageIndex) => (\n                                page.code_content && pageIndex === 0 ?\n                                    <div key={'barcode' + pageIndex} className={'rowFlex mFont'}>\n                                        <div style={{ width: '100%' }}> {page.code_content}</div>\n                                    </div>\n                                    : null\n                            )) : null\n                    }\n                </div>\n            ) | (\n            <div className={classes.qrData}>\n                <div className={'rowFlex mFont'}>\n                    <div style={{ width: '100%' }}> No data found</div>\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderContent",
                "method_begin": "const renderContent = () => {",
                "method_end": "}",
                "range": [
                    1191,
                    1204
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "renderTableData() | renderQrData() | renderBarcodeData() | renderFieldsTable()",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPanel",
                "method_begin": "const renderPanel = (row, index, item) => {",
                "method_end": "}",
                "range": [
                    1206,
                    1224
                ],
                "parameters": [
                    "row",
                    "index",
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingForm.js",
                "returnType": "(\n            <Panel\n                key={index}\n                docType={trainingDoc && trainingDoc.docType}\n                headerTable={trainingDoc.header_table}\n                showL={trainingDoc.header_table === 'L' || ((trainingDoc && trainingDoc.docType) !== 'Invoices Custom' && (trainingDoc && trainingDoc.table_columns && trainingDoc.table_columns.length))}\n                activeTab={tabList.findIndex(x => x.label === activeTab)}\n                label={row}\n                disableContouring={currentPage && currentPage.disallow_snippet_flag}\n                disabled={trainingDoc.originalDocType.startsWith('#new_format')}\n                index={index}\n                content={renderContent()}\n                activateTab={handleTabChange}\n                heightMinus={vendorAllowed.includes(trainingDoc.docType) || (trainingDoc.external_sheet && trainingDoc.external_sheet.length) ? ((70 + (item.showCount === 1 ? 0 : item.showCount * 25)) + 'px') : (item.showCount === 1 ? 0 : item.showCount * 25) + 'px'}\n                tableAvailable={activeTab === 'Tabular Data' ? (\"unavailable\") : 'available'}>\n            </Panel>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/Panel>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingHome.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingImageHeader.js": {
        "method_details_": [
            {
                "method_name": "openDoc",
                "method_begin": "const openDoc = (type) => {",
                "method_end": "}",
                "range": [
                    28,
                    32
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingImageHeader.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/training/${props.match.params[",
                    "/batch/${batchId}/${props.match.params[",
                    "/${temp}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getReviewDetails",
                "method_begin": "const getReviewDetails = () => {",
                "method_end": "}",
                "range": [
                    34,
                    42
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingImageHeader.js",
                "returnType": "(\n                <div className={`${classes.reviewStats} sFont`}>{fileDetails.qcCount} of {fileDetails.totalDocument} documents Reviewed</div>\n            ) | null",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTotalPages",
                "method_begin": "const getTotalPages = () => {",
                "method_end": "}",
                "range": [
                    44,
                    52
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingImageHeader.js",
                "returnType": "count",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "MyTimer",
                "method_begin": "function MyTimer({ })",
                "method_end": ");",
                "range": [
                    155,
                    172
                ],
                "parameters": [
                    "{ }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingImageHeader.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span>:<span>{minutes.toString(",
                    "/span>:<span>{seconds.toString(",
                    "/span>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js": {
        "method_details_": [
            {
                "method_name": "openBucket",
                "method_begin": "const openBucket = (row) => {",
                "method_end": "}",
                "range": [
                    63,
                    66
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${batchFilter}/bucket/${row.bucketId}/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlePageClick",
                "method_begin": "const handlePageClick = (data) => {",
                "method_end": "};",
                "range": [
                    92,
                    97
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${documentListStore.batchFilter}/bucket/${documentListStore.bucketFilter}/page/${offset"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchDocumentList",
                "method_begin": "const fetchDocumentList = () => {",
                "method_end": "}",
                "range": [
                    104,
                    109
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeSelectAll",
                "method_begin": "const onChangeSelectAll = (event, value) => {",
                "method_end": "}",
                "range": [
                    111,
                    114
                ],
                "parameters": [
                    "event",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCheckboxChange",
                "method_begin": "const onCheckboxChange = (event, index, value) => {",
                "method_end": "}",
                "range": [
                    116,
                    123
                ],
                "parameters": [
                    "event",
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortList",
                "method_begin": "const sortList = (sortDirection, index, sortField) => {",
                "method_end": "}",
                "range": [
                    125,
                    127
                ],
                "parameters": [
                    "sortDirection",
                    "index",
                    "sortField"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    129,
                    170
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "(\n            <TableHead>\n                <TableRow >\n                    <TableCell padding=\"checkbox\" className={classes.checkbox}>\n                        <Checkbox className={classes.checkbox}\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            checked={selectAllDocs}\n                            icon={<CheckboxIcon checked={false} />}\n                            onChange={(event, value) => onChangeSelectAll(event, value)}\n                            color=\"primary\"\n                            inputProps={{ classes: { root: classes.checkbox } }} />\n                    </TableCell>\n                    {\n                        tableHeader.map((row, index) => (\n                            (\n\n                                <TableCell key={'header' + index} className={classes.tableHeader} style={{ width: row.width }} align=\"left\">\n                                    <div style={{ display: 'flex' }}>\n                                        <div className='colFlex flexCenter'>{row.name}</div>\n                                        {\n                                            !row.allowSort ? null :\n                                                <div className='colFlex' style={{ marginLeft: '1vh' }}>\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${row.sort == 1 ? 'black' : ''}; width: 13;height: 13;`} src={Images.up} onClick={(e) => sortList(1, index, row.type)} />\n                                                    <SvgIcon className={classes.sortIcons} style={`fill : ${row.sort == -1 ? 'black' : ''};width: 13;height: 13;margin-top: -4px`} src={Images.down} onClick={(e) => sortList(-1, index, row.type)} />\n                                                </div>\n                                        }\n                                    </div>\n                                </TableCell>\n\n\n                            )\n                        ))\n                    }\n\n                </TableRow>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/>}",
                    "/>}",
                    "/>",
                    "/TableCell>",
                    "/div>",
                    "/>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocStatus",
                "method_begin": "const renderDocStatus = (value) => {",
                "method_end": "}",
                "range": [
                    172,
                    181
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "(\n            <div className={classes.docStatus} style={{ backgroundColor: trainingStatus[`${value}`].bgColor, color: trainingStatus[`${value}`].color }}>\n                {/*<div className='colFlex flexCenter' >\n                    <div className={classes.dot} style={{ backgroundColor: trainingStatus[`${value}`].color }}></div>\n                </div>*/}\n                {trainingStatus[`${value}`].label}\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*<div",
                    "/div>",
                    "/div>*/}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderConfidenceScore",
                "method_begin": "const renderConfidenceScore = (value) => {",
                "method_end": "}",
                "range": [
                    183,
                    194
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "(\n            <div className='rowFlex' style={{ width: '50%' }}>\n                <div style={{ width: '80%' }} className='colFlex flexCenter'>\n                    <SvgIcon src={Images[`${getCfScoreColors('bar', value)}`]} />\n                </div>\n                <div className={classes.cfScore} style={{ color: getCfScoreColors('percent', value) }}>{value + '%'}</div>\n            </div>\n\n\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteDocs",
                "method_begin": "const deleteDocs = () => {",
                "method_end": "}",
                "range": [
                    196,
                    201
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmDeleteDocs",
                "method_begin": "const confirmDeleteDocs = () => {",
                "method_end": "}",
                "range": [
                    203,
                    210
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelDelete",
                "method_begin": "const cancelDelete = () => {",
                "method_end": "}",
                "range": [
                    212,
                    214
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadDocs",
                "method_begin": "const downloadDocs = () => {",
                "method_end": "}",
                "range": [
                    216,
                    221
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocs",
                "method_begin": "const exportDocs = () => {",
                "method_end": "}",
                "range": [
                    223,
                    234
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocument",
                "method_begin": "const openDocument = (row) => {",
                "method_end": "}",
                "range": [
                    236,
                    244
                ],
                "parameters": [
                    "row"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/batch/${documentListStore.batchFilter}/${row._id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelExport",
                "method_begin": "const cancelExport = () => {",
                "method_end": "}",
                "range": [
                    246,
                    249
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "confirmExport",
                "method_begin": "const confirmExport = () => {",
                "method_end": "}",
                "range": [
                    251,
                    254
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPercentageClass",
                "method_begin": "const getPercentageClass = (type) => {",
                "method_end": "}",
                "range": [
                    256,
                    265
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "`c100 p${batchList[i].processedPercentage}` | `${batchList[i].processedPercentage}%`",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewUnidentifiedFiles",
                "method_begin": "const viewUnidentifiedFiles = () => {",
                "method_end": "}",
                "range": [
                    267,
                    271
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToFeedbackFiles",
                "method_begin": "const goToFeedbackFiles = () => {",
                "method_end": "}",
                "range": [
                    273,
                    279
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setIdentificationFilter",
                "method_begin": "const setIdentificationFilter = (type) => {",
                "method_end": "}",
                "range": [
                    281,
                    295
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToSuccessfulFiles",
                "method_begin": "const goToSuccessfulFiles = () => {",
                "method_end": "}",
                "range": [
                    297,
                    302
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = () => {",
                "method_end": "}",
                "range": [
                    304,
                    348
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "(\n            sectionList.map((section) => (\n                <React.Fragment key={section}>\n                    <TableRow className={classes.tableRow}  >\n                        <TableCell align=\"left\" style={{ backgroundColor: '#eaebf2' }} colSpan={documentListStore.tableHeader.length + 1}>\n                            <div className={classes.rowLink}>{section}</div>\n                        </TableCell>\n                    </TableRow>\n                    {\n                        documentListStore.documentList.map((row, index) => (\n                            row.sectionName !== section ? null :\n                                <TableRow key={row._id} className={classes.tableRow}  >\n                                    <TableCell padding=\"checkbox\" className={classes.checkbox}>\n                                        <Checkbox\n                                            checkedIcon={<CheckboxIcon checked={true} />}\n                                            key={row._id + \"check\"}\n                                            icon={<CheckboxIcon checked={false} />}\n                                            checked={documentListStore.selectedDocs[index]}\n                                            onChange={(event, value) => onCheckboxChange(event, index, value)}\n                                        /></TableCell>\n                                    <TableCell onClick={(e) => openDocument(row)} align=\"left\"><Tooltip title={row.fileOriginalName}><div className={classes.rowLink}>{row.fileOriginalName}</div></Tooltip></TableCell>\n                                    <TableCell align=\"left\">{row.docType && modifyTextDocType(row.docType)}</TableCell>\n                                    <TableCell align=\"left\">{row.confidenceScore ? renderConfidenceScore(row.confidenceScore) : 'N/A'}</TableCell>\n                                    <TableCell align=\"left\">{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</TableCell>\n                                    <TableCell align=\"left\">\n                                        <div className='rowFlex'>\n                                            <div>{row.aiStatus && renderDocStatus(row.aiStatus)}</div>\n                                            {\n                                                row.aiStatus && trainingStatus[`${row.aiStatus}`] && trainingStatus[`${row.aiStatus}`].showLoader ?\n                                                    <div className={classes.miniLoader}>\n                                                        <MiniLoader type={\"ThreeDots\"} height={20} width={20} color={trainingStatus[`${row.aiStatus}`].color} />\n                                                    </div>\n                                                    : null\n                                            }\n                                        </div>\n                                    </TableCell>\n                                </TableRow>\n                        ))\n                    }\n                </React.Fragment>\n            ))\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/>}",
                    "/>}",
                    "/></TableCell>",
                    "/div></Tooltip></TableCell>",
                    "/TableCell>",
                    "/A",
                    "/TableCell>",
                    "/TableCell>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/React.Fragment>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderClassTable",
                "method_begin": "const renderClassTable = () => {",
                "method_end": "}",
                "range": [
                    350,
                    397
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "(\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow >\n\n                        {\n                            classTableHeader.map((row, index) => (\n                                (\n\n                                    <TableCell key={'header' + index} className={classes.tableHeader} align=\"left\">\n                                        <div style={{ display: 'flex' }}>\n                                            <div className='colFlex flexCenter'>{row}</div>\n                                        </div>\n                                    </TableCell>\n                                )\n                            ))\n                        }\n\n                    </TableRow>\n                </TableHead>\n                {\n                    <TableBody>\n                        {documentListStore.classList && documentListStore.classList.length ? documentListStore.classList.map((row, index) => (\n                            <TableRow key={index + 'class'} className={classes.tableRow}  >\n                                <TableCell onClick={(e) => openBucket(row)} align=\"left\"\n                                >\n                                    <div className='rowFlex'>\n                                        <LightTooltip position='left-end' title={classDetails[`${row.bucketId}`]}><InfoOutlinedIcon style={{ color: '#646884', fontSize: '15px', }} /></LightTooltip>&nbsp;&nbsp;\n                                        <div className={classes.rowLink} style={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', width: '100%' }}>{row.label}</div>\n                                    </div>\n                                </TableCell>\n                                <TableCell align=\"left\">\n                                    {\n                                        documentListStore.progressAll || documentListStore.inProgress || row.count === ' ' ?\n                                            <div className={classes.miniLoader}>\n                                                <MiniLoader type={\"ThreeDots\"} height={13} width={15} color='#ffce00' />\n                                            </div> :\n                                            <div className={classes.miniLoader}>{row.count}</div>\n                                    }\n                                </TableCell>\n                            </TableRow>\n                        )) : null}\n                    </TableBody>\n                }\n            </Table>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableHead>",
                    "/></LightTooltip>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/Table>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData1",
                "method_begin": "const renderTableData1 = () => {",
                "method_end": "}",
                "range": [
                    399,
                    435
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "(\n            documentListStore.documentList.length ? documentListStore.documentList.map((row, index) => (\n                <TableRow key={row._id} className={classes.tableRow}  >\n                    <TableCell padding=\"checkbox\" className={classes.checkbox}>\n                        <Checkbox\n                            checkedIcon={<CheckboxIcon checked={true} />}\n                            key={row._id + \"check\"}\n                            icon={<CheckboxIcon checked={false} />}\n                            checked={documentListStore.selectedDocs[index]}\n                            onChange={(event, value) => onCheckboxChange(event, index, value)}\n                        /></TableCell>\n                    <TableCell onClick={(e) => openDocument(row)} align=\"left\"><Tooltip title={row.fileOriginalName}><div className={classes.rowLink}>{row.fileOriginalName}</div></Tooltip></TableCell>\n                    <TableCell align=\"left\">{row.docType && modifyTextDocType(row.docType)}</TableCell>\n                    <TableCell align=\"left\">{row.confidenceScore ? renderConfidenceScore(row.confidenceScore) : 'N/A'}</TableCell>\n                    <TableCell align=\"left\">{row.createdAt && Moment(row.createdAt).format('DD MMM YY, h:mm a')}</TableCell>\n                    <TableCell align=\"left\">\n                        <div className='rowFlex'>\n                            <div>{row.aiStatus && renderDocStatus(row.aiStatus)}</div>\n                            {\n                                row.aiStatus && trainingStatus[`${row.aiStatus}`] && trainingStatus[`${row.aiStatus}`].showLoader ?\n                                    <div className={classes.miniLoader}>\n                                        <MiniLoader type={\"ThreeDots\"} height={20} width={20} color={trainingStatus[`${row.aiStatus}`].color} />\n                                    </div>\n                                    : null\n                            }\n                        </div>\n                    </TableCell>\n                </TableRow>\n            )) :\n                <TableRow className={classes.tableRow}  >\n                    <TableCell colSpan={documentListStore.tableHeader.length + 1}>\n                        No data found\n                    </TableCell>\n                </TableRow>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>}",
                    "/>}",
                    "/></TableCell>",
                    "/div></Tooltip></TableCell>",
                    "/TableCell>",
                    "/A",
                    "/TableCell>",
                    "/TableCell>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableCell>",
                    "/TableRow>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderDocumentTable",
                "method_begin": "const renderDocumentTable = () => {",
                "method_end": "}",
                "range": [
                    437,
                    459
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "(\n            <TableContainer elevation={0} component={Paper} style={{ maxHeight: '48vh' }}>\n                <Table className={classes.table} aria-label=\"simple table\" stickyHeader={true}>\n                    {renderTableHead()}\n                    {\n                        documentListStore.inProgress ?\n                            <TableBody>\n                                <TableRow className={classes.tableRow}  >\n                                    <TableCell colSpan={documentListStore.tableHeader.length + 1}>\n                                        <div className={`loaderContainer ${classes.tableLoader}`} > <Loader /></div>\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                            :\n                            <TableBody>\n                                {renderTableData1()}\n                            </TableBody>\n                    }\n                </Table>\n            </TableContainer>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/TableCell>",
                    "/TableRow>",
                    "/TableBody>",
                    "/TableBody>",
                    "/Table>",
                    "/TableContainer>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchDetails",
                "method_begin": "const getBatchDetails = (type) => {",
                "method_end": "}",
                "range": [
                    461,
                    469
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingList.js",
                "returnType": "`${batchList[i][type]}` | 0",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingNavbar.js": {
        "method_details_": [
            {
                "method_name": "scrollParentToChild",
                "method_begin": "const scrollParentToChild = (parent, child) => {",
                "method_end": "}",
                "range": [
                    31,
                    60
                ],
                "parameters": [
                    "parent",
                    "child"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingNavbar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleThumbnailClick",
                "method_begin": "const handleThumbnailClick = (item) => {",
                "method_end": "}",
                "range": [
                    86,
                    135
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingNavbar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/training/qc/${props.match.params[",
                    "/batch/${props.match.params[",
                    "/${props.match.params[",
                    "/${item._id}${additionalPath}",
                    "/home/training/ocr/${props.match.params[",
                    "/batch/${props.match.params[",
                    "/${props.match.params[",
                    "/${item._id}${additionalPath}",
                    "/home/training/${props.match.params[",
                    "/batch/${props.match.params[",
                    "/${props.match.params[",
                    "/${item._id}${additionalPath}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkActivePage",
                "method_begin": "const checkActivePage = (item) => {",
                "method_end": "}",
                "range": [
                    137,
                    143
                ],
                "parameters": [
                    "item"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingNavbar.js",
                "returnType": "true | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingPopup.js": {
        "method_details_": [
            {
                "method_name": "handleFormFieldChange",
                "method_begin": "const handleFormFieldChange = (value, index, fieldId, type) => {",
                "method_end": "}",
                "range": [
                    30,
                    32
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingPopup.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateForm",
                "method_begin": "const updateForm = () => {",
                "method_end": "}",
                "range": [
                    34,
                    45
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingPopup.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleTabChange",
                "method_begin": "const handleTabChange = (e, v) => {",
                "method_end": "}",
                "range": [
                    47,
                    51
                ],
                "parameters": [
                    "e",
                    "v"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingPopup.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onCancel",
                "method_begin": "const onCancel = () => {",
                "method_end": "}",
                "range": [
                    57,
                    63
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingPopup.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getLeftPosition",
                "method_begin": "const getLeftPosition = () => {",
                "method_end": "}",
                "range": [
                    65,
                    72
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingPopup.js",
                "returnType": "(props.width - temp.offsetWidth) + 'px' | (currentPosition.x) + 'px'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingRector.js": {
        "method_details_": [
            {
                "method_name": "onSelected",
                "method_begin": 888,
                "method_end": 917,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingRector.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidMount",
                "method_begin": "componentDidMount(props)",
                "method_end": "this.addMouseEvents()",
                "range": [
                    193,
                    216
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentDidUpdate",
                "method_begin": "componentDidUpdate(prevProps)",
                "method_end": "this.removeMouseEvents()",
                "range": [
                    263,
                    343
                ],
                "parameters": [
                    "prevProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.calculateResizedValues(prevProps,",
                    "//zoom"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillUnmount",
                "method_begin": "componentWillUnmount()",
                "method_end": "this.removeMouseEvents()",
                "range": [
                    517,
                    522
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "componentWillReceiveProps",
                "method_begin": "componentWillReceiveProps(nextProps)",
                "method_end": "this.highlightValues(nextProps, this.props.trainingImageStore.focusOnPoint.zoom)",
                "range": [
                    522,
                    531
                ],
                "parameters": [
                    "nextProps"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.calculateResizedValues(nextProps,",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "addMouseEvents",
                "method_begin": "addMouseEvents()",
                "method_end": "this.canvas.addEventListener('mousedown', this.onMouseDown, false);",
                "range": [
                    658,
                    669
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeMouseEvents",
                "method_begin": "removeMouseEvents()",
                "method_end": "this.canvas.removeEventListener('mousedown', this.onMouseDown, false);",
                "range": [
                    669,
                    678
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    1457,
                    1503
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingRector.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "/canvas>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/*<TrainingPopup",
                    "/>*/}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingSelect.js": {
        "method_details_": [
            {
                "method_name": "CustomSvgIcon",
                "method_begin": "function CustomSvgIcon(props)",
                "method_end": ");",
                "range": [
                    12,
                    18
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingSelect.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    35,
                    80
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingSelect.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/MenuItem>",
                    "/Select>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingTextField.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    47,
                    90
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/TrainingTextField.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/VendorInput.js": {
        "method_details_": [
            {
                "method_name": "setChangedValue",
                "method_begin": "const setChangedValue = (val) => {",
                "method_end": "}",
                "range": [
                    112,
                    123
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/VendorInput.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "filterOptions",
                "method_begin": "const filterOptions = (options, state) => {",
                "method_end": "};",
                "range": [
                    128,
                    157
                ],
                "parameters": [
                    "options",
                    "state"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/VendorInput.js",
                "returnType": "results | results | results",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkVendorError",
                "method_begin": "const checkVendorError = () => {",
                "method_end": "}",
                "range": [
                    160,
                    169
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/VendorInput.js",
                "returnType": "true | false",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/resizeFunc.js": {
        "method_details_": [
            {
                "method_name": "useWindowDimension",
                "method_begin": "export function useWindowDimension()",
                "method_end": "return dimension;",
                "range": [
                    1,
                    17
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/resizeFunc.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "debounce",
                "method_begin": "function debounce(fn, ms)",
                "method_end": "};",
                "range": [
                    17,
                    28
                ],
                "parameters": [
                    "fn",
                    "ms"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/resizeFunc.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/trainingIpStyles.js": {
        "method_details_": [
            {
                "method_name": "selectStyles",
                "method_begin": "export const selectStyles = theme => ({",
                "method_end": "})",
                "range": [
                    2,
                    104
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/trainingIpStyles.js",
                "returnType": "({\n    disabled: {\n        cursor: 'not-allowed !important'\n    },\n    formControl: {\n        marginBottom: '1vh',\n        border: `solid 1px ${theme.palette.lightGray2}`,\n        borderRadius: '3px',\n        width: '100%',\n        height: '6.9vh',\n        marginTop: '1vh'\n    },\n    label: {\n        transform: 'translate(9px, 2px) scale(0.75) !important',\n        color: theme.palette.warmGray2,\n        fontSize: '14px',\n        paddingTop: '4px',\n        '&:focus': {\n            color: theme.palette.warmGray2\n        }\n    },\n    select: {\n        paddingLeft: '8px',\n        '&:focus': {\n            backgroundColor: 'transparent',\n        },\n        borderRadius: '3px'\n    },\n    expandIcon: {\n        color: theme.palette.silver,\n        marginRight: '1vw'\n    },\n    selectLabel: {\n        color: '#5c5d64',\n        marginBottom: '0.8vh',\n        fontWeight: '400',\n    },\n    selectBox: {\n        border: '0.75px solid #8A8886',\n        borderRadius: '4px',\n        \"&:focus\": {\n            borderRadius: '4px !important',\n            backgroundColor: 'transparent',\n        },\n        position: 'relative'\n    },\n\n    selectIcon: {\n        position: 'absolute',\n        top: '25%',\n        right: '10px'\n    },\n    menuPaper: {\n        boxShadow: '0px 19px 27px 0 rgba(71, 71, 71, 0.09)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '5px'\n    },\n    menuItem: {\n        fontSize: '11px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n\n    select_select: {\n        fontWeight: 'normal !important',\n        padding: '1vh 1vw',\n        color: '#33343D',\n        borderRadius: '5px !important',\n        backgroundColor: theme.palette.white,\n        \"&:focus\": {\n            backgroundColor: theme.palette.white,\n        },\n        fontWeight: '600',\n    },\n    select_minPadding: {\n        padding: '0.8vh 1vh',\n        paddingRight: '35px !important',\n        borderRadius: '5px',\n        fontSize: '11px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    select_padding: {\n        padding: '1.6vh 1vw',\n        borderRadius: '5px'\n    },\n    placeholderValue: {\n\n    },\n    selectMinIcon: {\n        position: 'absolute',\n        top: '18%',\n        right: '10px'\n    },\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "textFieldStyles",
                "method_begin": "export const textFieldStyles = theme => ({",
                "method_end": "})",
                "range": [
                    106,
                    201
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Training/trainingIpStyles.js",
                "returnType": "({\n    selectLabel: {\n        color: '#5c5d64',\n        marginBottom: '0.8vh',\n        fontWeight: '400',\n    },\n    selectBox: {\n        border: '0.75px solid #8A8886',\n        borderRadius: '4px',\n        \"&:focus\": {\n            borderRadius: '4px !important',\n            backgroundColor: 'transparent',\n        },\n        position: 'relative'\n    },\n    autoLabel: {\n        color: '#8e92a9'\n    },\n    autoMargin: {\n        marginBottom: '1.5vh'\n    },\n    autoOptions: {\n        fontSize: '12px',\n        backgroundColor: 'white !important',\n        padding: '1vh 1vw !important',\n        borderRadius: '0px',\n        color: '#646884',\n    },\n    autoClear: {\n        display: 'none'\n    },\n    autoPaper: {\n        boxShadow: '0px 19px 27px 0 rgba(71, 71, 71, 0.09)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '5px'\n    },\n    hiddenText: {\n        color: theme.palette.cloudyBlue,\n        fontSize: '18px',\n        whiteSpace: 'pre-line',\n        visibility: 'hidden',\n        height: '2px',\n    },\n    /*Styles for input*/\n    textFieldRoot: {\n        border: 'none',\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        padding: '1vh 1vw !important',\n        backgroundColor: theme.palette.white\n    },\n\n    textFieldInput: {\n        fontWeight: 'normal !important',\n        fontWeight: '600',\n        color: '#33343D'\n    },\n    errorHighlight: {\n        border: `solid 1px ${theme.palette.red} !important`\n    },\n    autoCompleteInput: {\n        padding: '0 !important',\n        fontWeight: '600 !important',\n        color: '#33343D',\n    },\n    textFieldInputSansLabel: {\n        padding: '1vh 12px !important',\n        fontSize: '15px'\n    },\n\n    label: {\n        fontSize: ' 14px !important'\n    },\n\n    inputMargin: {\n        marginTop: '0 !important',\n        marginBottom: '0 !important'\n    },\n\n    disabledText: {\n        backgroundColor: 'white !important',\n        borderRadius: '5px!important',\n        cursor: 'not-allowed !important'\n    },\n    menuItem: {\n        fontSize: '11px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*Styles"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/TrialNotifications.js": {
        "method_details_": [
            {
                "method_name": "logout",
                "method_begin": "const logout = () => {",
                "method_end": "}",
                "range": [
                    50,
                    55
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/TrialNotifications.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/login"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "displayName",
                "method_begin": "const displayName = () => {",
                "method_end": "}",
                "range": [
                    57,
                    61
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/TrialNotifications.js",
                "returnType": "userStore.user.email.split('@')[0] && modifyText(userStore.user.email.split('@')[0]) | ''",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderBreadcrumbs",
                "method_begin": "const renderBreadcrumbs = () => {",
                "method_end": "}",
                "range": [
                    63,
                    65
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/TrialNotifications.js",
                "returnType": "(breadCrumb ? <div className={'breadCrumb bold colFlex flexCenter'}>&nbsp;  / &nbsp;{breadCrumb}</div> : null)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onHeaderClick",
                "method_begin": "const onHeaderClick = () => {",
                "method_end": "}",
                "range": [
                    67,
                    135
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/TrialNotifications.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${batchFilter}/all",
                    "/home/document/page/1/batch/${batchFilter}/passed",
                    "/home/document/page/1/batch/${batchFilter}/rejected",
                    "/home/document/page/1/batch/${batchFilter}/rejected",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/upload/api",
                    "/home/configuration",
                    "/home/configuration",
                    "/home/api/logs/page/1",
                    "/home/admin-panel",
                    "/home/admin-panel",
                    "/home/admin-panel/server-configuration",
                    "/home/admin-panel/server-configuration",
                    "/home/upload"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderExpiryMsg",
                "method_begin": "const renderExpiryMsg = () => {",
                "method_end": "}",
                "range": [
                    139,
                    163
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/TrialNotifications.js",
                "returnType": "(<div>Welcome! Your free trial begins today.</div>) | (<div>Your free trial is valid until {Moment(b).format('DD MMM')}</div>) | (<div>The clock is ticking. Your free trial is valid until {Moment(b).format('DD MMM YY')}</div>) | (<div>Your free trial expires on {Moment(b).format('DD MMM YY')}</div>) | (<div>2 more days to go ! Your free trial expires on {Moment(b).format('DD MMM YY')}</div>) | (<div className='rowFlex'> 1 day remaining! Your free trial expires tomorrow.&nbsp;\n                <span className='underline pointer' onClick={() =>userStore.user.trialRequest === 'PENDING' ? null: userStore.requestExtension(false, true)}>{userStore.user.trialRequest === 'PENDING' ? 'Requested for extension': 'Request an extension?'}</span>\n                {<span className={requestProgress ? '' : 'hidden'} style={{ marginLeft: '1vw' }}><Loader mini={true} /></span>}\n            </div>) | (<div className='rowFlex'> Your 7 day free trial expires today.&nbsp;\n                <span className='underline pointer' onClick={() => userStore.user.trialRequest === 'PENDING' ? null:userStore.requestExtension(false, true)}>{userStore.user.trialRequest === 'PENDING' ? 'Requested for extension': 'Request an extension?'}</span>\n                {<span className={requestProgress ? '' : 'hidden'} style={{ marginLeft: '1vw' }}><Loader mini={true} /></span>}\n            </div>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/></span>}",
                    "/div>",
                    "/span>",
                    "/></span>}",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/CompareFiles.js": {
        "method_details_": [
            {
                "method_name": "handleDrop",
                "method_begin": "const handleDrop = (files, event) => {",
                "method_end": "}",
                "range": [
                    43,
                    52
                ],
                "parameters": [
                    "files",
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/CompareFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openFileModal",
                "method_begin": "const openFileModal = () => {",
                "method_end": "}",
                "range": [
                    54,
                    58
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/CompareFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFileSize",
                "method_begin": "const validateFileSize = (files) => {",
                "method_end": "}",
                "range": [
                    62,
                    70
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/CompareFiles.js",
                "returnType": "(size <= 10 ? true : false)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeFile",
                "method_begin": "const onChangeFile = (event, type) => {",
                "method_end": "}",
                "range": [
                    72,
                    95
                ],
                "parameters": [
                    "event",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/CompareFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickUpload",
                "method_begin": "const onClickUpload = () => {",
                "method_end": "}",
                "range": [
                    97,
                    103
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/CompareFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickClear",
                "method_begin": "const onClickClear = () => {",
                "method_end": "}",
                "range": [
                    105,
                    108
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/CompareFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getIcon",
                "method_begin": "const getIcon = (type) => {",
                "method_end": "}",
                "range": [
                    110,
                    115
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/CompareFiles.js",
                "returnType": "fileTypes[ind].icon",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewFileList",
                "method_begin": "const viewFileList = (value) => {",
                "method_end": "}",
                "range": [
                    117,
                    121
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/CompareFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetUpload",
                "method_begin": "const resetUpload = () => {",
                "method_end": "}",
                "range": [
                    123,
                    126
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/CompareFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/FileList.js": {
        "method_details_": [
            {
                "method_name": "onClickClear",
                "method_begin": "const onClickClear = () => {",
                "method_end": "}",
                "range": [
                    35,
                    38
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/FileList.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getIcon",
                "method_begin": "const getIcon = (type) => {",
                "method_end": "}",
                "range": [
                    40,
                    45
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/FileList.js",
                "returnType": "fileTypes[ind].icon",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/NoUploads.js": {
        "method_details_": [
            {
                "method_name": "onClickUpload",
                "method_begin": "const onClickUpload = () => {",
                "method_end": "}",
                "range": [
                    28,
                    30
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/NoUploads.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "const cancelUpload = () => {",
                "method_end": "}",
                "range": [
                    32,
                    34
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/NoUploads.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js": {
        "method_details_": [
            {
                "method_name": "handleDrop",
                "method_begin": "const handleDrop = (files, event) => {",
                "method_end": "}",
                "range": [
                    50,
                    59
                ],
                "parameters": [
                    "files",
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openFileModal",
                "method_begin": "const openFileModal = () => {",
                "method_end": "}",
                "range": [
                    61,
                    65
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFiles",
                "method_begin": "const validateFiles = (files) => {",
                "method_end": "}",
                "range": [
                    67,
                    79
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "valid",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validateFileSize",
                "method_begin": "const validateFileSize = (files) => {",
                "method_end": "}",
                "range": [
                    81,
                    89
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "size",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onChangeFile",
                "method_begin": "const onChangeFile = (event, type) => {",
                "method_end": "}",
                "range": [
                    93,
                    115
                ],
                "parameters": [
                    "event",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//commonStore.handleOpenSnackBar(",
                    "//commonStore.handleOpenSnackBar("
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickUpload",
                "method_begin": "const onClickUpload = () => {",
                "method_end": "}",
                "range": [
                    117,
                    150
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span>",
                    "/span>,",
                    "/span>",
                    "/span>,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickClear",
                "method_begin": "const onClickClear = () => {",
                "method_end": "}",
                "range": [
                    152,
                    155
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getIcon",
                "method_begin": "const getIcon = (type) => {",
                "method_end": "}",
                "range": [
                    157,
                    162
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "fileTypes[ind].icon",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "viewFileList",
                "method_begin": "const viewFileList = (value) => {",
                "method_end": "}",
                "range": [
                    164,
                    168
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilePercent",
                "method_begin": "const getFilePercent = () => {",
                "method_end": "}",
                "range": [
                    170,
                    174
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "done.toFixed(2) + ` MB of ${fileSize.toFixed(2)} MB done`",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCancel",
                "method_begin": "const onClickCancel = () => {",
                "method_end": "}",
                "range": [
                    176,
                    185
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//props.history.push(",
                    "/home/upload/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderUploadLimit",
                "method_begin": "const renderUploadLimit = (from) => {",
                "method_end": "}",
                "range": [
                    187,
                    212
                ],
                "parameters": [
                    "from"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadFiles.js",
                "returnType": "(\n            <div className={trialUserCheck() ? 'sFont rowFlex' : 'hidden'} style={{ width: '60%' }}>\n                <div>\n                    <div className={'rowFlex flexStart'} style={{ width: '80%', position: 'relative' }}>\n                        <div className={'colFlex flexCenter'} style={{ width: '80%' }}>\n                            <div className={classes.percentageBar} >\n                                <hr style={{ backgroundColor: '#4484FF', maxWidth: '100%' }} align=\"left\" width={userSettings.usedStorage + '%'} className={classes.percentageLine} />\n                            </div>\n                        </div>\n                    </div>\n                    {\n                        <div className={`sFont rowFlex ${classes.uploadLimit}`}>\n                            {userSettings.storageUsed === 0 ? 0 : (userSettings.storageUsed / 1000).toFixed(2)} MB of {(userSettings.storageLimit / 1000)} MB used.\n                            {(userSettings.storageUsed / 1000).toFixed(2) > (userSettings.storageLimit / 1000) ?\n                                <div className='rowFlex' style={{ position: 'relative' }}>\n                                    <span className={classes.requestQuota} onClick={() => userStore.requestExtension(true, false)}>Request a Quota increase?</span>\n                                    &nbsp;&nbsp;&nbsp;{userStore.extensionProgress ? <div style={{ position: 'absolute', right: '-10%' }}><Loader mini={true} /> </div> : null}\n                                </div>\n                                : null}\n                        </div>}\n\n                </div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/span>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadHome.js": {
        "method_details_": [
            {
                "method_name": "renderBatchSearch",
                "method_begin": "const renderBatchSearch = () => {",
                "method_end": "}",
                "range": [
                    25,
                    27
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadHome.js",
                "returnType": "(<BatchSearch placeholder='Search by Batch ID' setSearchText={setSearchText} searchBatches={searchBatches} batchSearchText={batchSearchText} />)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSearchText",
                "method_begin": "const setSearchText = (value) => {",
                "method_end": "}",
                "range": [
                    29,
                    40
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchBatches",
                "method_begin": "const searchBatches = (event) => {",
                "method_end": "}",
                "range": [
                    42,
                    49
                ],
                "parameters": [
                    "event"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToPage",
                "method_begin": "const goToPage = (type) => {",
                "method_end": "}",
                "range": [
                    67,
                    72
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/${batchPageNo",
                    "/home/upload/page/${batchPageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setBatchesPerPage",
                "method_begin": "const setBatchesPerPage = (value) => {",
                "method_end": "}",
                "range": [
                    88,
                    96
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openBatch",
                "method_begin": "const openBatch = (data) => {",
                "method_end": "}",
                "range": [
                    98,
                    111
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document/page/1/batch/${data._id}/all"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handlewWfChange",
                "method_begin": "const handlewWfChange = (index, value) => {",
                "method_end": "}",
                "range": [
                    113,
                    122
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadHome.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWidth",
                "method_begin": "const getWidth = () => {",
                "method_end": "}",
                "range": [
                    125,
                    132
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadHome.js",
                "returnType": "Math.ceil(100 / count) + '%'",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadSources.js": {
        "method_details_": [
            {
                "method_name": "onClickCancel",
                "method_begin": "const onClickCancel = () => {",
                "method_end": "}",
                "range": [
                    46,
                    48
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadSources.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCopy",
                "method_begin": "const onClickCopy = () => {",
                "method_end": "}",
                "range": [
                    71,
                    76
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadSources.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getHighlightedText",
                "method_begin": "const getHighlightedText = (text, highlight) => {",
                "method_end": "}",
                "range": [
                    78,
                    82
                ],
                "parameters": [
                    "text",
                    "highlight"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadSources.js",
                "returnType": "<span>{parts.map(part => part.toLowerCase() === highlight.toLowerCase() ? <span className={rowFocus !== '' ? classes.workflowHighlight : ''}>{part}</span> : part)}</span>",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/span>",
                    "/span>;"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToLogs",
                "method_begin": "const goToLogs = ()=>{",
                "method_end": "}",
                "range": [
                    84,
                    87
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/UploadSources.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/api-logs/page/1"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/openInPostman.js": {
        "method_details_": [
            {
                "method_name": "setMyVariables",
                "method_begin": "export function setMyVariables(akey, workflow)",
                "method_end": "workflowId = workflow",
                "range": [
                    3,
                    8
                ],
                "parameters": [
                    "akey",
                    "workflow"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/openInPostman.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createEnv",
                "method_begin": "function createEnv()",
                "method_end": "return false;",
                "range": [
                    10,
                    20
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Components/Upload/openInPostman.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/PrivateRoute.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/adminStyles.js": {
        "method_details_": [
            {
                "method_name": "statusStyles",
                "method_begin": "export const statusStyles = theme => ({",
                "method_end": "})",
                "range": [
                    2,
                    64
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/adminStyles.js",
                "returnType": "({\n    pageContainer: {\n        width: '100%',\n        position: 'relative',\n        height: '87%'\n    },\n    pageWrapper: {\n        backgroundColor: theme.palette.white,\n        // boxShadow: '0px 0px 5px rgba(0, 0, 0, 0.2)',\n        margin: '1.2% 1.5vw',\n        height: '94%',\n        borderRadius: '8px'\n    },\n    statFlex: {\n        display: 'flex',\n        flexDirection: 'row',\n        '@media (min-width: 50px) and (max-width: 700px)': {\n            overflowX: 'scroll !important'\n        },\n    },\n    serverUp: {\n        backgroundColor: '#34ca77',\n        color: theme.palette.white,\n        borderRadius: '15px',\n        padding: '4px 1vw',\n        width: 'fit-content'\n    },\n    serverDown: {\n        backgroundColor: '#f04848',\n        color: theme.palette.white,\n        borderRadius: '15px',\n        padding: '4px 1vw',\n        width: 'fit-content'\n    },\n    healthCard: {\n        border: 'solid 2px #c5c6d1',\n        // cursor: 'pointer',\n        borderRadius: '6px',\n        backgroundColor: theme.palette.white,\n        flex: '1',\n        margin: '0 0.5vw 20px 0.5vw',\n        padding: '1vh 1vw',\n        color: '#33343D',\n        position: 'relative',\n        fontWeight: '400',\n        display: 'flex',\n        cursor: 'pointer',\n        \"&:last-child\": {\n            marginRight: '0vw'\n        },\n        \"&:hover\": {\n            //   background: '#FDCC43',\n            border: 'solid 2px black'\n        },\n\n    },\n    activeCard: {\n        // background: '#FDCC43',\n        border: 'solid 2px black'\n\n    },\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "teamStyles",
                "method_begin": "export const teamStyles = theme => ({",
                "method_end": "NA",
                "range": [
                    68,
                    161
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/adminStyles.js",
                "returnType": "({\n    container: {\n        height: '100%',\n        borderRadius: '10px',\n        display: 'flex'\n    },\n    indexerIp:{\n        width: '50%',\n        marginRight: '1vw',\n        marginBottom: '1vh'\n    },\n    indexerArray: {\n        backgroundColor: '#ededed',\n        fontSize: '12.5px',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n        boxShadow: '0px -1px 20px rgba(0, 0, 0, 0.07)',\n        width: '100%',\n        padding: '1vh 0',\n        border: 'solid 1px lightGray',\n        cursor: 'default',\n        //  display: 'flex',\n        flexWrap: 'wrap'\n    },\n    indexer: {\n        padding: '0 0',\n        //  backgroundColor: '#e0e0e0',\n        verticalAlign: 'center',\n        padding: '1vh 1vw',\n        borderBottom: 'solid 1px lightGray',\n        \"&:last-child\": {\n            borderBottom: 0,\n        },\n    },\n    mappingContainer: {\n        marginTop: '-6px',\n        padding: 'calc(2% + 6px) 2vw ',\n        height: 'calc(100% - 48px - 50px)',\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%'\n    },\n    indexerContainer: {\n        backgroundColor: '#f8fafc',\n        width: '40%'\n    },\n    miniMappingContainer: {\n        padding: '30px 2vw 30px 2vw ',\n        backgroundColor: '#f8fafc',\n        height: 'calc(100% - 48px - 110px)',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    flexGrow: {\n        display: 'flex',\n        flexDirection: 'column',\n        flex: '2',\n        height: '78%',\n        overflowY: 'scroll'\n    },\n    configFooter: {\n        position: 'absolute',\n        bottom: '0',\n        boxShadow: '0px -1px 20px rgba(0, 0, 0, 0.07)',\n        padding: '2vh 1vw',\n        background: theme.palette.white,\n        display: 'flex',\n        justifyContent: 'flex-end',\n        width: 'calc(100% - 2vw)',\n        height: '30px'\n    },\n    selectLabel: {\n        display: 'flex',\n        color: theme.palette.headerGray,\n        fontSize: '12.5px',\n        marginBottom: '0.8vh',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    notifField: {\n        marginBottom: '1.5vh'\n    },\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/commonStyles.js": {
        "method_details_": [
            {
                "method_name": "homeStyles",
                "method_begin": "export const homeStyles = theme => ({",
                "method_end": "})",
                "range": [
                    3,
                    51
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/commonStyles.js",
                "returnType": "({\n    pageContainer: {\n        backgroundColor: theme.palette.white,\n        marginTop: '64px',\n        height: 'calc(100% - 58px)',\n        width: '100%',\n        // display: 'flex',\n        justifyContent: 'center'\n    },\n    expandIcon: {\n        position: 'absolute',\n        right: '0',\n        zIndex: '1200',\n        top: 'calc(58px)',\n        left: '17%',\n        width: 'fit-content',\n        '@media screen and (max-width: 1024px)': {\n            left: '21%',\n        },\n        transform: 'rotate(180deg)'\n    },\n    expandIconClose: {\n        position: 'absolute',\n        right: '0',\n        zIndex: '1200',\n        top: 'calc(58px + 3vh)',\n        left: '4%',\n        width: 'fit-content',\n    },\n    drawerOpen: {\n        width: '85%',\n        '@media screen and (max-width: 1024px)': {\n            width: '80%',\n        },\n    },\n    drawerClose: {\n        width: '95%',\n    },\n    openMargin: {\n        width: '18%',\n        '@media screen and (max-width: 1024px)': {\n            width: '22%',\n        },\n    },\n    closeMargin: {\n        width: '5%'\n    }\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "headerStyles",
                "method_begin": "export const headerStyles = theme => ({",
                "method_end": "})",
                "range": [
                    53,
                    181
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/commonStyles.js",
                "returnType": "({\n    appBar: {\n        backgroundColor: '#f1f4f7',\n        boxShadow: 'none',\n        height: '58px',\n    },\n    openMargin: {\n        marginLeft: '18%',\n        '@media screen and (max-width: 1024px)': {\n            marginLeft: '22%',\n        },\n    },\n    closeMargin: {\n        marginLeft: '5%'\n    },\n    adminBtn: {\n        cursor: 'pointer',\n        color: '#33343D',\n        fontWeight: '600',\n        backgroundColor: '#FDCC43',\n        padding: '4px 1vw',\n        borderRadius: '16px',\n        width: 'fit-content',\n        margin: '0 1vw 0 1vw',\n        height: 'fit-content',\n        alignSelf: 'center',\n    },\n    reviewSession: {\n        marginLeft: '1vw',\n        backgroundColor: '#30b283',\n        color: 'white',\n        padding: '4px 1vw',\n        borderRadius: '15px',\n        cursor: 'pointer',\n        display: 'flex',\n        height: 'fit-content'\n    },\n    trialExpiryMsg: {\n        color: theme.palette.blue,\n        fontWeight: '500'\n    },\n    headerLogo: {\n        cursor: 'pointer',\n        width: '115px'\n    },\n    tabText: {\n        opacity: '1 !important'\n    },\n    toolbar: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        color: theme.palette.black,\n        fontSize: '12px',\n        // borderBottom: 'solid 1px rgba(0,0,0,0.1)',\n        backgroundColor: theme.palette.white,\n        boxShadow: '0px 1px 0px #E7E8F2'\n    },\n    tabContainer: {\n        height: '100%',\n        display: 'flex',\n        color: theme.palette.white\n    },\n    tabRoot: {\n        height: '100%',\n        padding: '0',\n        minWidth: 'fit-content',\n        margin: '0 1vw',\n        lineHeight: 'normal'\n    },\n    indicator: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        backgroundColor: theme.palette.blue,\n        \"& > span\": {\n            //  maxWidth: 40,\n            width: \"100%\",\n            display: 'none'\n        }\n    },\n    headerTabActive: {\n        display: 'flex',\n        backgroundColor: theme.palette.darkYellow,\n        borderRadius: '21px',\n        color: theme.palette.black,\n        padding: '8px 1vw',\n        transition: 'background 0.15s ease-out',\n        [theme.breakpoints.down('xs')]: {\n            padding: '4px 1vw',\n        }\n    },\n    headerTab: {\n        display: 'flex',\n        backgroundColor: 'transparent',\n        borderRadius: '21px',\n        padding: '8px 1vw',\n        lineHeight: 'normal'\n    },\n    profileButton: {\n        borderRadius: '50%',\n        width: '25px',\n        height: '25px',\n        padding: '4px',\n        backgroundColor: theme.palette.white,\n        border: `solid 2.6px ${theme.palette.darkYellow}`,\n        color: theme.palette.black1,\n        textAlign: 'center',\n        fontSize: '16px',\n        fontWeight: '500',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textTransform: 'capitalize',\n        cursor: 'pointer',\n        margin: '0 4px 0 1vw'\n    },\n    username: {\n        color: '#a0aecc',\n        fontSize: '12px',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        fontWeight: '500',\n    },\n    arrow: {\n        cursor: 'pointer',\n        color: '#ccd4e2',\n    }\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "utilStyles",
                "method_begin": "export const utilStyles = theme => ({",
                "method_end": "})",
                "range": [
                    183,
                    201
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/commonStyles.js",
                "returnType": "({\n    checkbox: {\n        borderRadius: '5px',\n        border: 'solid 1px rgba(0, 0, 0, 0.2)',\n        backgroundColor: theme.palette.white,\n        zIndex: '10',\n        width: '13px',\n        height: '13px'\n    },\n    checkedBox: {\n        backgroundColor: theme.palette.blue,\n        borderRadius: '5px',\n        border: `solid 1px ${theme.palette.blue}`,\n        zIndex: '10',\n        width: '13px',\n        height: '13px'\n    }\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "snackbarStyles",
                "method_begin": "export const snackbarStyles = theme => ({",
                "method_end": "})",
                "range": [
                    204,
                    230
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/commonStyles.js",
                "returnType": "({\n    success: {\n        backgroundColor: theme.palette.turquoise,\n        boxShadow: 'none',\n        fontSize: '12px',\n        fontWeight: 'normal',\n        zIndex: '1400'\n    },\n    info: {\n        backgroundColor: '#3b3b3b',\n        color: theme.palette.white,\n        boxShadow: 'none',\n        fontSize: '12px',\n        fontWeight: 'normal',\n        zIndex: '1400'\n    },\n    error: {\n        backgroundColor: theme.palette.red,\n        boxShadow: 'none',\n        fontSize: '12px',\n        fontWeight: 'normal',\n        zIndex: '1400'\n    },\n    root: {\n        zIndex: '0'\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "dialogStyles",
                "method_begin": "export const dialogStyles = theme => ({",
                "method_end": "})",
                "range": [
                    233,
                    403
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/commonStyles.js",
                "returnType": "({\n    dialog: {\n        width: '19%',\n        boxShadow: '0 0 87px 0 rgba(71, 71, 71, 0.2)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '10px',\n        '@media (min-width: 50px) and (max-width: 700px)': {\n            width: '80%',\n        },\n\n    },\n    tableData:{\n        width: '30%',\n        textAlign: 'center',\n        border:'solid 1px',\n        color: theme.palette.headerGray,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n\n    },\n    downloadLink: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n        color: theme.palette.blue,\n        margin: '1vh 0',\n        textAlign: 'center',\n        width: 'fit-content'\n    },\n    vRadio: {\n        fontWeight: '400',\n    },\n    selectLabel: {\n        display: 'flex',\n        color: theme.palette.headerGray,\n        fontSize: '12.5px',\n        marginBottom: '0.8vh',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    lgDialog: {\n        width: '50%',\n        boxShadow: '0 0 87px 0 rgba(71, 71, 71, 0.2)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '10px'\n    },\n    largeDialog: {\n        width: '50%',\n        boxShadow: '0 0 87px 0 rgba(71, 71, 71, 0.2)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '10px'\n    },\n    notifField: {\n        marginBottom: '1.5vh'\n    },\n    smallRadioButton: {\n        \"& svg\": {\n            width: \"0.7em\",\n            height: \"0.7em\"\n        }\n    },\n    trialInput: {\n        maxWidth: '50px',\n        padding: '4px',\n        marginRight: '1vw'\n    },\n    radioCont: {\n        display: 'flex',\n        flexDirection: 'row !important'\n    },\n    mappingRow: {\n        border: '1px solid rgba(0, 0, 0, 0.2)',\n        display: 'flex',\n        borderBottom: 'none',\n        \"&:last-child\": {\n            borderBottom: '1px solid rgba(0, 0, 0, 0.2) !important',\n        },\n        \"&:first-child\": {\n            marginTop: '1vh'\n        },\n    },\n    mappingKey: {\n        width: '50%',\n        borderRight: '1px solid rgba(0, 0, 0, 0.2)',\n        padding: '0.5vh 1vw',\n        fontWeight: '500',\n        backgroundColor: '#dee9ff'\n    },\n    infoMsg: {\n        color: '#666869',\n        marginLeft: '5px'\n    },\n    mappingValue: {\n        width: '50%',\n        padding: '0.5vh 1vw',\n    },\n    userDetails: {\n        width: '60%',\n        boxShadow: '0 0 87px 0 rgba(71, 71, 71, 0.2)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '10px'\n    },\n    medDialog: {\n        width: '30%',\n        boxShadow: '0 0 87px 0 rgba(71, 71, 71, 0.2)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '10px'\n    },\n    dwDialog: {\n        width: '35%',\n        boxShadow: '0 0 87px 0 rgba(71, 71, 71, 0.2)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '10px'\n    },\n    mappingDialog: {\n        width: '45%',\n        height: '50%',\n        boxShadow: '0 0 87px 0 rgba(71, 71, 71, 0.2)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '10px'\n    },\n    dialogHeading: {\n        fontSize: '16px',\n        fontWeight: '500',\n        color: theme.palette.headerGray,\n        textAlign: 'center',\n        margin: '1vh 0'\n    },\n    userDetailHeading: {\n        fontWeight: '500',\n        margin: '1vh 0',\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    dHeading: {\n        color: '#000000',\n        fontWeight: '400',\n        textAlign: 'left',\n        borderBottom: '1px solid #D1D1D1',\n        padding: '3vh 1.5vw',\n    },\n    dialogSubHeading: {\n        fontSize: '11px',\n        color: theme.palette.headerGray,\n        textAlign: 'center'\n    },\n    backdrop: {\n        // background: 'transparent'\n    },\n    buttonContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        margin: '1vh 0 3vh 0'\n    },\n    btnContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        margin: '1vh 0 3vh 0'\n    },\n    titleRoot: {\n        paddingBottom: '1vh'\n    },\n    tRoot: {\n        padding: '0'\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "adminDashboardStyles",
                "method_begin": "export const adminDashboardStyles = theme => ({",
                "method_end": "})",
                "range": [
                    405,
                    484
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/commonStyles.js",
                "returnType": "({\n    pageWrapper: {\n        backgroundColor: theme.palette.white,\n        // boxShadow: '0px 0px 5px rgba(0, 0, 0, 0.2)',\n        margin: '1.2% 1.5vw',\n        height: '94%',\n        borderRadius: '8px'\n    },\n    configContainer: {\n        display: 'flex',\n        width: '100%',\n        height: '100%',\n    },\n    configCard: {\n        borderRadius: '8px',\n        border: '1px solid #BCC6D6',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        marginRight: '1vw',\n        backgroundColor: theme.palette.white,\n        color: '#00000',\n        width: '12%',\n        padding: '0 2%',\n        fontWeight: '500',\n        height: '40%',\n        \"&:nth-child(2)\": {\n            \"&:hover\": {\n                border: `solid 1px ${theme.palette.darkYellow}`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(1)\": {\n            \"&:hover\": {\n                border: `1px solid #1676E2`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(3)\": {\n            \"&:hover\": {\n                border: `1px solid #9B99EA`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(4)\": {\n            \"&:hover\": {\n                border: `1px solid black`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(5)\": {\n            \"&:hover\": {\n                border: `1px solid #25AE88`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(6)\": {\n            \"&:hover\": {\n                border: `1px solid #07acab`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(7)\": {\n            \"&:hover\": {\n                border: `1px solid #6E76E5`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n    },\n    configHeading: {\n        margin: '0 !important'\n    },\n    configDesc: {\n        color: 'black',\n        opacity: '0.7',\n        fontWeight: '400',\n        margin: '2vh 0 1vh  0',\n    },\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "dashboardStyles",
                "method_begin": "export const dashboardStyles = theme => ({",
                "method_end": "})",
                "range": [
                    487,
                    811
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/commonStyles.js",
                "returnType": "({\n    dateRange: {\n        color: theme.palette.white,\n        backgroundColor: theme.palette.blue,\n        fontSize: '13px',\n        cursor: 'pointer',\n        padding: '4px 8px',\n        borderRadius: '7px',\n        border: 'solid 1px #d3dbe4',\n        display: 'flex'\n    },\n    signalContainer: {\n        backgroundColor: theme.palette.white,\n        borderRadius: '8px',\n        boxShadow: '0px 2px 2px 0 rgba(4, 28, 57, 0.1)',\n        height: '12px',\n        width: '45px',\n        display: 'flex',\n        justifyContent: 'space-around'\n    },\n    skeletonCont: {\n        margin: '2vh 2vw',\n        height: '100%',\n        position: 'relative'\n    },\n    skelWidget: {\n        width: '15.5%',\n        marginRight: '1%',\n        height: '100%'\n    },\n    skelWidgetBig: {\n        width: '48.25%',\n        marginRight: '1%',\n        height: '100%',\n        marginTop: '1.5%'\n    },\n    unlockCont: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        top: '45%',\n        width: '100%',\n        zIndex: '1'\n    },\n    unlockMsg: {\n        backgroundColor: 'rgba(0,0,0,0.7)',\n        color: 'white',\n        padding: '2vh 2vw',\n        borderRadius: '20px',\n        display: 'flex'\n    },\n    signal: {\n        borderRadius: '50%',\n        width: '8px',\n        height: '8px',\n        backgroundColor: '#dcdcdc',\n    },\n    loaderDiv: {\n        backgroundColor: theme.palette.dark,\n        height: '100%',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        display: 'flex'\n    },\n    customPieChart: {\n        position: 'relative',\n        width: 'calc(100% - 2vw)',\n        height: '100%',\n        display: 'flex',\n        margin: '0 0 0 2vw',\n        flex: '1',\n        justifyContent: 'flex-end'\n    },\n    pieData: {\n        fontSize: '11px',\n        color: '#6f7e9c',\n        marginRight: '30px'\n    },\n    statItem: {\n        fontSize: '10px',\n        color: '#96a6c8',\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginTop: '1.8vh'\n    },\n    statCount: {\n        color: '#495776',\n        fontWeight: '500'\n    },\n    rightContainer: {\n        boxShadow: '0px 2px 2px 0 rgba(28, 45, 62, 0.11)',\n        borderRadius: '15px',\n        width: '30%',\n        backgroundColor: theme.palette.white,\n        marginTop: '2vw',\n        display: 'flex',\n        flexDirection: 'column',\n        height: 'calc(100% - 2vw)'\n    },\n    leftContainer: {\n        width: '78%',\n        marginRight: '2%',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    rangeDisplay: {\n        margin: '0 8px',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column'\n    },\n    heading: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        color: '#6f7e9c',\n        fontSize: '16px',\n        display: 'flex',\n        fontWeight: '500',\n        margin: '20px 0 0 0'\n    },\n    container: {\n        margin: '0 ',\n        padding: '30px calc(24px + 1vw)',\n        height: 'calc(100%  - 58px - 2vh)',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        overflowY: 'scroll',\n        overflowX: 'hidden'\n    },\n    uploadBox: {\n        borderRadius: '15px',\n        boxShadow: '0 0 22px 0 rgba(0, 0, 0, 0.09)',\n        backgroundColor: theme.palette.white,\n        width: '10%',\n        padding: '2vw 2vw',\n        fontSize: '12px',\n        color: theme.palette.textGray,\n        height: '100%',\n        fontWeight: '500',\n        marginRight: '2vw',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between'\n    },\n    totalUploads: {\n        fontSize: '30px',\n        color: '#585858',\n        fontWeight: '500'\n    },\n    firstRow: {\n        height: '130px',\n        display: 'flex',\n        padding: '2vw 0 4vw 0'\n    },\n    healthBox: {\n        width: '90%',\n        maxWidth: '90%',\n        backgroundColor: theme.palette.blue,\n        color: theme.palette.white,\n        height: '100%',\n        padding: '2vw 2vw',\n        borderRadius: '15px',\n        boxShadow: '0px 2px 2px 0 rgba(28, 45, 62, 0.11)',\n        fontSize: '14px',\n        fontWeight: '500',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        backgroundImage: 'url(https://static-assets-amygb.s3.ap-south-1.amazonaws.com/idpDashboard.png)'\n    },\n    serverName: {\n        fontSize: '13px',\n        fontWeight: 'bold'\n    },\n    hStatusContainer: {\n        display: 'flex',\n        fontSize: '13px',\n        fontWeight: '500',\n    },\n    healthStatus: {\n        lineHeight: '1.7',\n        width: 'max-content',\n        borderRight: 'solid 1px rgba(255,255,255,0.5)',\n        \"&:last-child\": {\n            border: 'none',\n            paddingRight: '1vw',\n        },\n        marginRight: '1vw !important',\n        \"&:first-child\": {\n            marginRight: '1vw !important',\n            paddingRight: '1vw',\n        },\n    },\n    healthCard: {\n        borderRight: 'solid 1px rgba(255,255,255,0.5)',\n        paddingRight: '0',\n        \"&:last-child\": {\n            border: 'none'\n        },\n        maxWidth: '33%',\n        width: '33%',\n        marginRight: '1vw',\n        \"&:first-child\": {\n            marginRight: '1vw',\n            paddingLeft: '0',\n        },\n    },\n    healthLabel: {\n        fontSize: '11px',\n        fontWeight: 'normal'\n    },\n    statTable: {\n        boxShadow: '0px 2px 2px 0 rgba(28, 45, 62, 0.11)',\n        borderRadius: '15px',\n        backgroundColor: theme.palette.white,\n        fontSize: '12px',\n        color: theme.palette.textGray,\n        width: '33%',\n        flex: '1',\n        padding: '1vw 1.5vw 1.6vw 1.5vw',\n        marginRight: '2vw',\n        \"&:last-child\": {\n            marginRight: '0'\n        }\n\n    },\n    secondRow: {\n        display: 'flex',\n        width: '100%',\n        flex: '1'\n    },\n    statHeader: {\n        width: '100%',\n        justifyContent: 'space-between',\n        display: 'flex',\n        marginBottom: '2vw',\n        position: 'relative',\n        color: '#76839d',\n        fontSize: '12px',\n        margin: '2vh 0',\n        fontWeight: '500'\n    },\n    expandIcon: {\n        position: 'absolute',\n        right: '0'\n    },\n\n    tableContainer: {\n        overflow: 'hidden',\n        flex: '1'\n    },\n    tableRoot: {\n        //  boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)'\n        border: 'solid 0px rgba(0, 0, 0, 0.1)',\n        maxHeight: '90%',\n        borderRadius: '0'\n    },\n    tableHeader: {\n        backgroundColor: '#f8f9fa',\n        fontSize: '11px !important',\n        borderRight: 'none !important',\n        \"&:last-child\": {\n            borderRight: 'none !important',\n        },\n        borderBottom: 'solid 1px rgba(40, 40, 40,0.03)',\n        borderTop: 'solid 1px rgba(40, 40, 40,0.03)'\n    },\n    tableCell: {\n        fontWeight: 'normal !important',\n        fontSize: '11px !important',\n        borderRight: 'none !important',\n        \"&:last-child\": {\n            borderRight: 'none !important',\n        },\n        borderBottom: 'solid 1px rgba(40, 40, 40,0.03)',\n    },\n    percentageBar: {\n        border: `none`,\n        backgroundColor: '#f2f2f2',\n        width: '100%'\n    },\n    barContainer: {\n        padding: '1vh 0vw',\n        fontSize: '13px',\n        width: '100%',\n        marginBottom: '0vh'\n    },\n    percentageContainer: {\n        fontSize: '13px',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        flexDirection: 'column',\n        marginLeft: '2vw'\n    },\n    percentage: {\n        padding: '4px 1vw',\n        borderRadius: '5px'\n    },\n    innerContainer: {\n        margin: '2vh 1.8vw',\n\n    },\n    percentageLine: {\n        height: '3px', border: 'none', margin: '0'\n    },\n    docStatus: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    statusContainer: {\n        width: 'calc(100% - 6vw)',\n        borderRadius: '15px',\n        backgroundColor: theme.palette.white,\n        fontSize: '12px',\n        fontWeight: '500',\n        color: theme.palette.textGray,\n        padding: '2vw 3vw',\n        marginRight: '2vw',\n        \"&:last-child\": {\n            marginRight: '0'\n        }\n    },\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "https://static-assets-amygb.s3.ap-south-1.amazonaws.com/idpDashboard.png",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sidebarStyles",
                "method_begin": "export const sidebarStyles = theme => ({",
                "method_end": "})",
                "range": [
                    814,
                    918
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/commonStyles.js",
                "returnType": "({\n    burgerIcon: {\n        paddingLeft: '2vw',\n        width: '70%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        cursor: 'pointer',\n\n    },\n    sidebarTooltip: {\n        backgroundColor: 'black !important',\n        opacity: '1 !important',\n        backgroundColor: '#383a3d !important'\n    },\n    miniBurgerIcon: {\n        cursor: 'pointer',\n        color: 'white',\n        width: '25px',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: 'nowrap',\n        backgroundColor: theme.palette.white,\n\n    },\n    uploadText: {\n        padding: '1vw 2vw 0 2vw',\n        color: theme.palette.white\n    },\n    uploadSubText: {\n        opacity: '0.7',\n        whiteSpace: 'initial',\n        wordWrap: 'break-word'\n    },\n    uploadBtn: {\n        border: '1px dashed #FDCC43',\n        backgroundColor: '#2C2C2C',\n        padding: '1vh 1vw',\n        display: 'flex',\n        justifyContent: 'space-between',\n        cursor: 'pointer',\n        color: '#FDCC43',\n        borderRadius: '5px',\n        width: '100%'\n    },\n    drawerOpen: {\n        width: '18%',\n        backgroundColor: '#202124',\n        transition: 'transform 1000ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n        '@media screen and (max-width: 1024px)': {\n            width: '22%',\n        },\n    },\n    drawerClose: {\n        overflowX: 'hidden',\n        transition: 'transform 1000ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n        backgroundColor: '#202124',\n        width: '5%',\n    },\n    sidebarList: {\n        position: 'relative'\n    },\n\n    listItemText: {\n        marginLeft: '1vw'\n    },\n    listItemIcon: {\n        width: '65px',\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    listItem: {\n        padding: '1vw 2vw',\n        display: 'flex',\n        opacity: '0.8',\n        fontWeight: '400',\n        color: theme.palette.white,\n        cursor: 'pointer'\n    },\n    activeListItem: {\n        opacity: '1',\n        color: '#FDCC43',\n        backgroundColor: theme.palette.black\n    },\n    toolbar: {\n        display: 'flex',\n        backgroundColor: theme.palette.black,\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        padding: '0px'\n    },\n    openDrawer: {\n        justifyContent: 'space-between'\n    },\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/configStyles.js": {
        "method_details_": [
            {
                "method_name": "homeStyles",
                "method_begin": "export const homeStyles = theme => ({",
                "method_end": "})",
                "range": [
                    2,
                    99
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/configStyles.js",
                "returnType": "({\n    pageContainer: {\n        width: '100%',\n        position: 'relative',\n        height: '87%'\n    },\n    pageWrapper: {\n        backgroundColor: theme.palette.white,\n        // boxShadow: '0px 0px 5px rgba(0, 0, 0, 0.2)',\n        margin: '1.2% 1.5vw',\n        height: '94%',\n        borderRadius: '8px'\n    },\n    footer: {\n        height: '13%',\n        backgroundColor: theme.palette.white,\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column'\n    },\n    stepper: {\n        padding: '0 !important'\n    },\n    configContainer: {\n        display: 'flex',\n        width: '100%',\n        height: '100%',\n\n    },\n    configCard: {\n        borderRadius: '8px',\n        cursor: 'pointer',\n        border: '1px solid #BCC6D6',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        marginRight: '1vw',\n        backgroundColor: theme.palette.white,\n        color: '#00000',\n        width: '18%',\n        padding: '0 2%',\n        fontWeight: '500',\n        height: '40%',\n        \"&:nth-child(2)\": {\n            \"&:hover\": {\n                border: `solid 1px ${theme.palette.darkYellow}`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(1)\": {\n            \"&:hover\": {\n                border: `1px solid #1676E2`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(3)\": {\n            \"&:hover\": {\n                border: `1px solid #9B99EA`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(4)\": {\n            \"&:hover\": {\n                border: `1px solid black`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(5)\": {\n            \"&:hover\": {\n                border: `1px solid #25AE88`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(6)\": {\n            \"&:hover\": {\n                border: `1px solid #07acab`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n        \"&:nth-child(7)\": {\n            \"&:hover\": {\n                border: `1px solid #6E76E5`,\n                boxShadow: '0px 119px 110px rgba(0, 0, 0, 0.16), 0px 35.875px 33.1618px rgba(0, 0, 0, 0.104254), 0px 14.9006px 13.7737px rgba(0, 0, 0, 0.08), 0px 5.38927px 4.98168px rgba(0, 0, 0, 0.0557458)'\n            },\n        },\n    },\n\n    configHeading: {\n        margin: '1vh 0 0.5vh 0'\n    },\n    configDesc: {\n        color: 'black',\n        opacity: '0.7',\n        fontWeight: '400'\n    },\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "dialogStyles",
                "method_begin": "export const dialogStyles = theme => ({",
                "method_end": "})",
                "range": [
                    101,
                    189
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/configStyles.js",
                "returnType": "({\n    dialog: {\n        width: 'calc(70% - 4vw)',\n        maxWidth: 'inherit',\n        borderRadius: '10px',\n        height: 'calc(80% - 10vh)',\n        overflowY: 'unset',\n        padding: '2vh 2vw 8vh 2vw'\n    },\n    requestCont: {\n        border: '1px solid rgba(0, 0, 0, 0.2)',\n        padding: '0 2vw',\n        // overflow: 'scroll',\n        marginTop: '1vh',\n        position: 'relative'\n    },\n    copyButton: {\n        position: 'absolute',\n        right: '10px',\n        top: '10px'\n    },\n    mappingRow: {\n        border: '1px solid rgba(0, 0, 0, 0.2)',\n        display: 'flex',\n        borderBottom: 'none',\n        \"&:last-child\": {\n            borderBottom: '1px solid rgba(0, 0, 0, 0.2) !important',\n        },\n        \"&:first-child\": {\n            marginTop: '1vh'\n        },\n    },\n    mappingKey: {\n        width: '50%',\n        borderRight: '1px solid rgba(0, 0, 0, 0.2)',\n        padding: '0.5vh 1vw',\n        fontWeight: '500',\n        backgroundColor: '#dee9ff'\n    },\n    mappingValue: {\n        width: '50%',\n        padding: '0.5vh 1vw',\n    },\n    payLoadDialog: {\n        width: 'calc(40% - 4vw)',\n        borderRadius: '10px',\n        maxHeight: 'calc(80% - 10vh)',\n        overflowY: 'unset',\n        padding: '2vh 2vw 3vh 2vw'\n    },\n    closeButton: {\n        position: 'absolute',\n        right: '-4%',\n        top: '-3%',\n        color: theme.palette.white\n    },\n    backdrop: {\n        position: 'absolute'\n    },\n    dialogActions: {\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    titleRoot: {\n        display: 'flex',\n        fontSize: '13px',\n        color: theme.palette.headerGray,\n        paddingLeft: '0px',\n        paddingRight: '0px'\n    },\n    apiTitle: {\n        color: 'black',\n        textAlign: 'center',\n        fontWeight: '500'\n    },\n    dialogContent: {\n        overflow: 'hidden'\n    },\n    ocrDialogContent: {\n        height: '35vh',\n        overflow: 'hidden',\n        overflowY: 'scroll'\n    },\n    apiDialogContent: {\n        maxHeight: '80%',\n        overflow: 'hidden',\n        overflowY: 'scroll'\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "configStyles",
                "method_begin": "export const configStyles = theme => ({",
                "method_end": "})",
                "range": [
                    192,
                    394
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/configStyles.js",
                "returnType": "({\n    inputSourceCont: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        height: '55%',\n        margin: '4vh 0'\n    },\n    disabledAction: {\n        display: 'flex',\n        backgroundColor: 'lightGray',\n        padding: '0 6px',\n        margin: '0 0 0 6px'\n    },\n    actionItem: {\n        padding: '0 6px',\n        margin: '0 0 0 6px'\n    },\n    tableAction: {\n        height: '30px',\n        padding: '1vh 0 ',\n        backgroundColor: theme.palette.white,\n        cursor: 'pointer',\n        // borderRadius: '6px',\n        zIndex: '99',\n        position: 'absolute',\n        display: 'flex',\n        border: 'solid 1px lightGray',\n        justifyContent: 'space-between'\n    },\n    inputSourceContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        width: '100%',\n        height: '55%',\n        margin: '4vh 0',\n        alignItems: 'center'\n    },\n    addInputValueBtn: {\n        color: theme.palette.blue,\n        textDecoration: 'underline'\n    },\n    ipValueContainer: {\n        marginBottom: '1vh',\n        display: 'flex',\n        justifyContent: 'space-between',\n        position: 'relative'\n    },\n    apiForm: {\n        backgroundColor: '#fafafa',\n        padding: '0 2vw 2vh 2vw',\n        borderRadius: '10px',\n        margin: '0 -2vw 2vh -2vw',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        position: 'relative'\n    },\n    apiDelButton: {\n        backgroundColor: theme.palette.blue,\n        position: 'absolute',\n        borderRadius: '5px',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        top: '50%',\n        right: '-10%',\n        padding: '1%'\n    },\n    ipDelBtn: {\n        position: 'absolute',\n        right: '-10%',\n        top: '50%'\n    },\n    ipValueInput: {\n        width: '49%'\n    },\n    inputType: {\n        padding: '1vh 1vw',\n        textAlign: 'center',\n        width: '10vw',\n        borderRadius: '10px',\n        margin: '0 1vw',\n        cursor: 'pointer',\n        color: theme.palette.headerGray,\n        fontSize: '13px',\n        height: '100%',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        display: 'flex',\n        justifyContent: 'center',\n        \"&:hover\": {\n            border: `solid 2px ${theme.palette.darkYellow}`\n        },\n    },\n    selectedInputsource: {\n        border: `solid 2px ${theme.palette.darkYellow}`,\n    },\n    buttonContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        margin: '2vh 0'\n    },\n    ocrForm: {\n        width: '50%'\n    },\n    tableContainer: {\n        overflow: 'hidden',\n        flex: '1'\n    },\n    table: {\n\n        borderRadius: '10px'\n    },\n    apiTableCell: {\n        padding: '0vh !important',\n        fontWeight: 'normal !important',\n        fontSize: '12px !important',\n        borderRight: ' solid 1px rgba(0, 0, 0, 0.1)'\n    },\n    tableRoot: {\n        //  boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)'\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        maxHeight: '90%',\n        borderRadius: '10px'\n    },\n    tableHeader: {\n        backgroundColor: '#ebebed',\n        borderRight: ' solid 1px rgba(0, 0, 0, 0.1)'\n    },\n    tableCell: {\n        fontWeight: 'normal !important',\n        fontSize: '12px !important',\n        borderRight: ' solid 1px rgba(0, 0, 0, 0.1)'\n    },\n    tabContainer: {\n        marginBottom: '2vh'\n    },\n    tabRoot: {\n        fontSize: '12px',\n        minWidth: 'auto',\n        paddingLeft: '0px',\n        paddingRight: '0px',\n        marginRight: '1vw',\n        marginBottom: '-16px'\n    },\n    ocrAliasTable: {\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: '50%',\n        width: 'fit-content',\n        borderRadius: '10px',\n        fontSize: '13px',\n        color: theme.palette.headerGray,\n    },\n    ocrApiForm: {\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: '50%',\n        width: 'fit-content',\n        borderRadius: '10px',\n        fontSize: '12.5px',\n        color: theme.palette.headerGray,\n        fontWeight: '500'\n    },\n    aliasInput: {\n        border: 'none',\n        outline: 'none',\n        color: theme.palette.headerGray,\n        backgroundColor: 'white',\n        \"&:hover\": {\n            backgroundColor: 'white'\n        },\n        \"&:focus\": {\n            backgroundColor: 'white'\n        },\n    },\n    inputTableCell: {\n        fontWeight: 'normal !important',\n        fontSize: '12px !important',\n        backgroundColor: 'white',\n        \"&:hover\": {\n            backgroundColor: 'white'\n        },\n        \"&:focus\": {\n            backgroundColor: 'white'\n        },\n        borderRight: ' solid 2px rgba(0, 0, 0, 0.1)'\n    },\n    checkbox: {\n        borderRight: ' solid 1px rgba(0, 0, 0, 0.1)'\n    },\n    selectedMenuItem: {\n        backgroundColor: '#f3f4f8'\n    },\n    radioLabel: {\n        fontSize: '13px',\n        color: theme.palette.headerGray\n    },\n    addApiButton: {\n        color: theme.palette.blue,\n        fontSize: '12px',\n        textDecoration: 'underline',\n        cursor: 'pointer'\n    }\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "ruleStyles",
                "method_begin": "export const ruleStyles = theme => ({",
                "method_end": "})",
                "range": [
                    397,
                    476
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/configStyles.js",
                "returnType": "({\n    listContainer: {\n        backgroundColor: theme.palette.white,\n        margin: '0 calc(24px + 1vw)',\n        border: 'solid 1px rgba(0, 0, 0, 0.05)',\n        boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        borderRadius: '10px',\n        height: 'fit-content'\n    },\n    listHeader: {\n        color: theme.palette.headerGray,\n        fontSize: '20px',\n        fontWeight: '300',\n        padding: '2.5vh 2vw',\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    searchContainer: {\n        margin: '0px calc(24px + 1vw) 15px calc(24px + 1vw)',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: '30px'\n    },\n    ruleContainer: {\n        margin: '30px calc(24px + 1vw) 0 calc(24px + 1vw) ',\n    },\n    addButton: {\n        boxShadow: ' 0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        borderRadius: '5px',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        display: 'flex',\n        color: '#646884',\n        fontWeight: '500',\n        fontSize: '12px',\n        padding: '0 1vw',\n        marginRight: '1vw',\n        cursor: 'pointer',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    saveRule: {\n        display: 'flex',\n        color: theme.palette.white,\n        fontWeight: '500',\n        borderRadius: '5px',\n        boxShadow: ' 0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        backgroundColor: '#157fff',\n        fontSize: '12px',\n        padding: '0 1vw',\n        marginLeft: '1vw',\n        cursor: 'pointer',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    ruleRow: {\n        display: 'flex',\n        marginBottom: '2vh'\n    },\n    rowField: {\n        width: '50%',\n        marginRight: '1vw',\n        display: 'flex'\n    },\n    ruleDoc: {\n        width: '100%',\n        display: 'flex',\n    },\n    deleteIcon: {\n        color: theme.palette.warmGray,\n        marginRight: '1vw',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    disabled: {\n        cursor: 'not-allowed',\n        backgroundColor: theme.palette.warmGray\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "mappingStyles",
                "method_begin": "export const mappingStyles = theme => ({",
                "method_end": "})",
                "range": [
                    479,
                    730
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/configStyles.js",
                "returnType": "({\n    container: {\n        /* backgroundColor: theme.palette.white,\n         margin: '30px calc(24px + 1vw) 0 calc(24px + 1vw)',\n         border: 'solid 1px rgba(0, 0, 0, 0.05)',\n         boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n         borderRadius: '10px',\n         height: 'fit-content'*/\n        height: '100%',\n        borderRadius: '10px',\n    },\n    inputField:{\n        padding: '0 !important'\n    },\n    tableCell:{\n        padding: '0',\n        border: 'solid 1px black !important',\n        padding: '0 1vw',\n        \"&:last-child\": {\n            border: 'solid !important'\n        },\n       \n    },\n    errorTableCell:{\n        padding: '0',\n        border: 'solid 2px red !important',\n        padding: '0 1vw',\n        \"&:last-child\": {\n            border: 'solid !important'\n        },\n    },\n\n    disabledInput:{\n        backgroundColor: '#e8e8e8 !important'\n    },\n    noRightBorder:{\n        borderRight: 'none !important'\n    },\n    tableHeader:{\n        border: 'solid',\n        boxShadow: 'none !important',\n        borderBottom: 'none',\n        \"&:last-child\": {\n            border: 'solid !important'\n        },\n        \"&:first-child\": {\n            border: 'solid !important',\n            borderRight: 'none !important'\n        },\n    },\n    disabledContainer: {\n        //  pointerEvents: 'none',\n        filter: 'brightness(0.9)'\n    },\n\n    helpBtn: {\n        cursor: 'pointer',\n        color: '#33343D',\n        fontWeight: '600',\n        backgroundColor: '#FDCC43',\n        padding: '4px 1vw',\n        borderRadius: '16px',\n        width: 'fit-content',\n        margin: '0 1vw 0 0',\n        height: 'fit-content'\n    },\n    radioCont: {\n        display: 'flex',\n        flexDirection: 'row !important'\n    },\n    radioRoot: {\n        paddingTop: '0 !important',\n        paddingBottom: '0 !important',\n        paddingLeft: '0 !important',\n        paddingRight: '4px',\n        \"&:last-child\": {\n            paddingLeft: '1vw  !important',\n        },\n    },\n    smallRadioButton: {\n        \"& svg\": {\n            width: \"0.7em\",\n            height: \"0.7em\"\n        },\n        marginRight: '2vw'\n    },\n    configFooter: {\n        position: 'absolute',\n        bottom: '0',\n        boxShadow: '0px -1px 20px rgba(0, 0, 0, 0.07)',\n        padding: '2vh 1vw',\n        background: theme.palette.white,\n        display: 'flex',\n        justifyContent: 'flex-end',\n        width: 'calc(100% - 2vw)'\n    },\n    menuItem: {\n        backgroundColor: theme.palette.white,\n        fontSize: '12px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n    italicMenuItem: {\n        fontStyle: 'italic !important',\n        backgroundColor: theme.palette.white,\n        fontSize: '12px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n    mappingHeaders: {\n        // padding: '2vh 1vw',\n        // backgroundColor: '#f5f6fc',\n        display: 'flex',\n        // marginBottom: '1vh'\n    },\n    isTablePresent: {\n        fontSize: '13px',\n        color: theme.palette.headerGray,\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column'\n    },\n    listHeader: {\n        color: theme.palette.headerGray,\n        fontSize: '20px',\n        fontWeight: '300',\n        padding: '2.5vh 2vw',\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    mappingContainer: {\n        marginTop: '-6px',\n        padding: 'calc(2% + 6px) 2vw ',\n        backgroundColor: '#f8fafc',\n        height: 'calc(100% - 48px)',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    miniMappingContainer: {\n        padding: '30px 2vw 30px 2vw ',\n        backgroundColor: '#f8fafc',\n        height: 'calc(100% - 48px - 110px)',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    flexGrow: {\n        display: 'flex',\n        flexDirection: 'column',\n        flex: '2',\n        height: '78%',\n        overflowY: 'scroll'\n    },\n    mappingForm: {\n        // flex: '2',\n        overflowY: 'scroll',\n        // height: 'inherit',\n        maxHeight: '85%',\n       // padding: '0 1vw'\n    },\n    addButton: {\n        borderRadius: '5px',\n        display: 'flex',\n        color: theme.palette.blue,\n        fontWeight: '500',\n        fontSize: '12px',\n        // padding: '0 1vw',\n        // margin: '2vh 0',\n        cursor: 'pointer',\n    },\n    keyTab: {\n        color: '#33343D',\n        fontWeight: '600',\n        backgroundColor: '#FDCC43',\n        padding: '1vh 2vw',\n        borderRadius: '16px',\n        width: 'fit-content',\n        margin: '0 1vw 0 0'\n    },\n    tabContainer: {\n        margin: '1vh 0',\n        display: 'flex',\n        width: '100%',\n        paddingBottom: '2vh',\n        borderBottom: 'solid 1px rgba(223, 227, 232,0.7)',\n        justifyContent: 'space-between',\n    },\n    saveRule: {\n        display: 'flex',\n        color: theme.palette.white,\n        fontWeight: '500',\n        borderRadius: '5px',\n        boxShadow: ' 0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        backgroundColor: '#157fff',\n        fontSize: '12px',\n        padding: '0 1vw',\n        marginLeft: '1vw',\n        cursor: 'pointer',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    ruleRow: {\n        display: 'flex',\n        // marginRight: '1vw',\n        color: theme.palette.headerGray,\n        fontSize: '13px',\n        fontWeight: '500',\n       // width: '42%',\n        borderRight: 'solid',\n        borderTop: 'solid',\n        borderBottom: 'solid',\n       // padding: '4px ',\n        \"&:nth-child(1)\": {\n            borderLeft: 'solid'\n        },\n\n    },\n    rowField: {\n        width: '42%',\n        //marginBottom: '1vh',\n        // marginRight: '1vw',\n        borderRight: 'solid',\n        borderBottom: 'solid',\n        padding: '4px ',\n        \"&:nth-child(1)\": {\n            borderLeft: 'solid'\n        },\n    },\n    formRow: {\n        width: '100%',\n        display: 'flex',\n    },\n    deleteIcon: {\n        color: theme.palette.warmGray,\n        marginRight: '1vw',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    disabled: {\n        cursor: 'not-allowed',\n        backgroundColor: theme.palette.warmGray\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//marginBottom:",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "apiStyles",
                "method_begin": "export const apiStyles = theme => ({",
                "method_end": "})",
                "range": [
                    734,
                    898
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/configStyles.js",
                "returnType": "({\n    container: {\n        /* backgroundColor: theme.palette.white,\n         margin: '30px calc(24px + 1vw) 0 calc(24px + 1vw)',\n         border: 'solid 1px rgba(0, 0, 0, 0.05)',\n         boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n         borderRadius: '10px',\n         height: 'fit-content'*/\n        height: 'calc(100% - 30px)',\n        borderRadius: '10px',\n    },\n    statScroll: {\n        '@media (min-width: 50px) and (max-width: 700px)': {\n            overflowX: 'scroll !important'\n        },\n    },\n    ENABLED: {\n        backgroundColor: theme.palette.green,\n        color: 'white',\n        padding: '0 1vw',\n        borderRadius: '0',\n        marginRight: '1.5vw',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        cursor: 'pointer'\n    },\n    DISABLED: {\n        backgroundColor: theme.palette.red,\n        color: 'white',\n        padding: '0 1vw',\n        borderRadius: '0',\n        marginRight: '1.5vw',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        cursor: 'pointer'\n    },\n    disabledMaintenance: {\n        backgroundColor: theme.palette.lightGray,\n        color: 'white',\n        padding: '0 1vw',\n        borderRadius: '0',\n        marginRight: '1.5vw',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        cursor: 'pointer'\n    },\n    maintenance: {\n        backgroundColor: theme.palette.mustard,\n        color: 'black',\n        padding: '0 1vw',\n        borderRadius: '0',\n        marginRight: '1.5vw',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        cursor: 'pointer'\n    },\n    statusDetails: {\n        width: '100%',\n        height: '6%',\n        fontWeight: '500',\n\n    },\n    addButton: {\n        borderRadius: '5px',\n        display: 'flex',\n        color: theme.palette.blue,\n        fontWeight: '500',\n        fontSize: '12px',\n        //padding: '0 1vw',\n        //  margin: '2vh 0',\n        cursor: 'pointer',\n    },\n    ip: {\n        marginBottom: '1vh',\n        display: 'flex',\n        width: '100%'\n    },\n    ipInput: {\n        padding: '1vh 0 !important'\n    },\n    ipList: {\n        flex: '1',\n        width: '50%',\n        marginBottom: '3%',\n        overflowY: 'scroll',\n        paddingRight: '1vw'\n    },\n    helpBtn: {\n        cursor: 'pointer',\n        color: '#33343D',\n        fontWeight: '600',\n        backgroundColor: '#FDCC43',\n        padding: '4px 1vw',\n        borderRadius: '16px',\n        width: 'fit-content',\n        margin: '0 1vw 0 0',\n        height: 'fit-content'\n    },\n    radioCont: {\n        display: 'flex',\n        flexDirection: 'row !important'\n    },\n    radioRoot: {\n        paddingTop: '0 !important',\n        paddingBottom: '0 !important',\n        paddingLeft: '0 !important',\n        paddingRight: '4px',\n        \"&:last-child\": {\n            paddingLeft: '1vw  !important',\n        },\n    },\n    configFooter: {\n        position: 'absolute',\n        bottom: '0',\n        boxShadow: '0px -1px 20px rgba(0, 0, 0, 0.07)',\n        padding: '2vh 1vw',\n        background: theme.palette.white,\n        display: 'flex',\n        justifyContent: 'flex-end',\n        width: 'calc(100% - 2vw)'\n    },\n\n    flexGrow: {\n        display: 'flex',\n        flexDirection: 'column',\n        flex: '2',\n        height: '78%',\n        overflowY: 'scroll'\n    },\n    apiKey: {\n        padding: '1vh 1vw',\n        border: 'solid 1px rgba(0, 0, 0, 0.2)',\n        margin: '0 1vw 0 0',\n        display: 'flex'\n    },\n    updatedAt: {\n        color: '#666869',\n        marginBottom: '2%',\n        marginTop: '0.5%'\n    },\n    mappingContainer: {\n        marginTop: '-6px',\n        padding: 'calc(2% + 6px) 2vw ',\n        backgroundColor: '#f8fafc',\n        height: 'calc(100% - 48px)',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    whitelistForm: {\n        border: 'solid 1px rgba(0, 0, 0, 0.2)',\n        padding: '2vh 1vw',\n        borderRadius: '10px',\n        height: '100%',\n        position: 'relative',\n        overflowY: 'scroll',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//padding:",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/dialogStyles.js": {
        "method_details_": [
            {
                "method_name": "dialogStyles",
                "method_begin": "export const dialogStyles = theme => ({",
                "method_end": "})",
                "range": [
                    2,
                    59
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/dialogStyles.js",
                "returnType": "({\n    submitBackdrop: {\n        //     backdropFilter: 'transparent'\n    },\n    webhookField: {\n        marginBottom: '15px'\n    },\n    medDialog: {\n        minWidth: '45%',\n        boxShadow: '0 0 87px 0 rgba(71, 71, 71, 0.2)',\n        padding: '4%'\n    },\n    submitDialog: {\n        width: '23%',\n        boxShadow: '0 0 87px 0 rgba(71, 71, 71, 0.2)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)'\n    },\n    overlayBackdrop: {\n        //background: 'rgba(0, 0, 0, 0.5)',\n        // backdropFilter:' blur(5px)'\n    },\n    overlayDialog: {\n        width: '58vw'\n    },\n    overlay: {\n        fontSize: '17px',\n        display: 'flex'\n\n    },\n    overlayError: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column'\n    },\n    button: {\n        backgroundColor: theme.palette.blue,\n        color: theme.palette.white,\n        textTransform: 'unset',\n        height: '44px',\n        borderRadius: '6px',\n        fontSize: '16px',\n        width: '120px',\n        marginTop: 0,\n        marginBottom: '20px',\n        marginRight: '1vw',\n    },\n    dialogHeading: {\n        fontSize: '16px',\n        fontWeight: '700'\n    },\n    dialogSubHeading: {\n        fontSize: '13px',\n        color: theme.palette.slateGray\n    },\n    backdrop: {\n        // backdropFilter: 'blur(10px)'\n    },\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//background:",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "helpStyles",
                "method_begin": "export const helpStyles = theme => ({",
                "method_end": "})",
                "range": [
                    61,
                    104
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/dialogStyles.js",
                "returnType": "({\n    backdrop: {\n        //   backdropFilter: 'blur(10px)'\n    },\n    stepActive: {\n        color: 'white !important'\n    },\n    stepInactive: {\n        color: `${theme.palette.slateGray}`\n    },\n    completed: {\n        color: `${theme.palette.blue} !important`\n    },\n    helpDialog: {\n        width: '45vw',\n        backgroundColor: theme.palette.dark,\n        minHeight: '50vh'\n    },\n    button: {\n        backgroundColor: theme.palette.blue,\n        color: theme.palette.white,\n        textTransform: 'unset',\n        height: '44px',\n        borderRadius: '6px',\n        fontSize: '16px',\n        width: '120px',\n        marginTop: 0,\n        marginBottom: '20px',\n        marginRight: '1vw',\n    },\n    dialogHeading: {\n        fontSize: '20px',\n        fontWeight: '700',\n        color: theme.palette.white\n    },\n    dialogSubHeading: {\n        fontSize: '13px',\n        color: theme.palette.slateGray\n    },\n    stepHeading: {\n        fontSize: '16px',\n        color: theme.palette.white\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/documentStyles.js": {
        "method_details_": [
            {
                "method_name": "listStyles",
                "method_begin": "export const listStyles = theme => ({",
                "method_end": "})",
                "range": [
                    1,
                    660
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/documentStyles.js",
                "returnType": "({\n  pageContainer: {\n    backgroundColor: theme.palette.bgGray,\n    margin: '0 calc(24px + 2vw)',\n    marginTop: '60px',\n    height: 'calc(100% - 60px)',\n    width: '100%'\n  },\n  headerFlex: {\n    display: 'flex',\n    flexDirection: 'row',\n    '@media (min-width: 50px) and (max-width: 700px)': {\n        flexDirection: 'column',\n        marginBottom: '1vh'\n\n    },\n},\n\n  searchMenu: {\n    minWidth: 'fit-content',\n    cursor: 'pointer !important',\n    display: 'flex'\n  },\n  cancelSearch: {\n    color: '#a3a5a9',\n    \"&:hover\": {\n      color: '#536586'\n    },\n  },\n  docStats: {\n    border: 'solid 1px gray',\n    padding: '0 1vw',\n    borderRadius: '6px',\n    color: 'gray'\n  },\n  helperTooltip: {\n    zIndex: '99999 !important',\n    opacity: '1 !important',\n    backgroundColor: '#157fff !important',\n    boxShadow: '0px 1px 6px rgba(99, 128, 157, 0.4) !important',\n    padding: '1vh 1vw !important',\n    color: 'white !important',\n    fontWeight: '500 !important',\n  },\n  vRadio: {\n    marginRight: '1vw'\n  },\n  selectOpen: {\n    borderRight: '1px solid #8A8886',\n    borderLeft: 'none !important'\n  },\n  exportDocs: {\n    fontSize: '12px',\n    cursor: 'pointer',\n    color: theme.palette.black1,\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  radioRoot: {\n    paddingTop: '0 !important',\n    paddingBottom: '0 !important',\n    paddingLeft: '0 !important',\n    paddingRight: '4px',\n    \"&:last-child\": {\n      paddingLeft: '1vw  !important',\n    },\n  },\n  radioCont: {\n    display: 'flex',\n    flexDirection: 'row !important'\n  },\n  smallRadioButton: {\n    \"& svg\": {\n      width: \"0.7em\",\n      height: \"0.7em\"\n    }\n  },\n  docFilterIcon: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    marginRight: '0.5vw'\n  },\n  menuPaper: {\n    // maxHeight: '30%'\n    maxHeight: '250px'\n  },\n  rowLink: {\n    cursor: 'pointer',\n    // textDecoration: 'underline',\n    fontWeight: '600',\n    width: '12vw',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    cursor: 'pointer',\n    color: '#314059',\n  },\n  rowLinkDis: {\n    cursor: 'pointer',\n    fontWeight: '500',\n    width: '12vw',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    cursor: 'pointer',\n    color: theme.palette.headerGray\n  },\n  classMenu: {\n    fontSize: '11px !important',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '12px !important',\n    },\n    [theme.breakpoints.up('lg')]: {\n      fontSize: '14.5px !important',\n    },\n  },\n  pagination: {\n    marginTop: '3vh',\n    display: 'flex',\n    justifyContent: 'flex-end',\n    marginRight: 'calc(24px + 1vw)'\n  },\n  tableCellRoot: {\n    padding: '1vh 1vw !important'\n  },\n  disRowLink: {\n    cursor: 'pointer',\n    textDecoration: 'underline',\n    fontWeight: '500',\n    width: '8vw',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    cursor: 'not-allowed',\n    color: 'gray'\n  },\n  percentageLine: {\n    height: '3px', border: 'none', margin: '0', borderRadius: '6px',\n  },\n  adConfigSection: {\n    flex: '1',\n    margin: '2vw 1vw',\n    border: 'solid 1px rgba(0, 0, 0, 0.05)',\n    borderRadius: '10px',\n    padding: '2vw'\n  },\n  percentageBar: {\n    border: `none`,\n    backgroundColor: '#f2f2f2',\n    width: '100%',\n    borderRadius: '6px',\n    height: '3px',\n\n  },\n  cfScore: {\n    color: theme.palette.headerGray,\n    marginLeft: '8px',\n  },\n  newConfigButton: {\n    cursor: 'pointer',\n    color: theme.palette.blue,\n    textDecoration: 'underline',\n    fontSize: '13px',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    fontWeight: '500'\n  },\n  miniHeader: {\n    color: theme.palette.black1,\n    padding: '2.5vh 2vw',\n    display: 'flex',\n    justifyContent: 'space-between',\n    '@media screen and  (max-width: 1280px) and (min-height: 577px) and (max-height: 577px)': {\n      padding: '1.5vh 2vw',\n    },\n  },\n  docListHeader: {\n    margin: '0 calc(24px + 1vw) 0 calc(24px + 1vw) !important',\n    padding: '0 !important'\n  },\n  mappingListCont: {\n    paddingTop: '33px',\n    height: 'calc(100% - 33px)'\n  },\n  selectAllDocs: {\n    fontSize: '12px',\n    cursor: 'pointer',\n    textDecoration: 'underline',\n    color: theme.palette.black1,\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  batchFilter: {\n    backgroundColor: theme.palette.white,\n    height: 'fit-content',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    padding: '1px 0',\n    marginRight: '4px',\n    color: theme.palette.white,\n    border: '1px solid #8A8886',\n    borderRadius: '6px',\n  },\n  classFilter: {\n    backgroundColor: theme.palette.white,\n    height: 'fit-content',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    padding: '0 1vh',\n    marginRight: '1vw',\n    boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n    border: 'solid 2px black',\n    borderRadius: '20px',\n    color: theme.palette.black1\n  },\n  batchFilterSelect: {\n    paddingRight: '50px !important',\n    backgroundColor: 'transparent',\n    color: 'rgba(51, 54, 61, 0.8)',\n    fontSize: '11px',\n    paddingLeft: '1vw',\n    fontWeight: 'normal',\n    fontSize: '11px !important',\n    '@media (min-width: 1280px) and (max-height: 650px)': {\n      fontSize: '10px !important'\n    },\n    '@media (min-width: 1680px)': {\n      fontSize: '12.5px !important'\n    },\n    '@media (min-width: 1920px)': {\n      fontSize: '14.5px !important'\n    },\n  },\n  classFilterSelect: {\n    backgroundColor: 'transparent',\n    color: theme.palette.black1,\n    fontSize: '11px',\n    paddingLeft: '4px',\n    fontWeight: 'normal',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '12px',\n    },\n    [theme.breakpoints.up('lg')]: {\n      fontSize: '14.5px',\n      paddingLeft: '1vw !important',\n    },\n  },\n  batchFilterIcon: {\n    color: 'rgba(51, 54, 61, 0.8)',\n    right: '0 !important',\n    borderLeft: '1px solid #8A8886',\n    marginTop: '-4px',\n    height: '110%'\n  },\n  classFilterIcon: {\n    color: `${theme.palette.black1} !important `,\n    right: '0 !important',\n  },\n  configChip: {\n    fontSize: '11px',\n    color: theme.palette.blue,\n    border: `solid 1px ${theme.palette.blue}`,\n    padding: '0 !important',\n    height: 'fit-content'\n  },\n  configChipContainer: {\n    fontSize: '11px',\n    color: theme.palette.headerGray,\n    marginLeft: '1vw'\n  },\n  selectedAllDocs: {\n    fontSize: '11px',\n    cursor: 'pointer',\n    borderRadius: '15px',\n    padding: '0 1vw',\n    color: theme.palette.black1,\n    backgroundColor: '#e5e5e5',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  sortIcon: {\n    marginTop: '-4px'\n  },\n  actionIcons: {\n    color: theme.palette.blue\n  },\n  tableLoader: {\n    padding: '14vh 0'\n  },\n  identifiedBtn: {\n    border: 'solid 1px #339A42 !important',\n    backgroundColor: '#339A42',\n    color: `${theme.palette.white} !important`,\n    '& $idNumber': {\n      backgroundColor: theme.palette.white,\n      color: '#2d9b3d',\n    }\n  },\n  allFilesBtn: {\n    border: 'solid 1px #2F6EE9 !important',\n    backgroundColor: `#2F6EE9 !important`,\n    color: `${theme.palette.white} !important`,\n    '& $allNumber': {\n      backgroundColor: theme.palette.white,\n      color: 'black',\n    }\n  },\n\n  unidentifiedBtn: {\n    // border: 'solid 1px #F14336 !important',\n    border: 'solid 1px #157fff !important',\n    backgroundColor: '#157fff',\n    color: `${theme.palette.white} !important`,\n    /* '& $unIdNumber': {\n       backgroundColor: theme.palette.white,\n       color: '#e83c3d',\n     }*/\n  },\n  feedbackBtn: {\n    border: 'solid 1px #ecaf2b',\n    backgroundColor: '#ecaf2b',\n    color: theme.palette.white,\n  },\n  disabledIdBtn: {\n    color: theme.palette.black1,\n    border: 'solid 1px #2d9b3d',\n    backgroundColor: theme.palette.white,\n    \"&:hover\": {\n      /*backgroundColor: \"#2d9b3d\",\n      color: theme.palette.white,\n      '& $idNumber': {\n        backgroundColor: theme.palette.white,\n        color: '#2d9b3d',\n      }*/\n    },\n  },\n  disabledFdBtn: {\n    color: theme.palette.black1,\n    border: 'solid 1px #ecaf2b',\n    backgroundColor: theme.palette.white,\n    \"&:hover\": {\n      /*   backgroundColor: \"#ecaf2b !important\",\n         color: theme.palette.white*/\n    }\n  },\n  disabledUnIdBtn: {\n    color: theme.palette.black1,\n    border: 'solid 1px #e83c3d',\n    backgroundColor: theme.palette.white,\n    \"&:hover\": {\n      /*backgroundColor: \"#e83c3d\",\n      color: theme.palette.white,\n      // border: 'solid 1px #157fff',\n      '& $unIdNumber': {\n        backgroundColor: theme.palette.white,\n        color: '#e83c3d',\n      }*/\n    },\n  },\n  disabledUnIdBtn1: {\n    color: theme.palette.headerGray,\n    // border: 'solid 1px #e83c3d',\n    backgroundColor: theme.palette.white,\n    border: 'solid 1px #e83c3d',\n  },\n  idNumber: {\n    color: theme.palette.white,\n    backgroundColor: '#2d9b3d',\n    minWidth: '30px',\n    borderRadius: '3px',\n    marginLeft: '1vw'\n  },\n  unIdNumber: {\n    color: theme.palette.white,\n    backgroundColor: '#e83c3d',\n    minWidth: '30px',\n    borderRadius: '3px',\n    marginLeft: '1vw'\n  },\n  allNumber: {\n    color: theme.palette.white,\n    backgroundColor: 'black',\n    minWidth: '30px',\n    borderRadius: '3px',\n    marginLeft: '1vw'\n  },\n  idButtons: {\n    padding: '0 1vw',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    cursor: 'pointer',\n    margin: '0 8px',\n    borderRadius: '20px',\n    fontWeight: '500',\n    textAlign: 'center',\n    border: '1px solid #CDD5DC',\n    color: 'rgba(51, 52, 61,0.8)',\n    \"&:nth-child(1)\": {\n      \"&:hover\": {\n        border: 'solid 1px #339A42',\n        color: 'white',\n        backgroundColor: '#339A42'\n      },\n    },\n    \"&:nth-child(2)\": {\n      \"&:hover\": {\n        border: 'solid 1px #157fff',\n        color: 'white',\n        backgroundColor: '#157fff'\n      },\n    },\n  },\n  aidButton: {\n    padding: '0 1vw',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    cursor: 'pointer',\n    margin: '0 8px',\n    borderRadius: '20px',\n    fontWeight: '500',\n    textAlign: 'center',\n    border: '1px solid #CDD5DC',\n    color: 'rgba(51, 52, 61,0.8)',\n    \"&:hover\": {\n      border: 'solid 1px #2F6EE9 !important',\n      backgroundColor: `#2F6EE9 !important`,\n      color: `${theme.palette.white} !important`,\n\n    },\n  },\n  miniLoader: {\n    marginLeft: '1vw',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  listContainer: {\n    backgroundColor: theme.palette.white,\n    // margin: '0 calc(24px + 1vw)',\n    border: 'solid 1px rgba(0, 0, 0, 0.05)',\n    boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n    borderRadius: '10px',\n    height: 'fit-content'\n  },\n  listHeader: {\n    color: theme.palette.headerGray,\n    fontSize: '20px',\n    fontWeight: '300',\n    padding: '2.5vh 2vw',\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  searchContainer: {\n    margin: '0px calc(24px + 1vw) 20px calc(24px + 1vw)',\n    display: 'flex',\n    justifyContent: 'space-between',\n    paddingTop: '30px',\n    '@media screen and (max-width: 1280px) and (min-height: 577px) and (max-height: 577px)': {\n      marginBottom: '10px !important',\n      paddingTop: '15px'\n    },\n\n  },\n  searchField: {\n    // boxShadow: '0 0 29px 0 rgb(0 0 0 / 7%)',\n    borderRadius: '6px',\n    border: 'none',\n    backgroundColor: '#ecf0f2 !important',\n    height: '100%',\n    \"&$focused\": {\n      backgroundColor: '#ecf0f2',\n    },\n    \"&:hover\": {\n      backgroundColor: '#ecf0f2',\n    },\n  },\n  searchInput: {\n    padding: '1vh 1vw',\n    fontSize: '11px',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '12px',\n    },\n    [theme.breakpoints.up('lg')]: {\n      fontSize: '14.5px',\n    },\n  },\n  filterButton: {\n    padding: '0 1vw',\n    boxShadow: '0px 1px 4px 0 rgb(92 101 132 / 18%)',\n    borderRadius: '20px',\n    backgroundColor: theme.palette.white,\n    display: 'flex',\n    color: theme.palette.headerGray,\n    fontWeight: '500',\n    marginLeft: '1vw',\n    cursor: 'pointer',\n  },\n  filterActive: {\n    backgroundColor: theme.palette.blue,\n    color: theme.palette.white\n  },\n  docStatus: {\n    // fontSize: '11.5px',\n    color: '#30b283',\n    backgroundColor: '#ebf9f5',\n    borderRadius: '15px',\n    padding: '1vh 1vw',\n    display: 'flex',\n    width: 'fit-content'\n  },\n  dot: {\n    borderRadius: '50%',\n    width: '4px',\n    height: '4px',\n    marginRight: '6px'\n  },\n  fileName: {\n    width: '8vw',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    cursor: 'pointer',\n    color: theme.palette.blue\n  },\n  filterMenu: {\n    boxShadow: '0 0 49px 0 rgba(71, 71, 71, 0.15)',\n    border: ' solid 1px rgba(0, 0, 0, 0.1)',\n    borderRadius: '10px',\n    marginTop: '1vh',\n    width: '13%',\n    padding: '2vh 0',\n  },\n  deleteButton: {\n    boxShadow: ' 0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n    borderRadius: '5px',\n    border: 'solid 1px rgba(0, 0, 0, 0.1)',\n    display: 'flex',\n    color: '#646884',\n    fontWeight: '500',\n    fontSize: '12px',\n    padding: '0 1vw',\n    marginLeft: '1vw',\n    cursor: 'pointer'\n  },\n  downloadButton: {\n    display: 'flex',\n    color: theme.palette.white,\n    fontWeight: 'normal',\n    borderRadius: '20px',\n    boxShadow: ' 0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n    border: 'solid 1px rgba(0, 0, 0, 0.1)',\n    backgroundColor: theme.palette.black1,\n    fontSize: '10px',\n    padding: '0 1vw',\n    marginLeft: '1vw',\n    cursor: 'pointer'\n\n  },\n  accordion: {\n    boxShadow: 'none',\n    padding: '0 !important',\n    minHeight: '0 !important',\n    width: '100%',\n    color: theme.palette.headerGray,\n    fontSize: '12px !important',\n    fontWeight: '500'\n  },\n  menuItem: {\n    backgroundColor: theme.palette.white,\n    padding: '0 1vw !important',\n    paddingBottom: '1vh !important',\n    margin: '0',\n    \"&:last-child\": {\n      paddingBottom: '0vh !important',\n    },\n  },\n  noMarginPadding: {\n    margin: '0 !important',\n    padding: '0 !important',\n  },\n  menuExpanded: {\n    margin: '0 !important',\n    padding: '0 !important',\n    paddingBottom: '1vh !important'\n  },\n  filterOption: {\n    display: 'flex',\n    padding: '0.5vh 0',\n    color: '#8e92a9',\n    fontWeight: 'normal',\n    fontSize: '11px',\n    \"&:first-child\": {\n      paddingTop: '0vh !important',\n    },\n  },\n  expandIcon: {\n    color: theme.palette.headerGray,\n    fontSize: '12px'\n  },\n  docCategoryContainer: {\n    boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n    border: 'solid 1px rgba(0, 0, 0, 0.05)',\n    backgroundColor: theme.palette.white,\n    borderRadius: '10px',\n    margin: '1vh 2vw 20px 2vw',\n    fontSize: '12px',\n    color: '#464962',\n    fontWeight: '500',\n    padding: '0 2vw',\n    height: '13vh',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  configHeading: {\n    margin: '10px 2vw 20px 2vw',\n    color: theme.palette.headerGray\n  },\n  categoryOption: {\n    fontSize: '11.5px',\n    color: '#9ea2bb',\n    marginRight: '1.5vw',\n    cursor: 'pointer',\n    margin: '1.5vh 0 0 0',\n    fontWeight: 'normal',\n    display: 'flex'\n  },\n  categoryCheck: {\n    width: '11px',\n    height: '11px',\n    border: 'solid 1px rgba(0, 0, 0, 0.2)',\n    borderRadius: '3px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    marginRight: '5px'\n  },\n  categorySelected: {\n    width: '5px',\n    height: '5px',\n    backgroundColor: theme.palette.darkYellow,\n    alignSelf: 'center',\n  },\n  table: {\n    tableLayout: 'fixed'\n  },\n\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//",
                    "/*",
                    "/*backgroundColor:",
                    "/*",
                    "/*backgroundColor:",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "documentStyles",
                "method_begin": "export const documentStyles = theme => ({",
                "method_end": "});",
                "range": [
                    663,
                    1257
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/documentStyles.js",
                "returnType": "({\n  clockBg: {\n    backgroundColor: 'rgba(0,0,0,0.7)',\n    zIndex: '100',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    textAlign: 'center',\n    height: 'calc(100% - 120px)',\n    color: 'white'\n  },\n  selectedColumn:{\n    fontWeight: 'bold'\n  },\n  expandedTable:{\n    height: 'calc(35% - 1vh)',\n    borderRadius: '4px',\n    border: 'solid 1px black',\n    marginTop: '1vh',\n    marginRight: '8px'\n  },\n  holdStatus: {\n    borderRadius: '15px',\n    padding: '0.5vh 1vw',\n    display: 'flex',\n    width: 'fit-content',\n    fontWeight: '500'\n  },\n  lockedBackground: {\n    backgroundColor: 'rgba(0,0,0,0.6)',\n    zIndex: '9999',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    textAlign: 'center',\n    color: 'white'\n  },\n  noDetailFound: {\n    height: '80%',\n    textAlign: 'center'\n  },\n  noDetailText: {\n    // backgroundColor: theme.palette.lightGray,\n    //  borderRadius:'15px'\n  },\n  noResults: {\n    color: '#172B4D',\n    fontWeight: '500',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    textAlign: 'center'\n  },\n  selectLabel: {\n    display: 'flex',\n    color: '#5c5d64',\n    //fontSize: '12.5px',\n    marginBottom: '0.8vh',\n    fontWeight: '400 !important',\n  },    /*Styles for input*/\n  textFieldRoot: {\n    border: 'none',\n    fontWeight: 'normal !important',\n    padding: '1vh 1vw !important',\n    border: '1px solid #8A8886',\n    color: '#33343D !important'\n  },\n  textFieldRootFocus: {\n    border: 'solid 1px green !important',\n    fontWeight: 'normal !important',\n    padding: '1.5vh 1vw !important'\n  },\n\n  textFieldInput: {\n    fontSize: '12px !important',\n    fontWeight: 'normal !important'\n  },\n  autoCompleteInput: {\n    padding: '0 !important',\n    fontWeight: 'normal !important',\n    fontSize: '12px !important',\n\n  },\n  autoOptions: {\n    backgroundColor: 'white !important',\n    padding: '1vh 1vw 0 1vw !important',\n    borderRadius: '0px',\n    color: '#646884',\n    fontSize: '12px !important',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '12px !important',\n    },\n    [theme.breakpoints.up('lg')]: {\n      fontSize: '14.5px !important',\n    },\n  },\n  autoClear: {\n    display: 'none'\n  },\n  autoPaper: {\n    boxShadow: '0px 19px 27px 0 rgba(71, 71, 71, 0.09)',\n    border: 'solid 1px rgba(0, 0, 0, 0.1)',\n    borderRadius: '5px'\n  },\n  disabledText: {\n\n    cursor: 'not-allowed',\n    backgroundColor: 'lightGray'\n  },\n  disabledTextWhite: {\n    cursor: 'pointer !important',\n  },\n  holdStatusCont: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    width: '100%',\n    marginBottom: '2vh',\n    minHeight: '25px'\n  },\n  putOnHold: {\n    color: '#33343D',\n    fontWeight: '400',\n    display: 'flex',\n    height: '100%'\n  },\n  tableContainert: {\n    overflow: 'hidden',\n    // flex: '1',\n    // margin: '40px 0 0 0',\n    height: '90%',\n    // marginTop: '1vh',\n    maxWidth: '100%',\n    borderBottom: '0.75px solid rgba(138, 136, 134,0.4) !important'\n\n    //padding: '0 2vw'\n  },\n  docDrawer: {\n    width: '75%'\n  },\n  accSContent: {\n    color: '#3C4257',\n    margin: '0 !important',\n    \"&$content\": {\n      margin: '0 !important'\n    }\n  },\n  accSExpandIcon: {\n    padding: '0 1vw !important'\n  },\n  accSRoot: {\n    padding: '1vh 1vw !important',\n    borderRadius: '0px !important',\n    minHeight: '0px !important',\n    borderRadius: '2px !important',\n    border: '1px solid #8A8886',\n    boxShadow: 'none !important'\n  },\n  accSExpanded: {\n    // borderBottom: '1px solid #B7B8B9',\n    color: '#3C4257',\n    //  padding: '1vh 0 !important',\n    margin: '0 0 !important',\n    border: '0',\n    minHeight: '0px !important',\n    backgroundColor: '#EDF3FF',\n\n  },\n  accRoot: {\n    height: '50% !important',\n    display: 'flex',\n    flexDirection: 'column',\n    borderRadius: '2px !important',\n    border: '1px solid #8A8886',\n    boxShadow: 'none !important'\n  },\n  collapseHeader: {\n    borderRadius: '2px',\n    border: '1px solid #8A8886',\n    color: '#3C4257',\n    marginBottom: '1.5vh',\n    fontWeight: '400',\n    cursor: 'pointer',\n    //  height: '50%',\n    overflow: 'scroll'\n  },\n  activeCollapseHeader: {\n    height: '50%',\n    // backgroundColor: '#EDF3FF',\n    borderRadius: '2px',\n    border: '1px solid #8A8886',\n    color: '#3C4257',\n    marginBottom: '1.5vh',\n    fontWeight: '400',\n\n    cursor: 'pointer',\n    overflow: 'scroll'\n  },\n  tab: {\n    // padding: '1vh 1vw',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  activeTab: {\n    width: '100%',\n    // padding: '0 1vw',\n    backgroundColor: '#EDF3FF',\n    display: 'flex',\n    justifyContent: 'space-between',\n    zIndex: '10'\n    //position: 'fixed'\n  },\n  collapseData: {\n    backgroundColor: theme.palette.white,\n    height: '90% !important',\n    padding: '1vh 1vw'\n  },\n  tablet: {\n    //borderRadius: '10px'\n    //tableLayout: 'fixed'\n  },\n  qrKey: {\n    display: 'flex',\n    marginBottom: '1vh',\n    width: '40%',\n    fontWeight: '500',\n    color: theme.palette.black1\n  },\n\n  qrData: {\n    color: theme.palette.headerGray,\n    margin: '2vh 2vw',\n    wordBreak: 'break-all',\n    height: '100%',\n    overflowY: 'scroll'\n  },\n  tableRoott: {\n    // border: 'solid 1px rgba(0, 0, 0, 0.1)',\n    maxHeight: '100%',\n    // borderRadius: '10px'\n  },\n  collapseWrapper: {\n    // height: 'auto !important',\n    overflow: 'scroll'\n  },\n  tableRowt: {\n    \"&:hover\": {\n      boxShadow: 'none !important'\n    },\n  },\n  tableHeadert: {\n    backgroundColor: theme.palette.black1,\n    color: `#000000 !important`,\n    borderRight: ' solid 1px rgba(0, 0, 0, 0.1)'\n  },\n  tableCellt: {\n    borderRight: '0.75px solid rgba(138, 136, 134,0.4)',\n    fontWeight: 'normal !important',\n    fontSize: '12px !important',\n\n    boxShadow: 'none !important',\n    \"&:hover\": {\n      boxShadow: 'none !important'\n    },\n    \"&:last-child\": {\n      borderRight: '0.75px solid rgba(138, 136, 134,0.4) !important',\n    },\n\n    // borderRight: ' solid 1px rgba(0, 0, 0, 0.1)'\n  },\n  tableCellData: {\n    border: '0.75px solid #8A8886',\n    borderRadius: '4px',\n    padding: '1vh'\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.lighGray,\n    display: 'flex',\n    position: 'relative',\n    height: '100%'\n  },\n  documentContainer: {\n    width: '65%'\n  },\n  expansionPanel: {\n    width: '100%',\n    backgroundColor: theme.palette.darkBlue,\n    color: theme.palette.white,\n    boxShadow: '0 2px 6px 0 rgba(16, 119, 255,  0.7)',\n  },\n  expandIcon: {\n    color: theme.palette.white\n  },\n  fullWidth: {\n    width: '100%',\n  },\n  tableKey: {\n    pointerEvents: 'none',\n    backgroundColor: theme.palette.brownishGray\n  },\n  formField: {\n    paddingTop: 0,\n    marginTop: 0,\n    marginBottom: 0,\n  },\n  tableHeader: {\n    paddingTop: 0,\n    marginTop: 0,\n    marginBottom: 0,\n    pointerEvents: 'none',\n\n  },\n  headerField: {\n    backgroundColor: theme.palette.coolGray2,\n    fontWeight: 'bold'\n  },\n  table: {\n    width: '100%',\n    padding: '0vh 1vw'\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: '16%',\n      flexShrink: 0,\n    },\n  },\n  thumbnailContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '64px',\n    backgroundColor: theme.palette.white,\n    justifyContent: 'center',\n    borderRadius: '5.3px'\n  },\n  formSubmitContainer: {\n    display: 'flex',\n    margin: '6vh 2vw',\n    justifyContent: 'center'\n  },\n  pageAction: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginTop: '5vh',\n  },\n\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n\n  documentDrawer: {\n    border: 0,\n    backgroundColor: theme.palette.darkBlue,\n    width: '100%',\n    height: '270px'\n  },\n\n  sidebarFlex: {\n    height: 'calc(100vh - 64px)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between'\n  },\n  columnFlex: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  button: {\n    color: theme.palette.white,\n    fontSize: '16px',\n    fontFamily: 'Roboto',\n    backgroundColor: theme.palette.blue,\n\n    [theme.breakpoints.between('sm', 'md')]: {\n      width: '20.6vw',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '11.6vw',\n    },\n    marginBottom: '2vh',\n    marginLeft: '1vw',\n    height: '44px'\n  },\n\n  submitButton: {\n    color: theme.palette.white,\n    fontSize: '16px',\n    fontFamily: 'Roboto',\n    backgroundColor: theme.palette.blue,\n\n    [theme.breakpoints.between('sm', 'md')]: {\n      width: '20.6vw',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '11.6vw',\n    },\n    marginBottom: '2vh',\n    marginLeft: '1vw',\n    height: '44px',\n    marginTop: '4vh'\n  },\n  cancelButton: {\n    color: theme.palette.coolGray,\n    fontSize: '16px',\n    fontFamily: 'Roboto',\n    backgroundColor: theme.palette.dark,\n\n    [theme.breakpoints.between('sm', 'md')]: {\n      width: '20.6vw',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '11.6vw',\n    },\n    marginBottom: '2vh',\n    marginLeft: '1vw',\n    height: '44px',\n    elevation: 0\n  },\n  sidebarFooter: {\n    justifyContent: 'space-between',\n    margin: '0 auto',\n    display: 'flex',\n    flexDirection: 'column',\n    color: theme.palette.white,\n    fontSize: '12px'\n  },\n  outerLoader: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    minHeight: '400px'\n  },\n  progress: {\n    color: theme.palette.red,\n  },\n  images: {\n    width: '100%',\n    transformOrigin: '0 0'\n  },\n  thumbnails: {\n    height: 'auto',\n    width: '50px',\n    maxHeight: '58px'\n  },\n  imageName: {\n    fontSize: '10px',\n    color: theme.palette.white,\n    textAlign: 'center'\n  },\n  imageDiv: {\n    width: '65%',\n    fontSize: '18px',\n    height: '100vh',\n    position: 'relative',\n    // flex: '2'\n    //marginTop: 'calc(30px + 2vh)'\n  },\n  formDiv: {\n    width: 'calc(35% - 16px - 3vw) !important',\n    backgroundColor: theme.palette.white,\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '0 8px',\n    padding: '2vh 1.5vw',\n    boxShadow: '0px 0px 10px rgba(0, 0, 0, 0.19)',\n    border: '1px solid rgba(0, 0, 0, 0.6)',\n    borderRadius: '4px',\n\n  },\n  listGutter: {\n    paddingLeft: '0px',\n    paddingRight: '0px',\n    marginLeft: '0px !important'\n  },\n  tabContainer: {\n    padding: '0 2vw ',\n    backgroundColor: '#f8f8f8',\n    borderBottom: 'solid 1px rgba(0,0,0,0.1)',\n    color: theme.palette.headerGray,\n  },\n  activeThumbnail: {\n    height: '64px',\n    width: '50px',\n    border: '4px solid #9097a2',\n    borderRadius: '5.3px'\n  },\n  docHeader: {\n    color: theme.palette.white,\n    fontSize: '18px'\n  },\n  navbarContainer: {\n  },\n  zoomContainer: {\n    position: 'fixed',\n    top: '50%',\n    right: '12%',\n    width: '46px',\n    height: '120px',\n    backgroundColor: 'rgba(62, 70, 78, 0.6)',\n    opacity: '0.9',\n    borderRadius: '8px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  pageNo: {\n    position: 'absolute',\n    top: '5%',\n    right: '10%',\n    padding: '4px',\n    backgroundColor: 'rgba(0,0,0, 0.6)',\n    opacity: '1',\n    borderRadius: '8px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    color: theme.palette.white\n  },\n  dropDownIcon: {\n    color: theme.palette.coolGray2,\n    position: 'absolute'\n  },\n  svg: {\n    cursor: 'pointer'\n  },\n  thumbnailIcons: {\n    position: 'absolute',\n    top: '50%',\n    left: '33%'\n\n  },\n  closeIcon: {\n    display: 'flex',\n    flexDirection: 'row-reverse',\n    color: theme.palette.coolGray\n  },\n  loading: {\n    top: '40%',\n    right: '45%',\n    position: 'fixed'\n  },\n  imageContainer: {\n    height: '100vh',\n    width: '100%',\n    // width: 'inherit',\n    //  position: 'fixed',\n    //  backgroundColor: theme.palette.white,\n    borderRight: 'solid 1px rgba(0,0,0,0.1)'\n  },\n  loaderDiv: {\n    backgroundColor: theme.palette.dark,\n    height: '100%',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    display: 'flex'\n  },\n  headerContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: '1vw',\n  },\n  formStyle: {\n    height: '100%',\n    backgroundColor: theme.palette.white,\n    padding: '1.5vh 1vw 0 2vw',\n    boxShadow: '0px 0px 10px rgba(0, 0, 0, 0.19)',\n    overflowY: 'scroll',\n    overflowX: 'hidden',\n    border: '1px solid rgba(0, 0, 0, 0.6)'\n  },\n  tabRoot: {\n    padding: '0',\n    minWidth: 'fit-content',\n    fontSize: '12px',\n    marginRight: '2vw'\n  },\n  navIcons: {\n    marginRight: '2vw',\n    cursor: 'pointer'\n  },\n  textContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100% !important',\n    borderRadius: '4px',\n    border: `solid 1px ${theme.palette.battleShipGray}`\n  }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//fontSize:",
                    "/*Styles",
                    "//",
                    "//",
                    "//",
                    "//padding:",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//position:",
                    "//borderRadius:",
                    "//tableLayout:",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//marginTop:",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "inputStyles",
                "method_begin": "export const inputStyles = theme => ({",
                "method_end": "})",
                "range": [
                    1260,
                    1367
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/documentStyles.js",
                "returnType": "({\n  inputContainer: {\n    background: '#FFFFFF 0% 0% no-repeat padding-box',\n    border: '1px solid #D9D9D9',\n    borderRadius: '6px',\n    padding: '0.5vh 0vw 0.5vh 1vw',\n    margin: '1vh 0 0 0',\n    width: '88%',\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  highlightedInput: {\n    border: 'solid 2px #A31ACB'\n  },\n  currentField: {\n    border: 'solid 2px #FC9A07'\n  },\n  disabledDocField: {\n    cursor: 'pointer !important'\n  },\n  mandatory: {\n    color: '#e45f5f'\n  },\n  fieldPageNo: {\n    color: 'black',\n    fontSize: '10px',\n    borderRadius: '12px',\n    backgroundColor: 'lightGray',\n    padding: '2px 6px',\n    marginRight: '1vw',\n    width: 'calc(100% - 2vw)',\n    textAlign: 'center',\n    cursor: 'pointer',\n    border: 'solid 1px darkGray',\n    \"&:hover\": {\n      backgroundColor: \"#f5f5f5 !important\",\n      // border: 'solid 1px #157fff',\n    },\n  },\n  high: {\n    color: '#2fb183',\n    fontSize: '10px',\n    borderRadius: '12px',\n    backgroundColor: '#ebf9f5',\n    padding: '2px 1vw',\n    marginRight: '1vw',\n    fontWeight: 'bold'\n  },\n  low: {\n    color: '#e45f5f',\n    fontSize: '10px',\n    borderRadius: '12px',\n    backgroundColor: '#fde9e9',\n    padding: '2px 1vw',\n    marginRight: '1vw'\n  },\n  medium1: {\n    fontSize: '10px',\n    borderRadius: '12px',\n    backgroundColor: 'rgba(255, 204, 24,0.3)',\n    padding: '2px 1vw',\n    marginRight: '1vw'\n  },\n  medium2: {\n    fontSize: '10px',\n    borderRadius: '12px',\n    backgroundColor: 'rgba(234, 156, 39,0.3)',\n    padding: '2px 1vw',\n    marginRight: '1vw'\n  },\n  item: {\n    display: 'flex',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap'\n  },\n  lowConfidence: {\n    border: '1px solid #ff7000'\n  },\n  fieldIpContainer: {\n    width: 'calc(100% - 2.5vw) !important',\n  },\n  invoiceLabel: {\n    fontWeight: '500',\n    color: '#5c5d64',\n    fontWeight: '400',\n    width: '92%'\n  },\n  input: {\n    width: 'calc(92% - 1vw)',\n    paddingRight: '1vw',\n  },\n  tinput: {\n    width: 'calc(70% - 1vw)',\n  },\n  inputRoot: {\n    color: '#33343D',\n    fontWeight: '500',\n  },\n  select: {\n    backgroundColor: 'white !important',\n    '&:focus': {\n      backgroundColor: 'yellow'\n    }\n  },\n\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "headerStyles",
                "method_begin": "export const headerStyles = theme => ({",
                "method_end": "})",
                "range": [
                    1369,
                    1664
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/documentStyles.js",
                "returnType": "({\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    color: theme.palette.blue,\n    fontSize: '13px',\n    height: '50px',\n    fontWeight: '500',\n    position: 'relative',\n  },\n  batchId: {\n    fontWeight: '500',\n    backgroundColor: theme.palette.mustard,\n    borderRadius: '8px',\n    padding: '4px 1vw',\n    marginLeft: '2vw',\n    color: 'black',\n    display: 'flex'\n\n  },\n  externalBatchId: {\n    fontWeight: '500',\n    backgroundColor: 'lightGray',\n    borderRadius: '8px',\n    padding: '4px 1vw',\n    marginRight: '1vw',\n    marginLeft: '0.5vw'\n\n  },\n  helpBtn: {\n    cursor: 'pointer',\n    color: '#33343D',\n    fontWeight: '600',\n    backgroundColor: '#FDCC43',\n    padding: '4px 1vw',\n    borderRadius: '16px',\n    width: 'fit-content',\n    margin: '0 1vw 0 0',\n    height: 'fit-content'\n  },\n  pageHeading: {\n    boxShadow: '0px -1px 20px rgba(0, 0, 0, 25%)',\n    color: '#000000',\n    fontWeight: '500',\n    width: '55%',\n    display: 'flex',\n    justifyContent: 'center',\n    borderBottom: 'solid 1px rgba(0,0,0,0.1)'\n  },\n  uploadButton: {\n    color: theme.palette.blue,\n    backgroundColor: 'white',\n    border: `dashed 1px ${theme.palette.blue}`,\n    borderRadius: '6px',\n    fontWeight: '500',\n    padding: '1vh 1vw',\n    width: 'max-content',\n    cursor: 'pointer',\n    fontSize: '12px !important',\n    '@media (min-width: 1440px)': {\n      fontSize: '12px !important'\n    },\n    '@media (min-width: 1280px) and (max-height: 650px)': {\n      fontSize: '10px !important'\n    },\n    '@media (min-width: 1680px)': {\n      fontSize: '13px !important'\n    },\n    '@media (min-width: 1920px)': {\n      fontSize: '14.5px !important'\n    },\n    \"&:hover\": {\n      backgroundColor: `rgba(21, 127, 255, 0.2) !important`,\n    },\n\n  },\n  reviewStats: {\n    color: theme.palette.blue,\n    borderRadius: '10px',\n    // color: 'white',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    padding: '4px 0',\n    fontWeight: 'normal',\n    marginRight: '1.5vw'\n  },\n  pageNav: {\n    cursor: 'pointer'\n  },\n  disPageNav: {\n    cursor: 'not-allowed',\n    color: 'lightGray'\n  },\n  stopReview: {\n    marginLeft: '8px',\n    color: theme.palette.red\n  },\n  fileCount: {\n    backgroundColor: '#FDCC43',\n    color: 'black',\n    borderRadius: '5px',\n    padding: '0.5vw',\n    marginLeft: '2vw',\n    height: 'fit-content'\n  },\n  reviewFiles: {\n    marginLeft: '1vw'\n  },\n  pass: {\n    fontWeight: '500',\n    color: theme.palette.green,\n    \"&:hover\": {\n      color: 'white',\n      backgroundColor: `${theme.palette.green} !important`,\n    },\n  },\n  fail: {\n    fontWeight: '500',\n    color: theme.palette.red,\n    \"&:hover\": {\n      color: 'white',\n      backgroundColor: `${theme.palette.red} !important`,\n    },\n\n  },\n  fullDocName: {\n    maxWidth: '80%'\n  },\n  fileName: {\n    // width: '8vw',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    marginLeft: '2vw',\n    maxWidth: '100%'\n  },\n  editTableActions: {\n    display: 'flex',\n    position: 'absolute',\n    width: '55%',\n    top: '80%',\n    zIndex: '1',\n    justifyContent: 'center'\n  },\n  editTable: {\n    border: 'solid 0.5px lightgray',\n    backgroundColor: 'white',\n    display: 'flex',\n    padding: '1vh 1vw'\n  },\n  navButton: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    marginLeft: '2vw'\n  },\n  footer: {\n    position: 'absolute',\n    bottom: '1%',\n    boxShadow: '0px -1px 20px rgba(0, 0, 0, 25%)',\n    padding: '2vh 1vw',\n    background: theme.palette.white,\n    display: 'flex',\n    justifyContent: 'flex-end',\n    width: 'calc(100% - 2vw)',\n    height: 'calc(60px - 4vh)'\n  },\n  goBack: {\n    cursor: 'pointer',\n    color: theme.palette.black1,\n    fontWeight: '400',\n    marginRight: '1vw',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    zIndex: '1500'\n  },\n  docName: {\n    color: '#000000',\n    fontWeight: '500',\n    width: '55%',\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  actionItems: {\n    border: '1px solid #D6D6D6',\n    borderRadius: '5px',\n    color: theme.palette.black1,\n    height: 'fit-content',\n    padding: '0.5vw',\n    display: 'flex',\n    fontWeight: '500',\n    cursor: 'pointer',\n    marginLeft: '1vw',\n    \"&:last-child\": {\n      marginRight: '1vw',\n    },\n  },\n  docType: {\n    fontSize: '11px',\n    backgroundColor: theme.palette.darkYellow,\n    color: theme.palette.black1,\n    borderRadius: '8px',\n    padding: '0 1vw',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  info: {\n    fontSize: '12px',\n    color: theme.palette.headerGray,\n    display: 'flex',\n    width: 'max-content'\n  },\n  rowLink: {\n    cursor: 'pointer',\n    // textDecoration: 'underline',\n    fontWeight: '600',\n    width: '12vw',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    cursor: 'pointer',\n    color: '#314059',\n  },\n\n  status: {\n    backgroundColor: '#fde9e9',\n    border: 'solid 1px rgba(234, 67, 53, 0.1)',\n    borderRadius: '10px',\n    padding: '1vh 1vw',\n    fontSize: '12px',\n    color: '#3d3f52'\n  },\n  timer: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    fontSize: '18px',\n  },\n  imageHeader: {\n    // boxShadow: '0px 12px 29px 0 rgba(0, 0, 0, 0.1)',\n    backgroundColor: theme.palette.white,\n    borderBottom: 'solid 1px rgba(0,0,0,0.1)',\n    padding: '1vh',\n    width: '100%',\n    height: '30px',\n    zIndex: '1',\n    left: '35%',\n    display: 'flex',\n  },\n  searchContainer: {\n    backgroundColor: theme.palette.bgGray,\n    borderRadius: '5px',\n    width: '25%'\n  },\n  input: {\n    padding: '1vh 1vw',\n  },\n  searchInput: {\n    fontSize: '12px',\n    border: 'none !important',\n    borderRadius: '5px',\n    color: '#8e92a9',\n    \"&:hover\": {\n      backgroundColor: theme.palette.bgGray,\n    },\n    \"&$focused\": {\n      backgroundColor: theme.palette.bgGray,\n    },\n  },\n  timerIcon: {\n    color: theme.palette.blue,\n    marginRight: '1.2vh',\n    cursor: 'pointer'\n  },\n  icon: {\n    cursor: 'pointer',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    borderRight: '1px solid #E7E8F2',\n    padding: '0.5vw',\n    \"&:last-child\": {\n      borderRight: 'none',\n    },\n  },\n  iconContainer: {\n    display: 'flex',\n    border: '1px solid #E7E8F2',\n    borderRadius: '6px',\n    backgroundColor: theme.palette.white,\n    height: 'fit-content'\n  }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "navbarStyles",
                "method_begin": "export const navbarStyles = theme => ({",
                "method_end": "})",
                "range": [
                    1666,
                    1758
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/documentStyles.js",
                "returnType": "({\n  navbar: {\n    width: 'calc(10% - 8px - 18px)',\n    backgroundColor: theme.palette.white,\n    marginLeft: '10px',\n    marginRight: '8px',\n    display: 'flex',\n    flexDirection: 'column',\n    padding: '2vh 4px',\n    boxShadow: 'inset 0px 0px 2px rgba(0, 0, 0, 0.25)',\n    height: 'calc(100% - 100px)',\n    overflowY: 'scroll'\n  },\n  mDrawer: {\n    width: '70% !important',\n    padding: '3% 3%',\n  },\n  pageDivider: {\n    width: '90%', marginBottom: '1vh',\n    borderBottom: 'dashed 2px',\n\n\n  },\n  qcIcon: {\n    position: 'absolute',\n    top: '5%',\n    right: '10%'\n  },\n  attIcon: {\n    position: 'absolute',\n    top: '5%',\n    left: '10%'\n  },\n  strategyIcon:{\n    position: 'absolute',\n    bottom: '27%',\n    right: '10%',\n    borderRadius: '6px',\n    padding: '3px 7px',\n    backgroundColor: '#157fff',\n    color: 'white'\n  },\n  log: {\n    fontSize: '12px',\n    color: theme.palette.headerGray,\n    marginBottom: '2px'\n  },\n  logList: {\n    listStyleType: 'circle',\n    margin: '0',\n    padding: '0'\n  },\n  thumbnailContainer: {\n    border: '1px solid rgba(138, 136, 134, 0.9)',\n    height: '120px',\n    width: '80px',\n    padding: '0',\n    fontSize: '11px',\n    color: theme.palette.headerGray,\n    cursor: 'pointer',\n    position: 'relative',\n    // backgroundColor: 'rgba(0,0,0,0.1)',\n    paddingBottom: '3px'\n  },\n  activePage: {\n    border: `solid 2px ${theme.palette.blue}`\n  },\n  thumbnail: {\n    width: 'calc(100% - 16px)',\n    maxHeight: '100%',\n    maxHeight: '100%',\n    margin: '8px 4px',\n    marginTop: '14px'\n  },\n\n  imageName: {\n    color: theme.palette.headerGray,\n    fontSize: '11px',\n    textAlign: 'center',\n    marginRight: '1vh',\n    marginLeft: '-8px',\n    marginRight: '-8px',\n\n  },\n  docName: {\n    color: theme.palette.headerGray,\n    fontSize: '11px',\n    textAlign: 'center',\n    marginBottom: '2vh',\n    width: '100%',\n    overflow: 'hidden'\n  }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "classificationStyles",
                "method_begin": "export const classificationStyles = theme => ({",
                "method_end": "})",
                "range": [
                    1762,
                    1953
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/documentStyles.js",
                "returnType": "({\n\n  pageDivider: {\n    height: '90%', marginBottom: '1vh',\n    borderLeft: 'dashed 1px',\n    height: '80px',\n  },\n  mergeBtn:{\n    marginRight: '4px',\n    cursor: 'pointer',\n    color: 'white',\n    backgroundColor: theme.palette.blue,\n    padding: '2px 4px',\n    fontWeight: 'normal',\n    borderRadius: '5px'\n  },\n  disabledCr:{\n    backgroundColor: 'white',\n    filter: 'brightness(0.7)',\n    pointerEvents: 'none'\n  },\n  strategyMenu:{\n    marginTop: '1vh'\n  },\n  strategyItem:{\n    padding: '0.2vh',\n    \"&:hover\": {\n      backgroundColor: '#383838'\n    },\n  },\n  disableCrMsg:{\n    position: 'absolute',\n    height: '100%',\n    width: '100%',\n    textAlign: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    top: '0'\n  },\n  fileInfo: {\n    color: 'gray',\n    marginBottom: '1vh',\n  },\n  dragger: {\n    width: '5px',\n    cursor: 'ew-resize',\n    padding: '4px 0 0',\n    borderTop: '1px solid #ddd',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    zIndex: '100',\n    backgroundColor: '#f4f7f9'\n  },\n  hygieneContainer: {\n    position: 'fixed',\n    marginTop: '1vw',\n    zIndex: '1',\n    backgroundColor: 'lightGray',\n    borderRadius: '8px',\n    marginLeft: '1vw'\n\n  },\n  minimizeCont: {\n    position: 'fixed',\n    marginTop: '1vw',\n    right: '1vw',\n    zIndex: '1',\n    backgroundColor: 'lightGray',\n    borderRadius: '8px',\n\n  },\n  icon: {\n    cursor: 'pointer',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    borderRight: '1px solid #E7E8F2',\n    padding: '0.5vw',\n    \"&:last-child\": {\n      borderRight: 'none',\n    },\n  },\n  zoomDrawer: {\n    position: 'absolute !important',\n    // width: '40% !important',\n    height: '100%'\n  },\n  clockBg: {\n    backgroundColor: 'rgba(0,0,0,0.7)',\n    zIndex: '100',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    textAlign: 'center',\n    height: 'calc(100% - 120px)',\n    color: 'white'\n\n  },\n\n  pageDivContainer: {\n    height: '150px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    //padding: '0 1.5vw',\n    position: 'relative'\n  },\n  splitIcon: {\n    position: 'absolute',\n    top: 'calc(50% - 16px)',\n    left: 'calc(50% - 10px)',\n    // zIndex: '1',\n    backgroundColor: 'white'\n\n  },\n  mergeIcon: {\n    position: 'absolute',\n    bottom: '25%',\n    left: '30%',\n    backgroundColor: 'white'\n  },\n  qcIcon: {\n    position: 'absolute',\n    top: '5%',\n    right: '10%'\n  },\n  attIcon: {\n    position: 'absolute',\n    top: '5%',\n    left: '10%'\n  },\n  strategyIcon:{\n    position: 'absolute',\n    top: '5%',\n    right: '10%',\n    borderRadius: '6px',\n    padding: '3px 7px',\n    backgroundColor: '#157fff',\n    color: 'white'\n  },\n  strategyIcon1:{\n    position: 'absolute',\n    bottom: '5%',\n    right: '10%',\n    borderRadius: '6px',\n    padding: '3px 7px',\n    backgroundColor: '#157fff',\n    color: 'white'\n  },\n  thumbnailContainer: {\n    border: '1px solid rgba(138, 136, 134, 0.9)',\n    height: '150px',\n    width: '120px',\n    padding: '0',\n    fontSize: '11px',\n    color: theme.palette.headerGray,\n    cursor: 'pointer',\n    position: 'relative',\n    backgroundColor: 'white',\n    paddingBottom: '3px',\n    margin: '0 1vw',\n    borderWidth: '2px'\n  },\n  activePage: {\n    border: `solid 2px ${theme.palette.blue}`\n  },\n  thumbnail: {\n    width: 'calc(100% - 8px)',\n    height: 'calc(150px - 16px )',\n    margin: '8px 4px',\n    overflow: 'hidden'\n  },\n  imageName: {\n    color: theme.palette.black,\n    textAlign: 'center',\n    marginTop: '1vw',\n    padding: '4px',\n    borderRadius: '6px',\n    width: 'fit-content'\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.white,\n    display: 'flex',\n    position: 'relative',\n    height: '100%',\n    display: 'flex', height: 'calc(100% - 120px - 4% - 4vh)', padding: '2%', flexWrap: 'wrap', overflowY: 'scroll'\n  }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//padding:",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "statStyles",
                "method_begin": "export const statStyles = theme => ({",
                "method_end": "NA",
                "range": [
                    1957,
                    2059
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/documentStyles.js",
                "returnType": "({\n  statContainer: {\n    height: '10%',\n    //margin: '4vh calc(24px) 10px calc(24px)',\n    display: 'flex',\n    /* [theme.breakpoints.down('xs')]: {\n       margin: '0 calc(24px) 0 calc(24px)',\n     },\n     '@media screen and (max-width: 1280px) and (min-height: 577px) and (max-height: 577px)': {\n       marginTop: '10px'\n     },\n     '@media screen and  (min-height: 800px) ': {\n       marginTop: '15px'\n     },\n     '@media screen and  (min-height: 1200px) ': {\n       marginTop: '30px'\n     },*/\n  },\n  blurredStats: {\n    // filter: 'blur(3px)',\n    pointerEvents: 'none'\n  },\n  icon: {\n    marginRight: '1vw'\n  },\n  statCard: {\n    // border: '1px solid #E7E8F2',\n    border: 'solid 1px #c5c6d1',\n    // cursor: 'pointer',\n    borderRadius: '6px',\n    backgroundColor: theme.palette.white,\n    flex: '1',\n    margin: '0 0.5vw 0 0.5vw',\n    padding: '1vh 1vw',\n    color: '#33343D',\n    position: 'relative',\n    fontWeight: '400',\n    display: 'flex',\n    \"&:last-child\": {\n      marginRight: '0vw'\n    },\n    \"&:first-child\": {\n      marginLeft: '0vw'\n    },\n    /*  [theme.breakpoints.up('md')]: {\n        fontSize: '13.5px',\n      },\n      [theme.breakpoints.up('lg')]: {\n        fontSize: '18.5px',\n      },\n      '@media screen and  (max-width: 1280px)and (min-height: 577px)': {\n        height: '15vh',\n      },\n      '@media screen and  (min-height: 649px) and (max-height: 764px)': {\n        height: '14vh',\n      },\n      '@media screen and  (min-width: 1920px) and (max-height: 900px)': {\n        height: '14vh',\n        fontSize: '15px',\n      },*/\n  },\n  fileCount: {\n    fontWeight: '600',\n    color: '#33343E',\n    marginRight: '1vw'\n  },\n  successText: {\n    color: '#34ca77',\n    fontWeight: '600',\n    fontSize: '13px',\n    padding: '0  0 0 1vw',\n    display: 'flex',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '13px',\n    },\n    [theme.breakpoints.up('lg')]: {\n      fontSize: '18.5px',\n    },\n  },\n  failedText: {\n    color: '#f04848',\n    fontWeight: '600',\n    fontSize: '13px',\n    padding: '0  0 0 1vw',\n    borderLeft: 'solid 1px rgba(0,0,0,0.2)',\n    marginLeft: '1vw',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '15px',\n    },\n    [theme.breakpoints.up('lg')]: {\n      fontSize: '18.5px',\n    },\n  },\n  subText: {\n    display: 'flex',\n    color: '#858585',\n    fontWeight: 'normal',\n  },\n  greenText: {\n    color: '#34ca77',\n  }\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//margin:",
                    "/*",
                    "//",
                    "//",
                    "//",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/formStyles.js": {
        "method_details_": [
            {
                "method_name": "formStyles",
                "method_begin": "export const formStyles = theme => ({",
                "method_end": "})",
                "range": [
                    2,
                    136
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/formStyles.js",
                "returnType": "({\n    fieldDiv: {\n        backgroundColor: theme.palette.white,\n        position: 'absolute',\n        borderRadius: '4px',\n        padding: '1vh 1vw',\n        paddingBottom: '12px',\n        flexDirection: 'column',\n        boxShadow: '1px dashed rgba(0, 0, 0, 0.6)',\n        border: '1px dashed rgba(0, 0, 0, 0.6)',\n        zIndex: '1',\n        cursor: 'move',\n        boxShadow: 'rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px',\n\n\n    },\n    approveBtn: {\n        backgroundColor: '#30b283',\n        color: 'white',\n        padding: '4px 1vw',\n        borderRadius: '15px',\n        cursor: 'pointer',\n        display: 'flex',\n\n    },\n    rejectBtn: {\n        backgroundColor: '#e45f5f',\n        color: 'white',\n        marginRight: '4px',\n        padding: '4px 1vw',\n        borderRadius: '15px',\n        cursor: 'pointer',\n        display: 'flex',\n        paddingRight: '4px',\n        position: 'relative'\n    },\n    rejectedMenu: {\n        position: 'absolute',\n        top: '100%',\n        marginTop: '1vh',\n        border: '1px solid #D1D1D1',\n        borderRadius: '6px',\n        padding: '4px 0',\n        backgroundColor: theme.palette.white,\n        marginLeft: '-1vw'\n    },\n    rejectMenuItem:{\n        padding: '4px 1vw',\n        color: '#646884',\n        \"&:hover\": {\n            backgroundColor: \"rgba(211,211,211,0.6)\",\n            // border: 'solid 1px #157fff',\n          },\n    },\n    popup: {\n        backgroundColor: theme.palette.white,\n        position: 'absolute',\n        borderRadius: '4px',\n        padding: '1vh 1vw',\n        flexDirection: 'column',\n        border: '1px dashed rgba(0, 0, 0, 0.6)',\n        zIndex: '1',\n        cursor: 'move',\n        boxShadow: 'rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px',\n    },\n    formContainer: {\n        marginTop: '2vh'\n    },\n    tabRoot: {\n        minWidth: 'auto',\n        minHeight: '10px !important',\n        color: '#5c5d64',\n        paddingLeft: '0px',\n        paddingRight: '0px',\n        marginRight: '1vw',\n        fontWeight: '500'\n    },\n    selectedTab: {\n        color: '#2F6EE9',\n        fontWeight: '600'\n    },\n    indicatorColor: {\n        backgroundColor: '#2F6EE9 !important'\n    },\n    fixedTab: {\n        borderBottom: '0.5px solid rgba(51, 52, 61,0.3)',\n    },\n    tabs: {\n        minHeight: 'min-content'\n    },\n    multiline: {\n        padding: '0',\n        border: 'none !important'\n    },\n    fieldLabel: {\n        color: '#67686e',\n        fontWeight: '400',\n        marginBottom: '4px'\n    },\n    hiddenText: {\n        color: theme.palette.cloudyBlue,\n        fontSize: '18px',\n        whiteSpace: 'pre-line',\n        visibility: 'hidden',\n        height: '2px',\n        overflow: 'hidden',\n        // padding: '1vh 1vw'\n    },\n    textFieldInput: {\n        color: theme.palette.headerGray,\n        backgroundColor: theme.palette.white,\n        borderRadius: '4px',\n        padding: '1vh 1vw',\n        lineHeight: '1.2',\n        //height: '24px',\n        border: '0.75px solid #8A8886',\n        whiteSpace: 'pre',\n        fontWeight: '400',\n        whiteSpace: 'break-spaces'\n    },\n    fieldIconContainer: {\n        display: 'flex',\n        marginTop: '4vh',\n        justifyContent: 'flex-end'\n    },\n    trainingIconContainer: {\n        display: 'flex',\n        marginTop: '4vh',\n        justifyContent: 'flex-end'\n    },\n    formIcons: {\n        marginRight: '1vw',\n        cursor: 'pointer'\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//height:"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/listStyles.js": {
        "method_details_": [
            {
                "method_name": "listStyles",
                "method_begin": "export const listStyles = theme => ({",
                "method_end": "})",
                "range": [
                    1,
                    601
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/listStyles.js",
                "returnType": "({\n    pageContainer: {\n        backgroundColor: theme.palette.bgGray,\n        margin: '0 calc(24px + 2vw)',\n        marginTop: '60px',\n        height: 'calc(100% - 60px)',\n        width: '100%'\n    },\n    wfStatus:{\n        color: '#42526E',\n        backgroundColor: '#DFE1E6',\n        borderRadius: '3px',\n        width: 'fit-content',\n        padding: '0 4px'\n    },\n    exportDocs: {\n        fontSize: '12px',\n        cursor: 'pointer',\n        color: theme.palette.black1,\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    menuPaper: {\n        maxHeight: '30%'\n    },\n    rowLink: {\n        cursor: 'pointer',\n    //textDecoration: 'underline',\n    fontWeight: '600',\n    width: '12vw',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    cursor: 'pointer',\n    color: '#314059',\n    },\n    rowLinkDis: {\n        cursor: 'pointer',\n        fontWeight: '500',\n        width: '12vw',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        cursor: 'pointer',\n        color: theme.palette.headerGray\n    },\n    classMenu: {\n        fontSize: '11px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n    pagination: {\n        marginTop: '3vh',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginRight: 'calc(24px + 1vw)'\n    },\n    tableCellRoot: {\n        padding: '1vh 1vw !important'\n    },\n    disRowLink: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n        fontWeight: '500',\n        width: '8vw',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        cursor: 'not-allowed',\n        color: 'gray'\n    },\n    percentageLine: {\n        height: '3px', border: 'none', margin: '0', borderRadius: '6px',\n    },\n    adConfigSection: {\n        flex: '1',\n        margin: '2vw 1vw',\n        border: 'solid 1px rgba(0, 0, 0, 0.05)',\n        borderRadius: '10px',\n        padding: '2vw'\n    },\n    percentageBar: {\n        border: `none`,\n        backgroundColor: '#f2f2f2',\n        width: '100%',\n        borderRadius: '6px',\n        height: '3px',\n\n    },\n    cfScore: {\n        color: theme.palette.headerGray,\n        marginLeft: '8px',\n    },\n    newConfigButton: {\n        cursor: 'pointer',\n        color: theme.palette.blue,\n        textDecoration: 'underline',\n        fontSize: '13px',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        fontWeight: '500'\n    },\n    miniHeader: {\n        color: theme.palette.black1,\n        padding: '2.5vh 2vw',\n        display: 'flex',\n        justifyContent: 'space-between',\n        '@media screen and  (max-width: 1280px) and (min-height: 577px) and (max-height: 577px)': {\n            padding: '1.5vh 2vw',\n        },\n    },\n    docListHeader: {\n        margin: '0 calc(24px + 1vw) 0 calc(24px + 1vw) !important',\n        padding: '0 !important'\n    },\n    mappingListCont: {\n        //  paddingTop: '33px',\n        // height: 'calc(100% - 33px)'\n        backgroundColor: theme.palette.white\n    },\n    selectAllDocs: {\n        fontSize: '12px',\n        cursor: 'pointer',\n        textDecoration: 'underline',\n        color: theme.palette.black1,\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column'\n    },\n    batchFilter: {\n        backgroundColor: theme.palette.black1,\n        height: 'fit-content',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        padding: '1px 0',\n        marginRight: '4px',\n        color: theme.palette.white,\n        border: 'solid 1px rgba(0, 0, 0, 0.05)',\n        borderRadius: '20px'\n    },\n    classFilter: {\n        backgroundColor: theme.palette.white,\n        height: 'fit-content',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        padding: '0 1vh',\n        marginRight: '1vw',\n        boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        border: 'solid 2px black',\n        borderRadius: '20px',\n        color: theme.palette.black1\n    },\n    batchFilterSelect: {\n        backgroundColor: 'transparent',\n        color: theme.palette.white,\n        fontSize: '11px',\n        paddingLeft: '4px',\n        fontWeight: 'normal',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px',\n            paddingLeft: '1vw !important',\n        },\n    },\n    classFilterSelect: {\n        backgroundColor: 'transparent',\n        color: theme.palette.black1,\n        fontSize: '11px',\n        paddingLeft: '4px',\n        fontWeight: 'normal',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px',\n            paddingLeft: '1vw !important',\n        },\n    },\n    batchFilterIcon: {\n        color: theme.palette.white,\n        right: '0 !important',\n    },\n    classFilterIcon: {\n        color: `${theme.palette.black1} !important `,\n        right: '0 !important',\n    },\n    configChip: {\n        fontSize: '11px',\n        color: theme.palette.blue,\n        border: `solid 1px ${theme.palette.blue}`,\n        padding: '0 !important',\n        height: 'fit-content'\n    },\n    configChipContainer: {\n        fontSize: '11px',\n        color: theme.palette.headerGray,\n        marginLeft: '1vw'\n    },\n    selectedAllDocs: {\n        fontSize: '11px',\n        cursor: 'pointer',\n        borderRadius: '15px',\n        padding: '0 1vw',\n        color: theme.palette.black1,\n        backgroundColor: '#e5e5e5',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column'\n    },\n    sortIcon: {\n        marginTop: '-4px'\n    },\n    actionIcons: {\n        color: theme.palette.blue,\n        marginRight: '4px'\n    },\n    tableLoader: {\n        padding: '14vh 0'\n    },\n    identifiedBtn: {\n        border: 'solid 1px #2d9b3d',\n        backgroundColor: '#2d9b3d',\n        color: theme.palette.white,\n        '& $idNumber': {\n            backgroundColor: theme.palette.white,\n            color: '#2d9b3d',\n        }\n    },\n    allFilesBtn: {\n        border: 'solid 1px black',\n        backgroundColor: `${theme.palette.black1} !important`,\n        color: theme.palette.white,\n        '& $allNumber': {\n            backgroundColor: theme.palette.white,\n            color: 'black',\n        }\n    },\n    disAllFilesBtn: {\n        border: 'solid 1px black',\n    },\n    unidentifiedBtn: {\n        border: 'solid 1px #e83c3d',\n        backgroundColor: '#e83c3d',\n        color: theme.palette.white,\n        '& $unIdNumber': {\n            backgroundColor: theme.palette.white,\n            color: '#e83c3d',\n        }\n    },\n    feedbackBtn: {\n        border: 'solid 1px #ecaf2b',\n        backgroundColor: '#ecaf2b',\n        color: theme.palette.white,\n    },\n    disabledIdBtn: {\n        color: theme.palette.black1,\n        border: 'solid 1px #2d9b3d',\n        backgroundColor: theme.palette.white,\n        \"&:hover\": {\n            backgroundColor: \"#2d9b3d\",\n            color: theme.palette.white,\n            '& $idNumber': {\n                backgroundColor: theme.palette.white,\n                color: '#2d9b3d',\n            }\n            // border: 'solid 1px #157fff',\n        },\n    },\n    disabledFdBtn: {\n        color: theme.palette.black1,\n        border: 'solid 1px #ecaf2b',\n        backgroundColor: theme.palette.white,\n        \"&:hover\": {\n            backgroundColor: \"#ecaf2b !important\",\n            color: theme.palette.white\n        }\n    },\n    disabledUnIdBtn: {\n        color: theme.palette.black1,\n        border: 'solid 1px #e83c3d',\n        backgroundColor: theme.palette.white,\n        \"&:hover\": {\n            backgroundColor: \"#e83c3d\",\n            color: theme.palette.white,\n            // border: 'solid 1px #157fff',\n            '& $unIdNumber': {\n                backgroundColor: theme.palette.white,\n                color: '#e83c3d',\n            }\n        },\n    },\n    disabledUnIdBtn1: {\n        color: theme.palette.headerGray,\n        // border: 'solid 1px #e83c3d',\n        backgroundColor: theme.palette.white,\n        border: 'solid 1px #e83c3d',\n    },\n    idNumber: {\n        color: theme.palette.white,\n        backgroundColor: '#2d9b3d',\n        minWidth: '30px',\n        borderRadius: '3px',\n        marginLeft: '1vw'\n    },\n    unIdNumber: {\n        color: theme.palette.white,\n        backgroundColor: '#e83c3d',\n        minWidth: '30px',\n        borderRadius: '3px',\n        marginLeft: '1vw'\n    },\n    allNumber: {\n        color: theme.palette.white,\n        backgroundColor: 'black',\n        minWidth: '30px',\n        borderRadius: '3px',\n        marginLeft: '1vw'\n    },\n    idButtons: {\n        padding: '0 1vw',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        cursor: 'pointer',\n        margin: '0 8px',\n        borderRadius: '20px',\n        //  boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        fontWeight: 'normal',\n        minWidth: '120px',\n        textAlign: 'center',\n    },\n    miniLoader: {\n        marginLeft: '1vw',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column'\n    },\n\n    searchContainer: {\n        margin: '0px calc(24px + 1vw) 20px calc(24px + 1vw)',\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingTop: '30px',\n        '@media screen and (max-width: 1280px) and (min-height: 577px) and (max-height: 577px)': {\n            marginBottom: '10px !important',\n            paddingTop: '15px'\n        },\n\n    },\n    searchField: {\n        boxShadow: '0 0 29px 0 rgb(0 0 0 / 7%)',\n        borderRadius: '20px',\n        border: 'none',\n        backgroundColor: theme.palette.white,\n        height: '100%'\n    },\n    searchInput: {\n        padding: '1vh 1vw',\n        fontSize: '11px',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px',\n        },\n    },\n    filterButton: {\n        padding: '0 1vw',\n        boxShadow: '0px 1px 4px 0 rgb(92 101 132 / 18%)',\n        borderRadius: '20px',\n        backgroundColor: theme.palette.white,\n        display: 'flex',\n        color: theme.palette.headerGray,\n        fontWeight: '500',\n        marginLeft: '1vw',\n        cursor: 'pointer',\n    },\n    filterActive: {\n        backgroundColor: theme.palette.blue,\n        color: theme.palette.white\n    },\n    docStatus: {\n        // fontSize: '11.5px',\n        color: '#30b283',\n        backgroundColor: '#ebf9f5',\n        borderRadius: '15px',\n        padding: '1vh 1vw',\n        display: 'flex',\n        width: 'fit-content'\n    },\n    dot: {\n        borderRadius: '50%',\n        width: '4px',\n        height: '4px',\n        marginRight: '6px'\n    },\n    fileName: {\n        width: '8vw',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        cursor: 'pointer',\n        color: theme.palette.blue\n    },\n    filterMenu: {\n        boxShadow: '0 0 49px 0 rgba(71, 71, 71, 0.15)',\n        border: ' solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '10px',\n        marginTop: '1vh',\n        width: '13%',\n        padding: '2vh 0',\n    },\n    deleteButton: {\n        boxShadow: ' 0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        borderRadius: '5px',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        display: 'flex',\n        color: '#646884',\n        fontWeight: '500',\n        fontSize: '12px',\n        padding: '0 1vw',\n        marginLeft: '1vw',\n        cursor: 'pointer'\n    },\n    downloadButton: {\n        display: 'flex',\n        color: theme.palette.white,\n        fontWeight: 'normal',\n        borderRadius: '20px',\n        boxShadow: ' 0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        backgroundColor: theme.palette.black1,\n        fontSize: '10px',\n        padding: '0 1vw',\n        marginLeft: '1vw',\n        cursor: 'pointer'\n\n    },\n    accordion: {\n        boxShadow: 'none',\n        padding: '0 !important',\n        minHeight: '0 !important',\n        width: '100%',\n        color: theme.palette.headerGray,\n        fontSize: '12px !important',\n        fontWeight: '500'\n    },\n    menuItem: {\n        backgroundColor: theme.palette.white,\n        padding: '0 1vw !important',\n        paddingBottom: '1vh !important',\n        margin: '0',\n        \"&:last-child\": {\n            paddingBottom: '0vh !important',\n        },\n    },\n    noMarginPadding: {\n        margin: '0 !important',\n        padding: '0 !important',\n    },\n    menuExpanded: {\n        margin: '0 !important',\n        padding: '0 !important',\n        paddingBottom: '1vh !important'\n    },\n    filterOption: {\n        display: 'flex',\n        padding: '0.5vh 0',\n        color: '#8e92a9',\n        fontWeight: 'normal',\n        fontSize: '11px',\n        \"&:first-child\": {\n            paddingTop: '0vh !important',\n        },\n    },\n    expandIcon: {\n        color: theme.palette.headerGray,\n        fontSize: '12px'\n    },\n    docCategoryContainer: {\n        boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        border: 'solid 1px rgba(0, 0, 0, 0.05)',\n        backgroundColor: theme.palette.white,\n        borderRadius: '10px',\n        margin: '1vh 2vw 20px 2vw',\n        fontSize: '12px',\n        color: '#464962',\n        fontWeight: '500',\n        padding: '0 2vw',\n        height: '13vh',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column'\n    },\n    configHeading: {\n        margin: '10px 2vw 20px 2vw',\n        color: theme.palette.headerGray\n    },\n    categoryOption: {\n        fontSize: '11.5px',\n        color: '#9ea2bb',\n        marginRight: '1.5vw',\n        cursor: 'pointer',\n        margin: '1.5vh 0 0 0',\n        fontWeight: 'normal',\n        display: 'flex'\n    },\n    categoryCheck: {\n        width: '11px',\n        height: '11px',\n        border: 'solid 1px rgba(0, 0, 0, 0.2)',\n        borderRadius: '3px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        marginRight: '5px'\n    },\n    categorySelected: {\n        width: '5px',\n        height: '5px',\n        backgroundColor: theme.palette.darkYellow,\n        alignSelf: 'center',\n    },\n    table: {\n        tableLayout: 'fixed'\n    },\n\n\n\n\n    createButton: {\n        color: '#0052CC',\n        fontSize: '13px',\n        fontWeight: '500',\n        cursor: 'pointer'\n    },\n    headerCont: {\n        color: theme.palette.black,\n        fontSize: '16px',\n        fontWeight: '500',\n        padding: '0 2vw',\n        backgroundColor: '#F7FAFC',\n        boxShadow: '0px 1px 0px rgba(0, 0, 0, 0.25)',\n    },\n    listHeader: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: '1.2% 0 10px 0'\n    },\n    tabRoot: {\n        padding: '0',\n        marginRight: '2vw',\n        fontWeight: 'normal',\n        minWidth: 'fit-content'\n    },\n    listContainer: {\n        height: 'calc(100% - 120px)',\n        backgroundColor: '#F7FAFC',\n    },\n    actionContainer: {\n        display: 'flex',\n        backgroundColor: '#F7FAFC',\n        justifyContent: 'space-between',\n        margin: '10px 0 0 0',\n        padding: '5px 2vw 10px 2vw',\n        fontWeight: '400'\n    },\n    tableContainer: {\n        height: 'calc(100% - 150px)',\n        margin: '0 2vw'\n    },\n    pgContainer:{\n        marginTop: '2vh',\n        display: 'flex',\n        width: '100%',\n        justifyContent: 'flex-end'\n    },\n    loaderCell:{\n        boxShadow: 'none !important',\n        \"&:hover\": {\n            boxShadow: 'none !important',\n          },\n    },\n\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//textDecoration:",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/loginStyles.js": {
        "method_details_": [
            {
                "method_name": "loginStyles",
                "method_begin": "export const loginStyles = theme => ({",
                "method_end": "})",
                "range": [
                    2,
                    160
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/loginStyles.js",
                "returnType": "({\n    loginForm: {\n        width: '48%',\n        backgroundColor: theme.palette.white,\n        height: '100%',\n        paddingTop: '15%',\n        '@media (min-width: 50px) and (max-width: 700px)': {\n            width: '100%',\n        },\n    },\n    loginBg: {\n        padding: '14% 0 0 5%',\n        position: 'relative',\n        width: 'calc(52% - 5%)',\n        background: 'linear-gradient(180deg, #0052CC 0%, rgba(0, 82, 204, 0) 100%)',\n        '@media (min-width: 50px) and (max-width: 700px)': {\n            display: 'none'\n        },\n    },\n    captchaImg: {\n        //borderBottom: 'solid 1px lightGray',\n        padding: '1vh 1vw',\n        borderRadius: '8px',\n        backgroundColor: theme.palette.white,\n    },\n    captcha: {\n        width: '175px',\n        display: 'flex',\n        justifyContent: 'space-around',\n        border: 'solid 1px rgba(0,0,0,0.3) !important',\n        borderRadius: '8px',\n        backgroundColor: theme.palette.white,\n        padding: '0.4vh',\n        margin: '1.5vh 0 1vh 0',\n        alignSelf: 'center'\n\n    },\n    refreshIcon: {\n        cursor: 'pointer',\n        height: 'inherit',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        color: `${theme.palette.charcoalGray} !important`\n    },\n    appPreview: {\n        marginTop: '3vh'\n    },\n    form: {\n        padding: '0 15%',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    appSummary: {\n        position: 'relative',\n        color: 'white',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    loginText: {\n        color: 'rgba(0, 0, 0, 0.4)',\n        fontWeight: '400',\n        margin: '1.5vh 0 0 0',\n        fontFamily: 'Roboto',\n        lineHeight: '1.6'\n    },\n    loginAppText: {\n        fontWeight: '400',\n        margin: '1.5vh 0 0 0',\n        lineHeight: '1.6'\n    },\n    loginField: {\n        color: '#000000',\n        fontWeight: '500',\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    button: {\n        padding: '1.5vh 2vw !important',\n        fontSize: '14px',\n    },\n    inputRoot: {\n        borderRadius: '10px !important',\n        fontWeight: 'normal !important',\n        border: 'solid 1px rgba(0,0,0,0.3) !important',\n        \"&:-webkit-autofill\": {\n            borderRadius: '10px !important',\n            backgroundColor: 'white !important'\n        },\n    },\n    focusedInput: {\n        border: `1px solid #4484FF !important`\n    },\n    input: {\n        paddingTop: '1.2vh !important',\n        paddingBottom: '1.2vh !important',\n        border: 'none',\n        color: 'black',\n        fontWeight: '400',\n        \"&:-webkit-autofill\": {\n            borderRadius: '10px !important',\n            backgroundColor: 'white !important'\n        },\n    },\n    formField: {\n        borderRadius: '10px !important',\n        margin: '1.5vh 0 1vh 0',\n        width: '100%',\n        border: 'none !important'\n\n    },\n    actionContainer: {\n        display: 'flex',\n        // justifyContent: 'space-between',\n        margin: '50px 0',\n        justifyContent: 'flex-end',\n        borderTop: '1.5px solid #E8E7EA',\n        paddingTop: '20px'\n    },\n    forgotPwd: {\n        color: '#878585',\n        fontSize: '12px',\n        cursor: 'pointer',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        [theme.breakpoints.up('sm')]: {\n            fontSize: '14px !important',\n        },\n        [theme.breakpoints.up('md')]: {\n            fontSize: '14px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '16px !important',\n        },\n    },\n    logo: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginBottom: '50px',\n        cursor: 'pointer',\n        width: '201px',\n        alignSelf: 'center'\n    },\n    pageTitle: {\n        fontWeight: '500',\n        fontSize: '15px',\n        color: theme.palette.darkGray,\n        marginBottom: '0.2vh',\n        textAlign: 'center'\n    },\n    pageSubTitle: {\n        fontSize: '13px',\n        color: theme.palette.darkGray,\n        marginBottom: '30px',\n        textAlign: 'center'\n    }\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//borderBottom:",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "accountStyles",
                "method_begin": "export const accountStyles = theme => ({",
                "method_end": "NA",
                "range": [
                    161,
                    223
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/loginStyles.js",
                "returnType": "({\n    container: {\n        /* backgroundColor: theme.palette.white,\n         margin: '30px calc(24px + 1vw) 0 calc(24px + 1vw)',\n         border: 'solid 1px rgba(0, 0, 0, 0.05)',\n         boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n         borderRadius: '10px',\n         height: 'fit-content'*/\n        height: 'calc(100% - 30px)',\n        borderRadius: '10px',\n    },\n    infoBox: {\n        padding: '1vw',\n        margin: '2vw',\n        border: 'solid 1px rgba(0, 0, 0, 0.2)',\n        boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        borderRadius: '10px',\n        height: 'fit-content',\n        width: '50%'\n    },\n    infoRow: {\n        display: 'flex',\n        borderBottom: 'solid 1px rgba(0, 0, 0, 0.2)',\n        paddingBottom: '1vh',\n        marginBottom: '1vh',\n        \"&:last-child\": {\n            borderBottom: '0',\n            marginBottom: 0\n        },\n    },\n    infoLabel: {\n        color: 'gray',\n        width: '30%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    teamName: {\n        padding: '4px 1vw', marginRight: '4px',\n        backgroundColor: 'lightGray',\n        borderRadius: '10px',\n        marginBottom: '1vh'\n    },\n    teamNameTag: {\n        padding: '4px 1vw', marginRight: '4px',\n        //border: 'solid 1px lightGray',\n        borderRadius: '10px',\n        color: 'white'\n    },\n    supDetails: {\n        marginTop: '4px',\n        fontWeight: '500',\n        \"&:first-child\": {\n            marginTop: '0'\n        },\n\n    },\n    custId: {\n        \"&:after\": {\n            content: ','\n        }\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//border:"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/trainingStyles.js": {
        "method_details_": [
            {
                "method_name": "trainingStyles",
                "method_begin": "export const trainingStyles = theme => ({",
                "method_end": "});",
                "range": [
                    3,
                    303
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/trainingStyles.js",
                "returnType": "({\n    errorTableRow: {\n        borderCollapse: 'collapse',\n        border: 'solid 2px red',\n        borderRight: 'solid 3px red',\n        borderLeft: 'solid 4px red',\n\n    }, feedbackTab: {\n        color: '#ecaf2b !important'\n    },\n    qrKey: {\n        display: 'flex',\n        marginBottom: '1vh',\n        width: '40%',\n        fontWeight: '500',\n        color: theme.palette.black1\n      },\n    \n      qrData: {\n        color: theme.palette.headerGray,\n        margin: '1vh 0 0 1.5vw',\n        wordBreak: 'break-all',\n        height: '100%',\n        overflowY: 'scroll'\n      },\n    closeTable:{\n        position: 'absolute',\n        top: '3%',\n        right: '0.5%',\n        cursor: 'pointer',\n        zIndex: '9'\n    },\n    tableName:{\n        marginBottom: '4px',\n        marginLeft: '1vh',\n        fontWeight: 'bold',\n    },\n    menuList:{\n        maxHeight: '50vh',\n        overflowY: 'scroll'\n    },\n    filterMenu:{\n        minWidth: '0 !important'\n    },\n    pgMenuItem: {\n        \"&:hover\": {\n            backgroundColor: \"#f5f5f5 !important\",\n            // border: 'solid 1px #157fff',\n        },\n    },\n    multiTabLock:{\n        backgroundColor: 'white',\n        zIndex: '10',\n        position: 'absolute',\n        width: '100%',\n        height: 'calc(100% - 100px)',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        textAlign: 'center',\n        fontWeight: '500'\n    },\n    popupIndicatorOpen: {\n        transform: 'none !important'\n    },\n    custId: {\n        color: 'gray',\n        marginBottom: '2vh'\n    },\n    autoDisabled: {\n        backgroundColor: 'lightGray !important'\n    },\n    currentField: {\n        backgroundColor: '#f1f4f7 ',\n    },\n    formSubmitContainer: {\n        display: 'flex',\n        margin: '6vh 2vw',\n        justifyContent: 'center'\n    },\n    addTable: {\n        textDecoration: 'none',\n        color: theme.palette.headerGray,\n        fontSize: '12px',\n\n    },\n    selectLabel: {\n        color: '#5c5d64',\n        display: 'flex',\n        //fontSize: '12.5px',\n        marginBottom: '0.8vh',\n        fontWeight: '400 !important',\n    },    /*Styles for input*/\n    textFieldRoot: {\n        border: 'none',\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        padding: '1vh 1vw !important',\n        border: '1px solid #8A8886',\n        color: '#33343D !important',\n        ['@media (min-width: 1680px)']: {\n            fontSize: '13px'\n        },\n        ['@media (min-width: 1280px) and (max-height: 650px)']: {\n            fontSize: '10.5px !important'\n        },\n\n        ['@media (min-width: 1920px)']: {\n            fontSize: '16px'\n        }\n    },\n    textFieldRootError: {\n        border: 'none',\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        padding: '1vh 1vw !important',\n        border: '1.5px solid red',\n        color: '#33343D !important',\n        ['@media (min-width: 1680px)']: {\n            fontSize: '13px'\n        },\n        ['@media (min-width: 1280px) and (max-height: 650px)']: {\n            fontSize: '10.5px !important'\n        },\n\n        ['@media (min-width: 1920px)']: {\n            fontSize: '16px'\n        }\n    },\n    textFieldRootFocus: {\n        border: 'solid 1px green !important',\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        padding: '1.5vh 1vw !important',\n\n    },\n\n    textFieldInput: {\n        fontSize: '12px !important',\n        fontWeight: 'normal !important'\n    },\n    autoCompleteInput: {\n        padding: '0 !important',\n        fontWeight: 'normal !important',\n        fontSize: '12px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n    autoOptions: {\n        backgroundColor: 'white !important',\n        padding: '1vh 1vw 0 1vw !important',\n        borderRadius: '0px',\n        color: '#646884',\n        fontSize: '12px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n        ['@media (min-width: 1680px)']: {\n            fontSize: '13px'\n        },\n        ['@media (min-width: 1280px) and (max-height: 650px)']: {\n            fontSize: '10.5px !important'\n        },\n\n        ['@media (min-width: 1920px)']: {\n            fontSize: '16px'\n        }\n    },\n    autoClear: {\n        display: 'none'\n    },\n    autoPaper: {\n        boxShadow: '0px 19px 27px 0 rgba(71, 71, 71, 0.09)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '5px'\n    },\n    disabledText: {\n\n        cursor: 'not-allowed'\n    },\n    rowLink: {\n        cursor: 'pointer',\n        //textDecoration: 'underline',\n        fontWeight: '600',\n        width: '12vw',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        cursor: 'pointer',\n        color: '#314059',\n    },\n    overflowHeader: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap'\n    },\n    tabRoot: {\n        padding: '0',\n        minWidth: 'fit-content',\n        fontSize: '12px',\n        marginRight: '2vw'\n    },\n\n    disableEdit: {\n        color: `${theme.palette.lightGray} !important`,\n        cursor: 'not-allowed !important'\n    },\n    tabContainer: {\n        padding: '0 0 ',\n        marginTop: '2vh',\n        marginBottom: '1vh',\n        color: theme.palette.headerGray,\n    },\n    formDiv: {\n        width: 'calc(35% - 16px - 3vw) !important',\n        backgroundColor: theme.palette.white,\n        display: 'flex',\n        flexDirection: 'column',\n        border: '1px solid rgba(0, 0, 0, 0.6)',\n        boxShadow: '0px 0px 10px rgb(0 0 0 / 19%)',\n        borderRadius: '4px',\n        padding: '2vh 1.5vw',\n        margin: '0 8px',\n       // height: 'calc(100% - 60px - 4vh - 16px)',\n        position: 'relative'\n    },\n    formStyle: {\n        backgroundColor: theme.palette.white,\n        padding: '50px 2vw 10px 2vw',\n        borderRight: 'solid 1px rgba(0,0,0, 0.1)',\n        overflow: 'hidden',\n    },\n    tableContainer: {\n        overflow: 'hidden',\n        flex: '1',\n        // margin: '40px 0 0 0',\n        height: '62%',\n        position: 'relative',\n    },\n    table: {\n        borderRadius: '10px'\n    },\n    tableRoot: {\n        //  border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        maxHeight: '94%',\n        borderRadius: '10px',\n        overflowX: 'scroll',\n        borderRadius: '0px'\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.black1,\n        color: `#000000 !important`,\n        borderRight: ' solid 1px rgba(0, 0, 0, 0.1)',\n        maxWidth: '50vw !important'\n    },\n    tableCell: {\n        fontWeight: 'normal !important',\n        fontSize: '12px !important',\n        borderRight: ' solid 1px rgba(0, 0, 0, 0.1)',\n        maxWidth: '50vw !important',\n        padding: '0'\n    },\n    tableCellData: {\n        borderBottom:  'solid 1px rgba(0, 0, 0, 0.1)',\n        //borderRadius: '4px',\n        padding: '4px'\n    },\n    addButton: {\n        color: theme.palette.blue,\n        fontSize: '12px',\n        cursor: 'pointer',\n        textDecoration: 'underline',\n        // display: 'flex',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n    add: {\n        color: theme.palette.blue,\n        fontSize: '12px',\n        cursor: 'pointer',\n        textDecoration: 'underline',\n        display: 'flex',\n        position: 'absolute'\n    },\n    slash: {\n        textDecoration: 'none',\n        margin: '0 0.4vw'\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//fontSize:",
                    "/*Styles",
                    "//textDecoration:",
                    "//",
                    "//",
                    "//",
                    "//borderRadius:",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/uploadStyles.js": {
        "method_details_": [
            {
                "method_name": "uploadStyles",
                "method_begin": "export const uploadStyles = theme => ({",
                "method_end": "})",
                "range": [
                    2,
                    1026
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/uploadStyles.js",
                "returnType": "({\n    reasonTooltip: {\n        padding: '0 1vw !important',\n    },\n    reprocess: {\n        position: 'absolute',\n        top: '0',\n        textAlign: 'center',\n        right:'50%'\n    },\n    tableCellSuper: {\n        padding: '1.5vh 1vw',\n        cursor: 'default',\n        maxWidth: '100vw !important'\n    },\n    menuItemCol: {\n        borderBottom: 'solid 1px lightGray !important'\n    },\n    freeServer: {\n        fontWeight: 'bold',\n        color: theme.palette.green\n    },\n    tableLabel: {\n        minWidth: '100px',\n        fontWeight: 'bold',\n    },\n    tableInfo: {\n        marginBottom: '1vh'\n    },\n    busyServer: {\n        fontWeight: 'bold',\n        color: theme.palette.red\n    },\n    rangeDisplay: {\n        margin: '0 8px',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column'\n    },\n    selectLabel: {\n        color: theme.palette.headerGray,\n        fontSize: '12.5px',\n        marginBottom: '0.8vh',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    reportLink: {\n        color: theme.palette.blue,\n        cursor: 'pointer',\n        marginBottom: '0.8vh',\n        textDecoration: 'underline'\n    },\n    dateRange: {\n        color: '#646884',\n        // backgroundColor: theme.palette.blue,\n        fontSize: '13px',\n        cursor: 'pointer',\n        padding: '0.6vh 1vh',\n        borderRadius: '7px',\n        border: 'solid 1px black',\n        fontWeight: '500',\n        display: 'flex',\n        marginRight: '1VW',\n        fontSize: '11px !important',\n        '@media (min-width: 1280px) and (max-height: 650px)': {\n            fontSize: '10px !important'\n        },\n        '@media (min-width: 1680px)': {\n            fontSize: '12.5px !important'\n        },\n        '@media (min-width: 1920px)': {\n            fontSize: '14.5px !important'\n        },\n    },\n    statTableContainer: {\n        borderBottomRightRadius: '8px',\n        borderBottomLeftRadius: '8px',\n        border: 'solid 1px lightGray',\n        '@media (min-width: 50px) and (max-width: 700px)': {\n            overflowX: 'scroll !important'\n        },\n    },\n    teamName: {\n        padding: '4px 1vw', marginRight: '4px',\n        backgroundColor: 'lightGray',\n        borderRadius: '10px'\n    },\n    teamNameTag: {\n        padding: '4px 1vw', marginRight: '4px',\n        //border: 'solid 1px lightGray',\n        borderRadius: '10px',\n        color: 'white'\n    },\n    docCount: {\n        width: 'fit-content',\n        color: theme.palette.blue,\n    },\n    progressRoot1: {\n        borderRadius: '2.5px',\n        backgroundColor: '#E7E8F2 !important',\n        height: '5px !important'\n    },\n    barColorPrimary: {\n        backgroundColor: 'rgb(51, 203, 116) !important'\n    },\n    email: {\n        backgroundColor: 'lightGray',\n        padding: '4px 1vw',\n        borderRadius: '15px',\n        marginRight: '1vw',\n        marginBottom: '4px'\n    },\n    inQueue: {\n        border: 'solid 1px #F14336 !important',\n        backgroundColor: '#F14336',\n        color: `${theme.palette.white} !important`,\n        borderRadius: '14px',\n        padding: '4px',\n        width: 'fit-content'\n    },\n    batchFilter: {\n        backgroundColor: theme.palette.white,\n        height: 'fit-content',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        padding: '1px 0',\n        marginRight: '4px',\n        color: theme.palette.white,\n        border: '1px solid #8A8886',\n        borderRadius: '6px',\n    },\n    upDialog: {\n        width: '70%',\n        height: '80%'\n    },\n    progressRoot1: {\n        borderRadius: '2.5px',\n        backgroundColor: '#E7E8F2 !important',\n        height: '5px !important'\n    },\n    barColorPrimary: {\n        backgroundColor: 'rgb(51, 203, 116) !important'\n    },\n    requestQuota: {\n        marginLeft: '6px',\n        color: theme.palette.black,\n        fontWeight: '500',\n        textDecoration: 'underline',\n        cursor: 'pointer'\n    },\n    mappingRow: {\n        border: '1px solid rgba(0, 0, 0, 0.2)',\n        display: 'flex',\n        borderBottom: 'none',\n        \"&:last-child\": {\n            borderBottom: '1px solid rgba(0, 0, 0, 0.2) !important',\n        },\n        \"&:first-child\": {\n            marginTop: '1vh'\n        },\n    },\n    mappingKey: {\n        width: '20%',\n        borderRight: '1px solid rgba(0, 0, 0, 0.2)',\n        padding: '1vh 1vw',\n        fontWeight: '500',\n        backgroundColor: '#dee9ff'\n    },\n    mappingValue: {\n        // width: '50%',\n        padding: '1vh'\n    },\n    serverUp: {\n        backgroundColor: '#34ca77',\n        color: theme.palette.white,\n        borderRadius: '15px',\n        padding: '4px 1vw',\n        width: 'fit-content'\n    },\n    serverDown: {\n        backgroundColor: '#f04848',\n        color: theme.palette.white,\n        borderRadius: '15px',\n        padding: '4px 1vw',\n        width: 'fit-content'\n    },\n    batchFilterSelect: {\n        backgroundColor: 'transparent',\n        color: 'rgba(51, 54, 61, 0.8)',\n        fontSize: '11px',\n        paddingLeft: '1vw',\n        fontWeight: 'normal',\n        fontSize: '11px !important',\n        '@media (min-width: 1280px) and (max-height: 650px)': {\n            fontSize: '10px !important'\n        },\n        '@media (min-width: 1680px)': {\n            fontSize: '12.5px !important'\n        },\n        '@media (min-width: 1920px)': {\n            fontSize: '14.5px !important'\n        },\n    },\n    uploadLimit: {\n        color: '#515570',\n        fontWeight: '300',\n        marginBottom: '1vh',\n        marginTop: '1vh'\n    },\n    copyCurlBtn: {\n        position: 'absolute',\n        right: '10px',\n        display: 'flex'\n    },\n    workflowHighlight: {\n        color: '#FDCC43',\n        fontWeight: '500'\n    },\n    trialInput: {\n        maxWidth: '50px',\n        padding: '4px',\n        marginRight: '1vw'\n    },\n    progressRoot: {\n        height: '100%',\n        borderRadius: '10px',\n        backgroundColor: 'white',\n        border: 'solid 1px lightGray',\n    },\n    progressBar: {\n        backgroundColor: '#bdd1f0'\n    },\n    blurredTable: {\n        // filter: 'blur(3px)',\n        pointerEvents: 'none'\n    },\n    helperTooltip: {\n        zIndex: '99999 !important',\n        opacity: '1 !important',\n        backgroundColor: '#157fff !important',\n        boxShadow: '0px 1px 6px rgba(99, 128, 157, 0.4) !important',\n        padding: '1vh 1vw !important',\n        color: 'white !important',\n        fontWeight: '500 !important',\n    },\n    progressText: {\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        margin: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        color: '#515570',\n        fontWeight: '500    '\n    },\n    pageWrapper: {\n        backgroundColor: theme.palette.white,\n        boxShadow: '0px 0px 5px rgba(0, 0, 0, 0.2)',\n        margin: '1.2% 1.5vw',\n        height: '94%',\n        borderRadius: '8px',\n\n    },\n    unlockMsg: {\n        backgroundColor: 'rgba(0,0,0,0.7)',\n        color: 'white',\n        padding: '1vh 1vw',\n        borderRadius: '20px',\n        display: 'flex'\n    },\n    configLabel: {\n        color: '#646884 !important',\n        marginBottom: '2px',\n        marginTop: '3vh'\n    },\n    rejectionMsg: {\n        height: '3vh',\n        padding: '1vh 1vw',\n        border: '1px dashed #F14336',\n        backgroundColor: 'rgba(241, 67, 54, 0.1)',\n        borderRadius: '2.5px',\n        display: 'flex',\n        fontWeight: '400',\n        marginTop: '1%'\n    },\n    pgnDivider: {\n        margin: '0 1vw',\n        color: 'lightGray'\n    },\n    docListingCont: {\n        backgroundColor: theme.palette.white,\n        boxShadow: '0px 0px 5px rgba(0, 0, 0, 0.2)',\n        margin: '1.2% 1.5vw',\n        height: '70%',\n        paddingBottom: '4%',\n        margin: '2% 0',\n        borderRadius: '8px',\n        ['@media (min-width: 1280px) and (max-height: 650px)']: {\n            height: '66%',\n        },\n    },\n    mindocListingCont: {\n        backgroundColor: theme.palette.white,\n        boxShadow: '0px 0px 5px rgba(0, 0, 0, 0.2)',\n        margin: '1.2% 1.5vw',\n        height: 'calc(70% - 5vh)',\n        paddingBottom: '4%',\n        margin: '1% 0',\n        borderRadius: '8px',\n        ['@media (min-width: 1280px) and (max-height: 650px)']: {\n            height: 'calc(66% - 5vh)',\n        },\n    },\n    tableFooterCell: {\n        padding: '0 !important',\n        zIndex: '1'\n    },\n    copyButton: {\n        visibility: 'hidden',\n        marginLeft: '1vw'\n    },\n    copyButton1: {\n        visibility: 'hidden',\n        marginLeft: '1vw'\n    },\n    filterMenu: {\n        zIndex: '10',\n        position: 'absolute',\n        right: '25%',\n        marginTop: '15px',\n        boxShadow: '0px 0px 10px rgba(0, 0, 0, 0.19)',\n        borderRadius: '4px',\n        backgroundColor: 'white'\n    },\n    tableFooter: {\n        borderTop: 'solid 1px rgba(0, 0, 0, 0.05) !important',\n        // borderBottom: 'solid 1px rgba(0, 0, 0, 0.05) !important',\n        padding: '1.2vh 1vw',\n        marginLeft: '-0.8vw',\n        marginRight: '-0.8vw'\n    },\n    draggedColumn: {\n        zIndex: '99'\n    },\n    miniTableHead: {\n        padding: '2vh 1vw'\n    },\n    expandedClass: {\n        boxShadow: 'none !important',\n        backgroundColor: '#edf3ff',\n        \"&:hover\": {\n            boxShadow: 'none !important'\n        },\n    },\n    miniTableRow: {\n\n    },\n    giveFeedback: {\n        color: '#343841',\n        border: '1px solid #2F6EE9',\n        borderRadius: '6px',\n        display: 'flex',\n        fontWeight: '500',\n        cursor: 'pointer',\n        padding: '0 1vw',\n        position: 'relative'\n    },\n    disGiveFeedback: {\n        color: 'lightGray',\n        cursor: 'not-allowed',\n        border: '1px solid lightGray',\n        display: 'none'\n\n    },\n    disReview: {\n        filter: 'contrast(0)',\n        cursor: 'not-allowed',\n    },\n    grayFeedback: {\n        filter: 'contrast(0)',\n        pointerEvents: 'none'\n    },\n    expandedRow: {\n        boxShadow: 'none !important',\n        \"&:hover\": {\n            boxShadow: 'none !important'\n        },\n    },\n    dropdown: {\n        transition: theme.transitions.create([\"transform\"], {\n            duration: theme.transitions.duration.short\n        })\n    },\n    dropdownOpen: {\n        transform: \"rotate(-180deg)\"\n    },\n    dropdownClosed: {\n        transform: \"rotate(0)\"\n    },\n    resultCont: {\n        backgroundColor: theme.palette.blue,\n        color: theme.palette.white,\n        borderRadius: '10px',\n        textAlign: 'left',\n        width: 'fit-content',\n        padding: '1vh 3vw',\n        display: 'flex'\n    },\n    imgPreview: {\n        width: '20%',\n        height: '60%',\n        zIndex: '99999 !important',\n        opacity: '1 !important',\n        backgroundColor: '#EDF3FF !important',\n        boxShadow: '0px 1px 6px rgba(99, 128, 157, 0.4) !important',\n        padding: '1vh 2vw !important',\n        color: '#000000 !important',\n        fontWeight: '500 !important',\n    },\n    previewPageNo: {\n        color: 'rgba(0,0,0,0.7)',\n        backgroundColor: theme.palette.white,\n        padding: '3px 1vw',\n        borderRadius: '6px'\n    },\n    actionBtn: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        marginLeft: '1vw'\n    },\n    processingLoader: {\n        borderRadius: '50%',\n        width: '20px',\n        height: '20px',\n        padding: '2px',\n        backgroundColor: theme.palette.white,\n        border: `1px dashed #4484FF`,\n        color: theme.palette.black1,\n        textAlign: 'center',\n        fontSize: '16px',\n        fontWeight: '500',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textTransform: 'capitalize',\n        cursor: 'pointer',\n        margin: '0 4px 0 1vw',\n    },\n    ocrComplete: {\n        backgroundColor: '#4484FF'\n    },\n    calendarContainer: {\n        marginTop: '30px',\n        position: 'absolute',\n        boxShadow: '0px 0px 10px rgb(0 0 0 / 19%)'\n    },\n    processBtn: {\n        borderRadius: '6px',\n        border: 'solid 1px #e3e3ef',\n        padding: '0.5vh 1vw',\n        color: '#667EBC',\n        fontWeight: '500',\n        cursor: 'pointer',\n        textAlign: 'center'\n    },\n    disProcessBtn: {\n        cursor: 'not-allowed',\n        backgroundColor: 'rgba(211,211,211, 0.4)',\n        color: '#838383',\n        fontWeight: '400',\n        border: 'none !important',\n        pointerEvents: 'none'\n    },\n    sourceCont: {\n        border: '1px dashed #A5C9FF',\n        borderRadius: '4px',\n        padding: '1vw',\n        display: 'flex'\n    },\n    switchRoot: {\n        width: '35px',\n        height: '20px'\n    },\n    switchThumb: {\n        width: '13px !important',\n        height: '13px !important'\n    },\n    instContainer: {\n        color: theme.palette.black,\n        padding: '0 2vw',\n        fontWeight: '500',\n        width: '50%'\n    },\n    apiInst: {\n        margin: '1vh 0',\n        color: '#4d4d4d',\n        fontWeight: '400',\n    },\n    composeEmail: {\n        color: '#33343D'\n    },\n    emailInst: {\n        opacity: '0.5',\n        fontWeight: '400',\n        marginTop: '1vh'\n    },\n    apiData: {\n        backgroundColor: '#3E4F6F',\n        borderRadius: '4px',\n        color: theme.palette.white,\n        fontWeight: '400',\n        padding: '2vh 1vw',\n        width: '50%',\n        lineHeight: '2',\n        position: 'relative',\n\n\n    },\n    uploadButton: {\n        color: theme.palette.blue,\n        backgroundColor: '#f8f8fb',\n        border: `dashed 1px ${theme.palette.blue}`,\n        borderRadius: '6px',\n        fontWeight: '500',\n        padding: '1vh 1vw',\n        cursor: 'pointer',\n        marginLeft: '1vw',\n        fontSize: '12px !important',\n        '@media (min-width: 1440px)': {\n            fontSize: '12px !important'\n        },\n        '@media (min-width: 1280px) and (max-height: 650px)': {\n            fontSize: '10px !important'\n        },\n        '@media (min-width: 1680px)': {\n            fontSize: '13px !important'\n        },\n        '@media (min-width: 1920px)': {\n            fontSize: '14.5px !important'\n        },\n\n    },\n    viewBatchBtn: {\n        border: 'none',\n        backgroundColor: theme.palette.blue,\n        color: theme.palette.white\n    },\n    uploadButton1: {\n        width: 'fit-content',\n        backgroundColor: '#4484FF',\n        color: theme.palette.white,\n        alignSelf: 'center',\n        marginTop: '1vh',\n        fontSize: '12px !important',\n        '@media (min-width: 1440px)': {\n            fontSize: '12px !important'\n        },\n        '@media (min-width: 1280px) and (max-height: 650px)': {\n            fontSize: '10px !important'\n        },\n        '@media (min-width: 1680px)': {\n            fontSize: '13px !important'\n        },\n        '@media (min-width: 1920px)': {\n            fontSize: '14.5px !important'\n        },\n    },\n    mappingCell: {\n        padding: '1.7vh 1vw'\n    },\n    container: {\n        boxShadow: 'none',\n    },\n    table: {\n        tableLayout: 'fixed'\n    },\n    batchesPerPage: {\n        display: 'flex',\n        marginLeft: '4px',\n        cursor: 'pointer'\n    },\n    checkbox: {\n        padding: '0px !important'\n    },\n    pageMenu: {\n        marginTop: '30px !important',\n        padding: '1vh 0'\n    },\n    columnMenu: {\n        minWidth: '15%',\n        marginTop: '40px !important',\n        padding: '1vh 0',\n        width: '15%',\n        right: '0'\n    },\n    uploadedVia: {\n        backgroundColor: '#ecf0f2',\n        color: '#33343D',\n        borderRadius: '4px',\n        padding: '0.5vh 1vw',\n        display: 'flex',\n        width: 'fit-content'\n    },\n    menuBackdrop: {\n        backgroundColor: 'rgba(0,0,0, 0.3)'\n    },\n    docStatus: {\n        color: '#30b283',\n        // borderRadius: '15px',\n        // padding: '2px 1vw',\n        display: 'flex',\n        width: 'fit-content',\n        fontWeight: '500'\n    },\n    menuItem: {\n        fontSize: '11px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n\n    },\n    percentageBar: {\n        border: `none`,\n        backgroundColor: '#E7E8F2',\n        width: '100%',\n        borderRadius: '2.5px',\n        height: '5px'\n\n    },\n    barContainer: {\n        padding: '1vh 0vw',\n        fontSize: '13px',\n        width: '100%',\n        marginBottom: '0vh'\n    },\n    percentageContainer: {\n        fontSize: '13px',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        flexDirection: 'column',\n        marginLeft: '2vw',\n    },\n    percentageCount: {\n        fontSize: '10px',\n        color: theme.palette.headerGray,\n        marginLeft: '8px'\n    },\n    percentageLine: {\n        height: '5px', border: 'none', margin: '0', borderRadius: '2.5px',\n    },\n    cfScore: {\n        marginLeft: '1vw'\n    },\n    hiddenTableRow: {\n        visibility: 'hidden',\n        borderBottom: 'none !important',\n        boxShadow: 'none !important'\n    },\n    pagination: {\n        marginTop: '4vh',\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    batchListCont: {\n        width: 'calc(60% - 6vw)',\n        backgroundColor: theme.palette.white,\n        height: 'calc(100% - 60px)',\n        padding: '30px 3vw',\n        borderLeft: 'solid 1px rgba(0,0,0,0.1)'\n    },\n    filesSelected: {\n        color: theme.palette.black1,\n        fontWeight: '400',\n        display: 'flex',\n        margin: '2vh 0'\n    },\n    actionContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        margin: '1vh  -1.5vw 0 -1.5vw',\n        //boxShadow: '0px -1px 20px #e7e8f2',\n        padding: '1% 2vw 2% 2vw',\n        // position: 'absolute',\n        right: '2vw',\n        bottom: '0'\n\n    },\n    uploadContainer: {\n        borderRadius: '4px',\n        border: '1px dashed #A5C9FF',\n        cursor: 'initial',\n        backgroundColor: theme.palette.white,\n        padding: '5% 0',\n        position: 'relative',\n    },\n    uploadContainerExternal: {\n        borderRadius: '4px',\n        border: '1px dashed #A5C9FF',\n        cursor: 'initial',\n        backgroundColor: theme.palette.white,\n        padding: '2.5% 0',\n        position: 'relative',\n    },\n    miniUploadCont: {\n        padding: '1vh 1vw',\n        display: 'flex',\n        justifyContent: 'flex-start',\n        borderRadius: '4px',\n        border: '1px dashed #A5C9FF',\n        cursor: 'initial',\n        backgroundColor: theme.palette.white,\n        height: '30%',\n        position: 'relative'\n    },\n    tabContainer: {\n        display: 'flex',\n        margin: '0 0 2vh 0',\n        // justifyContent: 'space-between'\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        fontSize: '16px',\n        color: theme.palette.black,\n        fontWeight: '400',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '16px',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '20.5px',\n        },\n        /* '@media (min-width: 50px) and (max-width: 700px)': {\n             flexDirection: 'column'\n         },*/\n\n    },\n    statHeader: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        fontSize: '16px',\n        color: theme.palette.black,\n        fontWeight: '400',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '16px',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '20.5px',\n        },\n        '@media (min-width: 50px) and (max-width: 700px)': {\n            flexDirection: 'column'\n        },\n\n    },\n    headerFlex: {\n        display: 'flex',\n        flexDirection: 'row',\n        '@media (min-width: 50px) and (max-width: 700px)': {\n            flexDirection: 'column',\n            marginBottom: '1vh'\n        },\n    },\n\n    headerCont: {\n        margin: '1.5vh 1vw',\n        display: 'inline-block',\n        width: 'calc(100% - 2vw)',\n\n    },\n    headerContl: {\n        margin: '1.5vh 1vw',\n        display: 'inline-block',\n        width: 'calc(100% - 2vw)',\n        height: '6%'\n    },\n    fileType: {\n        cursor: 'pointer',\n        color: 'rgba(93, 110, 147, 0.5)',\n        marginRight: '1vw',\n        fontSize: '13px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '18px',\n        },\n    },\n    selectedFileType: {\n        color: theme.palette.headerGray,\n        borderBottom: `solid 2px ${theme.palette.black1}`\n    },\n    uploadText: {\n        textAlign: 'center',\n        display: 'flex',\n        fontWeight: '500',\n        color: '#515570',\n        justifyContent: 'center',\n        marginBottom: '1vh',\n    },\n    uploadSubText: {\n        color: '#172B4D',\n        fontWeight: '400'\n    },\n    miniUploadText: {\n        textAlign: 'left',\n        justifyContent: 'flex-start',\n        marginLeft: '2vw !important'\n    },\n    browse: {\n        color: '#3c9dff',\n        textDecoration: 'underline',\n        cursor: 'pointer'\n    },\n    fileTypes: {\n        color: '#666869',\n        textAlign: 'center',\n        fontSize: '13px',\n        margin: '0 0 1vh 0',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '18px',\n        },\n    },\n    fileName: {\n        color: '#7d91a4',\n        display: 'flex',\n        justifyContent: 'space-between',\n        width: '95%',\n        marginLeft: '1vw',\n        marginRight: '1.5vw',\n    },\n    selectConfig: {\n        fontSize: '11.5px',\n        color: theme.palette.headerGray,\n        fontWeight: '500',\n        display: 'flex',\n        position: 'relative',\n        minWidth: '10%'\n    },\n    uploadSource: {\n        color: '#5c5d64',\n        borderRadius: '90px',\n        border: 'solid 1px #dfe0ea',\n        padding: '0.8vh 1vw',\n        marginLeft: '1vw',\n        fontWeight: '500',\n        cursor: 'pointer',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    activeSource: {\n        color: '#33343D',\n        fontWeight: '600',\n        backgroundColor: '#FDCC43',\n        border: 'none'\n    },\n    filesContainer: {\n        width: '50%',\n        color: '#636785',\n        overflowY: 'scroll',\n        height: '65%',\n        padding: '2%',\n        border: 'solid 1px rgba(15, 145, 210,0.4)',\n        borderRadius: '10px'\n    },\n    progressContainer: {\n        width: '100%',\n        color: '#636785',\n        overflowY: 'scroll',\n        height: '65%',\n        paddingRight: '2%',\n        display: 'flex',\n        justifyContent: 'flex-start',\n        flexDirection: 'column'\n    },\n    fileList: {\n        height: '70%',\n    },\n    fileDisplay: {\n        flex: '1',\n        display: 'flex',\n        justifyContent: 'center',\n        marginBottom: '2vh',\n        // backgroundColor: '#f7fafd',\n        borderRadius: '5px',\n        // border: 'solid 1px rgba(0, 0, 0, 0.05)',\n        padding: '5% 0'\n    },\n    file: {\n        fontSize: '12px',\n        width: '100%',\n        overflow: 'hidden',\n        marginBottom: '3vh'\n    },\n    uploadSuccess: {\n        height: '2px',\n        width: 'calc(100% - 2vw)',\n        marginTop: '1vh',\n        backgroundColor: theme.palette.blue,\n        marginLeft: '1vw',\n        borderRadius: '10px'\n    },\n    uploadClose: {\n        height: '2px',\n        width: 'calc(100% - 2vw)',\n        marginTop: '1vh',\n        backgroundColor: 'rgba(0, 0, 0, 0.1)',\n        marginLeft: '1vw',\n        borderRadius: '10px'\n    },\n    dialog: {\n        maxHeight: '70%',\n        width: '40%',\n        overflow: 'hidden'\n    },\n    dialogHeading: {\n        fontSize: '16px',\n        fontWeight: '500',\n        color: theme.palette.headerGray,\n        textAlign: 'center'\n    },\n    dialogSubHeading: {\n        fontSize: '13px',\n        color: theme.palette.slateGray\n    },\n    fileDialogContent: {\n        overflowX: 'hidden'\n    },\n    backdrop: {\n        backdropFilter: 'blur(0px)'\n    },\n    tableHeader: {\n        padding: '2vh 1vw'\n    },\n    tableCell: {\n        padding: '1.5vh 1vw',\n        cursor: 'default'\n    },\n\n    hiddenTableCell: {\n        borderBottom: 'none !important',\n        boxShadow: 'none !important'\n\n    },\n    table: {\n        boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        //border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '4px'\n    },\n    miniTable: {\n        boxShadow: 'none',\n        borderRadius: '10px'\n    },\n    rowLink: {\n        cursor: 'pointer',\n        // textDecoration: 'underline',\n        fontWeight: '500',\n        maxWidth: '12vw',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        cursor: 'pointer',\n        color: '#157fff',\n    },\n    fileLink: {\n        cursor: 'pointer',\n        // textDecoration: 'underline',\n        maxWidth: '12vw',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        cursor: 'pointer',\n    },\n    lockedLink: {\n        fontWeight: '500',\n        maxWidth: '12vw',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        cursor: 'not-allowed',\n        color: 'darkGray',\n    },\n    disRowLink: {\n        color: 'gray'\n    },\n    docName: {\n        display: 'flex',\n        \"&:hover\": {\n            '& $copyButton': {\n                visibility: 'initial'\n            }\n        },\n\n    },\n\n    parentName: {\n        display: 'flex',\n        \"&:hover\": {\n            '& $copyButton1': {\n                visibility: 'initial'\n            }\n        },\n\n    },\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//border:",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//boxShadow:",
                    "//",
                    "//",
                    "/*",
                    "//",
                    "//",
                    "//border:",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "apiStyles",
                "method_begin": "export const apiStyles = theme => ({",
                "method_end": "})",
                "range": [
                    1029,
                    1108
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/uploadStyles.js",
                "returnType": "({\n    container: {\n        border: '1px solid #D1D1D1',\n        borderRadius: '6px',\n        padding: '2vh 0 3vh 0',\n        maxWidth: '500%',\n        position: 'absolute',\n        top: '100%',\n        marginTop: '1vh',\n        right: '0',\n        zIndex: '100',\n        backgroundColor: theme.palette.white,\n        minWidth: '300%'\n    },\n    thresholdInput: {\n        padding: '0',\n        border: '0',\n        outline: '0',\n        width: '90%'\n    },\n    dateFilterCont: {\n        border: '1px solid #D1D1D1',\n        borderRadius: '6px',\n        padding: '2vh 0 3vh 0',\n        maxWidth: '500%',\n        position: 'absolute',\n        top: '100%',\n        marginTop: '1vh',\n        left: '0',\n        zIndex: '100',\n        backgroundColor: theme.palette.white,\n        minWidth: '225%'\n    },\n    dayList: {\n        color: '#878998',\n        // border: 'solid 1px rgba(135, 137, 152,0.6)',\n        borderRadius: '20px',\n        fontWeight: '400',\n        margin: '-9px 0',\n        cursor: 'pointer',\n        padding: '5px 0',\n        width: '48%',\n        marginBottom: '2vh',\n        \"&:hover\": {\n            color: '#4484FF',\n        },\n    },\n    uploadDate: {\n        padding: '8px 0'\n    },\n    highlightRange: {\n        color: '#4484FF',\n        fontWeight: '500'\n    },\n    header: {\n        fontWeight: '400',\n        //   borderBottom: '1px solid #D1D1D1',\n        padding: '0 2vh 0 2vh'\n    },\n    formContainer: {\n        padding: '0 2vh'\n    },\n    dateEntry: {\n        color: 'rgba(117, 125, 138,0.7)',\n        fontWeight: '500',\n        width: '48%',\n\n        \"&:last-child\": {\n            marginRight: '0',\n        },\n    },\n    dateInput: {\n        borderRadius: '2px',\n        border: '1px solid rgba(138, 136, 134, 0.6)',\n        padding: '1vh 1vh',\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginTop: '0.5vh'\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/workflowStyles.js": {
        "method_details_": [
            {
                "method_name": "workflowStyles",
                "method_begin": "export const workflowStyles = theme => ({",
                "method_end": "})",
                "range": [
                    2,
                    188
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/workflowStyles.js",
                "returnType": "({\n    pageContainer: {\n        width: '100%',\n        position: 'relative',\n        height: '87%',\n        margin: '1.2% 1.5vw',\n        height: '94%',\n        backgroundColor: theme.palette.white,\n    },\n    deletableTag:{\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '16px !important',\n        },\n    },\n    headerCont: {\n        //  boxShadow: '0px 1px 0px rgba(0, 0, 0, 0.25)',\n        padding: '15px 2vw 15px 2vw',\n        display: 'flex'\n        //  backgroundColor: '#F7FAFC'\n    },\n    disabledComponentCont: {\n        pointerEvents: 'none',\n        backgroundColor: '#dfe1e3'\n    },\n    textFieldRoot: {\n        border: 'none',\n        fontSize: '13px !important',\n        fontWeight: '500 !important',\n        padding: '1vh 1vw !important',\n        border: '1px solid #8A8886',\n        color: '#33343D !important'\n    },\n    teamIpRoot:{\n        border: 'none',\n        fontSize: '13px !important',\n        fontWeight: '500 !important',\n        padding: '1.5vh 1vw !important',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        color: '#33343D !important'\n    },\n    textFieldRootFocus: {\n        border: 'solid 1px green !important',\n        fontSize: '13px !important',\n        padding: '1.5vh 1vw !important'\n    },\n    autoRoot: {\n        width: '100% !important'\n    },\n    autoChip: {\n        height: 'auto',\n        backgroundColor: 'lightGray',\n        color: 'black !important',\n        fontSize: '13px',\n        marginRight: '4px',\n        fontWeight: '400',\n        padding: '0 5px',\n        borderRadius: '4px',\n        '@media (min-width: 1680px)': {\n            fontSize: '13px'\n        },\n        '@media (min-width: 1920px)': {\n            fontSize: '16px'\n        },\n\n    },\n    textFieldInput: {\n        fontSize: '12px !important',\n        fontWeight: '500 !important',\n    },\n    autoCompleteInput: {\n        padding: '0 !important',\n        color: '#646884',\n//textTransform: 'capitalize',\n      //  height: '37px !important'\n    },\n    fautoCompleteInput: {\n        padding: '0 !important',\n        color: '#646884',\n        wordBreak: 'break-all !important',\n        overflow: 'hidden !important',\n        textOverflow: 'ellipsis !important',\n        paddingRight: '1vw !important'\n\n    },\n    autoPopper: {\n        boxShadow: '0px 0px 10px rgba(0, 0, 0, 0.19)',\n    },\n    autoOptions: {\n        minHeight: 'fit-content',\n        backgroundColor: 'white !important',\n        padding: '1vh 1vw 0 1vw !important',\n      // textTransform: 'capitalize',\n        borderRadius: '0px',\n        color: '#646884',\n        fontSize: '12px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n    autoClear: {\n        display: 'none'\n    },\n    selectLabel: {\n        color: '#4F566B',\n        marginBottom: '0.8vh',\n        fontWeight: '500',\n    },\n    autoPaper: {\n        boxShadow: '0px 19px 27px 0 rgba(71, 71, 71, 0.09)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '5px'\n    },\n    actionFooter: {\n        position: 'absolute',\n        bottom: '0',\n        boxShadow: '0px -1px 20px rgba(0, 0, 0, 0.07)',\n        padding: '3vh 1vw',\n        background: theme.palette.white,\n        display: 'flex',\n        justifyContent: 'flex-end',\n        width: 'calc(100% - 2vw)'\n    },\n    greyHeading: {\n        color: '#6B778C',\n        marginRight: '10px'\n    },\n    numberCircle: {\n        borderRadius: '50%',\n        width: '12px',\n        height: '12px',\n        padding: '4px',\n        backgroundColor: theme.palette.black,\n        color: theme.palette.white,\n        textAlign: 'center',\n        fontSize: '10px',\n        fontWeight: '500',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textTransform: 'capitalize',\n        cursor: 'pointer',\n        margin: '0 1vw 0 1vw'\n    },\n    ribbonContent: {\n        position: 'absolute',\n        zIndex: '1',\n        width: '500px',\n        left: '0',\n        display: 'flex',\n        height: '60px',\n        textAlign: 'left'\n    },\n    headerDesc: {\n        opacity: '0.8'\n    },\n    componentCont: {\n        display: 'flex',\n        padding: '2vh 2vw',\n        height: 'calc(100% - 4vh - 15px - 1vh - 50px - 75px - 6vh)'\n    },\n    ipSourceCont: {\n        width: '29%'\n    },\n    opSource: {\n        display: 'flex',\n        color: 'rgba(0, 0, 0, 0.8)',\n        marginRight: '1vw',\n        border: '1px solid #8A8886',\n        borderRadius: '2px',\n        padding: '2vh 1vw',\n        width: '24%',\n        height: 'fit-content'\n    },\n    checkbox: {\n        marginRight: '4px'\n    }\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//textTransform:",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "logicStyles",
                "method_begin": "export const logicStyles = theme => ({",
                "method_end": "})",
                "range": [
                    192,
                    313
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/workflowStyles.js",
                "returnType": "({\n    logicContainer: {\n        height: '100%',\n        width: '100%',\n        position: 'relative'\n    },\n    emptyComponent: {\n        width: '13%',\n        alignSelf: 'center'\n    },\n    dragText: {\n        color: 'rgba(23, 43, 77, 0.7)',\n        fontWeight: '400',\n        marginTop: '-10px',\n        textAlign: 'center'\n    },\n    variableDButton: {\n        position: 'absolute',\n        verticalAlign: 'top',\n        transform: 'rotate(270deg)',\n        backgroundColor: theme.palette.black,\n        color: theme.palette.white,\n        cursor: 'pointer',\n        transformOrigin: 'bottom right',\n        top: '33%',\n        right: '-2vw',\n        borderRadius: '4px',\n        padding: '1vh 1vw'\n    },\n    component: {\n        display: 'flex',\n        marginRight: '1vw',\n        border: '1px dashed rgba(0, 0, 0, 0.7)',\n        padding: '6px 8px',\n        borderRadius: '4px',\n        cursor: 'grab',\n        \"&:hover\": {\n            backgroundColor: \"#F9EDBF\",\n        },\n    },\n    componentDisabled: {\n        cursor: 'not-allowed',\n        backgroundColor: \"#e8e8e8\",\n        \"&:hover\": {\n            backgroundColor: \"#e8e8e8\",\n\n        },\n    },\n    componentContainer: {\n        width: '100%',\n        border: '1px solid #B7B8B9',\n        margin: '1.5vh 0 0 0',\n        height: 'calc(100% - 1.5vh)',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    innerContainer: {\n        height: 'calc(100% - 14px - 20px)',\n        display: 'flex'\n    },\n    variableContainer: {\n        width: '39%',\n        margin: '1.5vh 0 0 0',\n        height: 'calc(100% - 1.5vh)',\n        border: '1px solid #B7B8B9'\n    },\n    docContainer: {\n        boxShadow: '0px 1px 0px rgba(0, 0, 0, 0.15)',\n        backgroundColor: '#F7FAFC',\n        padding: '8px 8px 0 8px',\n        display: 'flex',\n        color: 'rgba(0, 0, 0, 0.7)',\n        fontWeight: '500',\n        maxHeight: '20%',\n    },\n    selectedDocs: {\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 'fit-content',\n        justifyContent: 'center',\n        marginBottom: '8px',\n    },\n    doc: {\n        color: '#42526E',\n        backgroundColor: 'rgba(9, 30, 66, 0.08)',\n        padding: '4px 8px',\n        borderRadius: '10px',\n        marginLeft: '1vw',\n        marginBottom: '8px',\n        fontWeight: 'normal'\n    },\n    docList: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        overflowY: 'scroll'\n    },\n    componentList: {\n        flex: '1',\n        overflowY: 'scroll'\n    },\n    disComponentList: {\n        filter: 'blur(1px)',\n        background: 'rgba(0,0,0,0.5)',\n        flex: '1',\n        overflowY: 'scroll',\n    },\n    unlockCont: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        top: '45%',\n        width: '100%',\n        zIndex: '1'\n    },\n    unlockMsg: {\n        backgroundColor: 'rgba(0,0,0,0.7)',\n        color: 'white',\n        padding: '2vh 2vw',\n        borderRadius: '20px',\n        display: 'flex'\n    },\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "matchStyles",
                "method_begin": "export const matchStyles = theme => ({",
                "method_end": "})",
                "range": [
                    318,
                    375
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/workflowStyles.js",
                "returnType": "({\n    matchContainer: {\n        border: '1px dashed #A5C9FF',\n        borderRadius: '4px',\n        fontWeight: '500',\n        width: 'calc(100% - 2vw)',\n        margin: '1.5vh 1vw',\n        position: 'relative'\n    },\n    matchHeader: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: '1vh 6px 6px 6px',\n        borderBottom: '1px dashed #A5C9FF',\n    },\n    matchNumber: {\n        borderRadius: '50%',\n        width: '10px',\n        height: '10px',\n        padding: '4px',\n        backgroundColor: 'rgba(9, 30, 66, 0.08)',\n        color: theme.palette.black,\n        textAlign: 'center',\n        fontSize: '9px',\n        fontWeight: '500',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textTransform: 'capitalize',\n        cursor: 'pointer',\n        margin: '0 6px 0 0'\n    },\n    formContainer: {\n        margin: '1vh 1vw'\n    },\n    validationRow: {\n        marginBottom: '1vh',\n        display: 'flex'\n    },\n    remove: {\n        marginLeft: '1vw',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n        marginBottom: '1.5vh'\n    },\n    addValidation: {\n        color: theme.palette.blue,\n        cursor: 'pointer',\n        margin: '1vh 1vw',\n        display: 'flex'\n    },\n    saveAs: {\n        display: 'flex',\n        margin: '0 1vw 2vh 1vw',\n        width: '50%'\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "variableStyles",
                "method_begin": "export const variableStyles = theme => ({",
                "method_end": "})",
                "range": [
                    380,
                    485
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Styles/workflowStyles.js",
                "returnType": "({\n    vDrawer: {\n        width: '40%'\n    },\n    mDrawer: {\n        width: '34%',\n        padding: '0 3%',\n    },\n    vTypes: {\n        display: 'flex',\n        flexDirection: 'row',\n        padding: '1vh 1vw',\n        borderBottom: '1px solid #DDDDDD',\n        width: '100%'\n    },\n    vRadio: {\n        fontWeight: '400',\n    },\n    helpSection: {\n        textAlign: 'justify',\n        paddingRight: '1vw',\n        overflowY: 'scroll',\n        height: '68%',\n        ['@media (max-height: 650px)']: {\n            height: '60%'\n        },\n    },\n    batchHelpSection: {\n        overflowY: 'scroll',\n        height: '80%',\n        ['@media (max-height: 650px)']: {\n            height: '73%'\n        },\n        marginBottom: '2%'\n    },\n    step: {\n        color: theme.palette.blue\n    },\n    closeBtn: {\n        position: 'absolute',\n        top: '2%',\n        left: '2%',\n        cursor: 'pointer'\n    },\n    hint: {\n        color: theme.palette.blue\n    },\n    headingContainer: {\n        margin: '5vh 2vw 0vh 2vw',\n        width: '88%',\n        textAlign: 'center',\n    },\n    vHeader: {\n        boxShadow: '0px 1px 0px rgba(0, 0, 0, 0.15)',\n        backgroundColor: '#F7FAFC',\n        padding: '2vh 1vw',\n        display: 'flex',\n        color: 'rgba(0, 0, 0, 0.7)',\n        fontWeight: '500',\n        maxHeight: '20%',\n    },\n    variableAccContainer: {\n        margin: '1.5vh 1vw'\n    },\n    variableAccordion: {\n        border: '1px solid #B7B8B9',\n        marginBottom: '1.5vh',\n        boxShadow: 'none !important',\n        borderRadius: '0px !important'\n    },\n    vAccSummary: {\n        color: '#3C4257',\n        \"&$content\": {\n            margin: '0 !important'\n        }\n    },\n    vAccSummaryRoot: {\n        padding: '0 1vw',\n        borderRadius: '0px !important'\n    },\n    vAccSummaryExpanded: {\n        borderBottom: '1px solid #B7B8B9',\n        color: '#3C4257',\n        padding: '0',\n        margin: '12px 0 !important',\n        borderBottom: '0',\n        minHeight: '0px !important'\n    },\n    vAccIconExpanded: {\n        padding: '0 !important'\n    },\n    variable: {\n        fontWeight: '400',\n        color: '#42526E',\n        backgroundColor: '#ECEDF0',\n        padding: '4px 8px',\n        display: 'flex',\n        marginRight: '1vw',\n        marginBottom: '1vh',\n        borderRadius: '10px'\n    },\n    checkbox: {\n        padding: '0 !important',\n        marginRight: '8px'\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CheckboxIcon.js": {
        "method_details_": [
            {
                "method_name": "CheckboxIcon",
                "method_begin": "const CheckboxIcon = (props) => {",
                "method_end": "}",
                "range": [
                    6,
                    11
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CheckboxIcon.js",
                "returnType": "(\n        <SvgIcon src={disabled && checked ? Images.disabledCheck : (checked ? Images.check : (disabled ? Images.disabledUncheck: Images.uncheck))} />\n    )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/ColumnConfig.js": {
        "method_details_": [
            {
                "method_name": "onChange",
                "method_begin": "const onChange = (e, index, selected) => {",
                "method_end": "}",
                "range": [
                    39,
                    43
                ],
                "parameters": [
                    "e",
                    "index",
                    "selected"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/ColumnConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMenu",
                "method_begin": "const openMenu = (val) => {",
                "method_end": "}",
                "range": [
                    45,
                    47
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/ColumnConfig.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomDialog.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    20,
                    27
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickForceSubmit",
                "method_begin": "const onClickForceSubmit = () => {",
                "method_end": "}",
                "range": [
                    29,
                    41
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelForceSubmit",
                "method_begin": "const cancelForceSubmit = () => {",
                "method_end": "}",
                "range": [
                    43,
                    47
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomSnackBar.js": {
        "method_details_": [
            {
                "method_name": "Alert",
                "method_begin": "function Alert(props)",
                "method_end": "return <MuiAlert elevation={6} variant=\"filled\" {...props} />;",
                "range": [
                    9,
                    13
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomSnackBar.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>;"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCloseSnackBar",
                "method_begin": "const handleCloseSnackBar = () => {",
                "method_end": "}",
                "range": [
                    27,
                    29
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomSnackBar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeSnackBar",
                "method_begin": "const closeSnackBar = () => {",
                "method_end": "}",
                "range": [
                    32,
                    48
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomSnackBar.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload/page/1",
                    "/home/document-api/page/1/completed",
                    "/home/api/batch/page/1",
                    "/home/admin-panel/manageUsers/trial/1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderMessage",
                "method_begin": "const renderMessage = () => {",
                "method_end": "}",
                "range": [
                    52,
                    81
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomSnackBar.js",
                "returnType": "(\n                    <div className='rowFlex'>Upload successful! You can view these files under&nbsp;\n                        <div style={{ textDecoration: 'underline', cursor: 'pointer', fontWeight: '500' }} onClick={closeSnackBar}>Bulk Uploads</div>.\n                    </div>\n                ) | (\n                    <div className='rowFlex'>Review completed! You can view these files under&nbsp;\n                        <div style={{ textDecoration: 'underline', cursor: 'pointer', fontWeight: '500' }} onClick={closeSnackBar}>Review Completed</div>.\n                    </div>\n                ) | (\n                    <div className='rowFlex'>Success! You can now view your Batch in&nbsp;\n                        <div style={{ textDecoration: 'underline', cursor: 'pointer', fontWeight: '500' }} onClick={closeSnackBar}>Training Batches</div>.\n                    </div>\n                ) | (\n                    <div className='rowFlex'>Approved! You can now view this user in &nbsp;\n                        <div style={{ textDecoration: 'underline', cursor: 'pointer', fontWeight: '500' }} onClick={closeSnackBar}>Trial Users</div>.\n                    </div>\n                ) | message",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>.",
                    "/div>",
                    "/div>.",
                    "/div>",
                    "/div>.",
                    "/div>",
                    "/div>.",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomSwitch.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomizeColumns.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ")",
                "range": [
                    22,
                    29
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomizeColumns.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/MenuItem>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSortItems",
                "method_begin": "const onSortItems = (items) => {",
                "method_end": "}",
                "range": [
                    43,
                    45
                ],
                "parameters": [
                    "items"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomizeColumns.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSwitchChange",
                "method_begin": "const onSwitchChange = (e, index, selected) => {",
                "method_end": "}",
                "range": [
                    47,
                    52
                ],
                "parameters": [
                    "e",
                    "index",
                    "selected"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomizeColumns.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onClickCancel",
                "method_begin": "const onClickCancel = () => {",
                "method_end": "}",
                "range": [
                    54,
                    57
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomizeColumns.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onSave",
                "method_begin": "const onSave = () => {",
                "method_end": "}",
                "range": [
                    59,
                    62
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/CustomizeColumns.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/DocStatus.js": {
        "method_details_": [
            {
                "method_name": "putOnHold",
                "method_begin": "const putOnHold = (value) => {",
                "method_end": "}",
                "range": [
                    24,
                    28
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/DocStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancel",
                "method_begin": "const cancel = () => {",
                "method_end": "}",
                "range": [
                    30,
                    32
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/DocStatus.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/DownloadDialog.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    17,
                    22
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/DownloadDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDetails",
                "method_begin": "const getDetails = (data, index, type) => {",
                "method_end": "}",
                "range": [
                    30,
                    43
                ],
                "parameters": [
                    "data",
                    "index",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/DownloadDialog.js",
                "returnType": "returnName",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderFiles",
                "method_begin": "const renderFiles = () => {",
                "method_end": "}",
                "range": [
                    45,
                    57
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/DownloadDialog.js",
                "returnType": "(\n            <ol >\n                {\n                    extractedDocs.map((row, index) => (\n                        <li key={'dow' + index} onClick={() => trainingStore.downloadInvoice(row._id, data.fileOriginalName, batchId)} className={`sFont`}>\n                            <div className={classes.downloadLink}>{getDetails(data, index) + '.pdf'}</div>\n                        </li>\n                    ))\n                }\n            </ol>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/li>",
                    "/ol>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/Error.js": {
        "method_details_": [
            {
                "method_name": "goToHome",
                "method_begin": "const goToHome = () => {",
                "method_end": "}",
                "range": [
                    12,
                    16
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/Error.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/1/all"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/ErrorMessage.js": {
        "method_details_": [
            {
                "method_name": "ErrorMessage",
                "method_begin": "export default function ErrorMessage(props)",
                "method_end": ");",
                "range": [
                    3,
                    19
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/ErrorMessage.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/div>",
                    "/div>",
                    "/></div>}",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/HoldDialog.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    21,
                    27
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/HoldDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/Images.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/Loader.js": {
        "method_details_": [
            {
                "method_name": "Loader",
                "method_begin": "export default function Loader(props)",
                "method_end": ");",
                "range": [
                    4,
                    16
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/Loader.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span>",
                    "/div>",
                    "/span>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/NoNotifications.js": {
        "method_details_": [
            {
                "method_name": "NoNotifications",
                "method_begin": "export default function NoNotifications(props)",
                "method_end": ");",
                "range": [
                    6,
                    19
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/NoNotifications.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/NoResults.js": {
        "method_details_": [
            {
                "method_name": "goToDocs",
                "method_begin": "const goToDocs = (type) => {",
                "method_end": "}",
                "range": [
                    24,
                    55
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/NoResults.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/document-api/page/1/review",
                    "/home/document-api/page/1/completed",
                    "/home/document-api/page/1/creview"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToUploads",
                "method_begin": "const goToUploads = () => {",
                "method_end": "}",
                "range": [
                    57,
                    62
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/NoResults.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/1/all"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/PageNotFound.js": {
        "method_details_": [
            {
                "method_name": "PageNotFound",
                "method_begin": "export default function PageNotFound(props)",
                "method_end": ");",
                "range": [
                    4,
                    10
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/PageNotFound.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/RowsPerPage.js": {
        "method_details_": [
            {
                "method_name": "onClickItem",
                "method_begin": "const onClickItem = (value) => {",
                "method_end": "}",
                "range": [
                    14,
                    17
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/RowsPerPage.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/SelectConfigDialog.js": {
        "method_details_": [
            {
                "method_name": "onClickOk",
                "method_begin": "const onClickOk = () => {",
                "method_end": "}",
                "range": [
                    21,
                    23
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/SelectConfigDialog.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/SvgIcon.js": {
        "method_details_": [
            {
                "method_name": "SvgIcon",
                "method_begin": "export default function SvgIcon(props)",
                "method_end": ");",
                "range": [
                    3,
                    13
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/SvgIcon.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/ReactTooltip>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TableSkeleton.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    39,
                    54
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TableSkeleton.js",
                "returnType": "(\n            <TableHead  >\n                {\n                    headers.map((row, index) => (\n                        !row.selected ? null :\n                            <TableCell key={'tableHead' + index} style={{ width: equalWidth ? equalWidth : row.width, padding: '2vh 1vw' }} align=\"left\" >\n                                <Skeleton variant=\"rect\"  ><div>{row.label}</div></Skeleton>\n                            </TableCell>\n                    ))\n                }\n                <TableCell align=\"left\" style={{ width: '5%' }}>\n                </TableCell>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div></Skeleton>",
                    "/TableCell>",
                    "/TableCell>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    56,
                    62
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TableSkeleton.js",
                "returnType": "(\n            <div className='sFont rowFlex'>\n                <div className='colFlex flexCenter'><Skeleton variant=\"rect\" width={100} height={13} /></div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header) => {",
                "method_end": "}",
                "range": [
                    64,
                    87
                ],
                "parameters": [
                    "row",
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TableSkeleton.js",
                "returnType": "(<Skeleton variant='rect'><div>{Moment(new Date()).format('DD MMM YY, h:mm a')}</div></Skeleton>) | (\n                    <Skeleton variant='rect'>\n                        <div className={classes.uploadedVia}>\n                            <div><SvgIcon src={Images.uploadIcon} /></div>&nbsp;\n                            <div className='xsFont'>Uploaded</div>\n                            {/*<div>{uploadSources[`${row.uploadedVia}`].type}</div>*/}\n                        </div>\n                    </Skeleton>\n                ) | <Skeleton variant='rect'><div className={classes.processBtn}>Process</div></Skeleton> | <Skeleton variant='rect'><div className={classes.rowLink} >{'BATCH_82482'}</div></Skeleton> | <Skeleton variant='rect'><div className={classes.rowLink} >{'BATCH_82482'}</div></Skeleton> | (<Skeleton variant='rect'></Skeleton>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div></Skeleton>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "/Skeleton>",
                    "/div></Skeleton>",
                    "/div></Skeleton>",
                    "/div></Skeleton>",
                    "/Skeleton>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderUploadButton",
                "method_begin": "const renderUploadButton = () => {",
                "method_end": "}",
                "range": [
                    89,
                    100
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TableSkeleton.js",
                "returnType": "(\n            <Skeleton variant='rect'>\n                <div className='colFlex flexCenter'>\n                    <div className={`rowFlex ${classes.uploadButton}`} >\n                        <SvgIcon src={Images.upload} />&nbsp;&nbsp;\n                        <div className='colFlex flexCenter'>Upload Documents</div>\n                    </div>\n                </div>\n            </Skeleton>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/Skeleton>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TableSkeleton1.js": {
        "method_details_": [
            {
                "method_name": "renderTableHead",
                "method_begin": "const renderTableHead = () => {",
                "method_end": "}",
                "range": [
                    39,
                    54
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TableSkeleton1.js",
                "returnType": "(\n            <TableHead  >\n                {\n                    headers.map((row, index) => (\n                        !row.selected ? null :\n                            <TableCell key={'tableHead' + index} style={{ width: equalWidth ? equalWidth : row.width, padding: '2vh 1vw' }} align=\"left\" >\n                                <Skeleton variant=\"rect\"  ><div>{row.label}</div></Skeleton>\n                            </TableCell>\n                    ))\n                }\n                <TableCell align=\"left\" style={{ width: '5%' }}>\n                </TableCell>\n            </TableHead>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div></Skeleton>",
                    "/TableCell>",
                    "/TableCell>",
                    "/TableHead>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderPagination",
                "method_begin": "const renderPagination = () => {",
                "method_end": "}",
                "range": [
                    56,
                    62
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TableSkeleton1.js",
                "returnType": "(\n            <div className='sFont rowFlex'>\n                <div className='colFlex flexCenter'><Skeleton variant=\"rect\" width={100} height={13} /></div>\n            </div>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/></div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderTableData",
                "method_begin": "const renderTableData = (row, header) => {",
                "method_end": "}",
                "range": [
                    64,
                    87
                ],
                "parameters": [
                    "row",
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TableSkeleton1.js",
                "returnType": "(<Skeleton variant='rect'><div>{Moment(new Date()).format('DD MMM YY, h:mm a')}</div></Skeleton>) | (\n                    <Skeleton variant='rect'>\n                        <div className={classes.uploadedVia}>\n                            <div><SvgIcon src={Images.uploadIcon} /></div>&nbsp;\n                            <div className='xsFont'>Uploaded</div>\n                            {/*<div>{uploadSources[`${row.uploadedVia}`].type}</div>*/}\n                        </div>\n                    </Skeleton>\n                ) | <Skeleton variant='rect'><div className={classes.processBtn}>Process</div></Skeleton> | <Skeleton variant='rect'><div className={classes.rowLink} >{'BATCH_82482'}</div></Skeleton> | <Skeleton variant='rect'><div className={classes.rowLink} >{'BATCH_82482'}</div></Skeleton> | (<Skeleton variant='rect'></Skeleton>)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div></Skeleton>",
                    "/></div>&nbsp;",
                    "/div>",
                    "/*<div>{uploadSources[",
                    "/div>*/}",
                    "/div>",
                    "/Skeleton>",
                    "/div></Skeleton>",
                    "/div></Skeleton>",
                    "/div></Skeleton>",
                    "/Skeleton>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "renderUploadButton",
                "method_begin": "const renderUploadButton = () => {",
                "method_end": "}",
                "range": [
                    89,
                    100
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TableSkeleton1.js",
                "returnType": "(\n            <Skeleton variant='rect'>\n                <div className='colFlex flexCenter'>\n                    <div className={`rowFlex ${classes.uploadButton}`} >\n                        <SvgIcon src={Images.upload} />&nbsp;&nbsp;\n                        <div className='colFlex flexCenter'>Upload Documents</div>\n                    </div>\n                </div>\n            </Skeleton>\n        )",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>&nbsp;&nbsp;",
                    "/div>",
                    "/div>",
                    "/div>",
                    "/Skeleton>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TimeElapsed.js": {
        "method_details_": [
            {
                "method_name": "TimeElapsed",
                "method_begin": "export default function TimeElapsed({offsetTimestamp })",
                "method_end": ");",
                "range": [
                    2,
                    18
                ],
                "parameters": [
                    "{offsetTimestamp }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/TimeElapsed.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/span>:<span>{minutes.toString(",
                    "/span>:<span>{seconds.toString(",
                    "/span>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/ActionButton.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    13,
                    22
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/ActionButton.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/InputTextBox.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    11,
                    30
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/InputTextBox.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SelectBox.js": {
        "method_details_": [
            {
                "method_name": "CustomSvgIcon",
                "method_begin": "function CustomSvgIcon(props)",
                "method_end": ");",
                "range": [
                    14,
                    20
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SelectBox.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    37,
                    83
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SelectBox.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>}",
                    "/div>",
                    "/MenuItem>",
                    "/div>",
                    "/MenuItem>",
                    "/Select>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SelectField.js": {
        "method_details_": [
            {
                "method_name": "CustomSvgIcon",
                "method_begin": "function CustomSvgIcon(props)",
                "method_end": ");",
                "range": [
                    14,
                    20
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SelectField.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    91,
                    138
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SelectField.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>}",
                    "/div>",
                    "/div>",
                    "/MenuItem>",
                    "/Select>",
                    "/>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SimpleButton.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    15,
                    27
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SimpleButton.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/Button>",
                    "/ReactTooltip>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SimpleSelect.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    13,
                    41
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SimpleSelect.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/TextField>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SimpleTextBox.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    47,
                    89
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SimpleTextBox.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SimpleTooltip.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    12,
                    22
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/SimpleTooltip.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/Tooltip>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/TextBox.js": {
        "method_details_": [
            {
                "method_name": "render",
                "method_begin": "render()",
                "method_end": ");",
                "range": [
                    47,
                    89
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/TextBox.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>}",
                    "/>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/componentStyles.js": {
        "method_details_": [
            {
                "method_name": "buttonStyles",
                "method_begin": "export const buttonStyles = theme => ({",
                "method_end": "})",
                "range": [
                    1,
                    70
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/componentStyles.js",
                "returnType": "({\n    delete: {\n        backgroundColor: `${theme.palette.darkRed} !important`\n    },\n    button: {\n        display: 'flex',\n        color: theme.palette.white,\n        fontWeight: '500',\n        borderRadius: '5px',\n        backgroundColor: '#4484FF',\n        padding: '0 1vw',\n        marginLeft: '1vw',\n        cursor: 'pointer',\n        '&:hover': {\n            backgroundColor: '#4484FF',\n        },\n        padding: '4px 1vw',\n        maxHeight: '40px',\n    },\n    smallButton: {\n        padding: '3px 1vw !important'\n    },\n    tranparentBtn: {\n        color: theme.palette.black1,\n        backgroundColor: theme.palette.white,\n        boxShadow: '0px 1px 4px 0 rgba(92, 101, 132, 0.18)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        '&:hover': {\n            backgroundColor: theme.palette.white,\n        },\n    },\n    noBorder: {\n        border: 'none !important',\n        boxShadow: 'none !important',\n        backgroundColor: 'transparent !important',\n        color: theme.palette.black1\n    },\n    loginButton: {\n        padding: '1vh 1.5vw !important',\n        fontSize: '12.5px',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '14px !important',\n            padding: '1.5vh 2vw !important',\n        },\n        [theme.breakpoints.up('md')]: {\n            fontSize: '14px !important',\n            padding: '1.5vh 2vw !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '19px !important',\n            padding: '30px 2vw !important',\n        },\n    },\n    disabled: {\n        color: `${theme.palette.white} !important`,\n        cursor: 'not-allowed !important',\n        backgroundColor: `${theme.palette.warmGray} !important`,\n        pointerEvents: 'initial !important',\n        '&:hover': {\n            backgroundColor: `${theme.palette.warmGray} !important`\n        }\n    },\n    cancelButton: {\n        backgroundColor: 'transparent',\n        color: theme.palette.black,\n        '&:hover': {\n            backgroundColor: 'transparent',\n        }\n    },\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "selectStyles",
                "method_begin": "export const selectStyles = theme => ({",
                "method_end": "})",
                "range": [
                    72,
                    230
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/componentStyles.js",
                "returnType": "({\n    disabled: {\n        cursor: 'not-allowed !important'\n    },\n    formControl: {\n        marginBottom: '1vh',\n        border: `solid 1px ${theme.palette.lightGray2}`,\n        borderRadius: '3px',\n        width: '100%',\n        height: '6.9vh',\n        marginTop: '1vh'\n    },\n    label: {\n        transform: 'translate(9px, 2px) scale(0.75) !important',\n        color: theme.palette.warmGray2,\n        fontSize: '14px',\n        paddingTop: '4px',\n        '&:focus': {\n            color: theme.palette.warmGray2\n        }\n    },\n    select: {\n        paddingLeft: '8px',\n        '&:focus': {\n            backgroundColor: 'transparent',\n        },\n        borderRadius: '3px'\n    },\n    expandIcon: {\n        color: theme.palette.silver,\n        marginRight: '1vw'\n    },\n    selectLabel: {\n        color: theme.palette.headerGray,\n        fontSize: '12.5px',\n        marginBottom: '0.8vh',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    selectBox: {\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '5px',\n        \"&:focus\": {\n            borderRadius: '5px !important',\n            backgroundColor: 'transparent',\n        },\n        position: 'relative'\n    },\n    apiSelectBox: {\n        border: 'none',\n        borderRadius: '5px',\n        \"&:focus\": {\n            borderRadius: '5px !important',\n            backgroundColor: 'transparent',\n        },\n        position: 'relative'\n    },\n    selectIcon: {\n        position: 'absolute',\n        top: '25%',\n        right: '10px'\n    },\n    menuPaper: {\n        boxShadow: '0px 19px 27px 0 rgba(71, 71, 71, 0.09)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '5px'\n    },\n    menuItem: {\n        fontSize: '11px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n\n    select_select: {\n        fontWeight: 'normal !important',\n        fontSize: '13px',\n        padding: '1.5vh 1vw',\n        borderRadius: '5px !important',\n        backgroundColor: theme.palette.white,\n        \"&:focus\": {\n            backgroundColor: theme.palette.white,\n        },\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '16px !important',\n        },\n    },\n    select_select_disabled: {\n        fontWeight: 'normal !important',\n        fontSize: '13px',\n        padding: '1.5vh 1vw',\n        borderRadius: '5px !important',\n        backgroundColor: '#e8e8e8',\n        \"&:focus\": {\n            backgroundColor: '#e8e8e8',\n        },\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '16px !important',\n        },\n    },\n    select_minPadding: {\n        padding: '0.8vh 1vh',\n        paddingRight: '35px !important',\n        borderRadius: '5px',\n        fontSize: '11px !important',\n        '@media (min-width: 1280px) and (max-height: 650px)': {\n            fontSize: '10px !important'\n        },\n        '@media (min-width: 1680px)': {\n            fontSize: '12.5px !important'\n        },\n        '@media (min-width: 1920px)': {\n            fontSize: '14.5px !important'\n        },\n    },\n    select_medPadding: {\n        padding: '1.2vh 1vw',\n        paddingRight: '35px !important',\n        borderRadius: '5px',\n        fontSize: '11px !important',\n        '@media (min-width: 1280px) and (max-height: 650px)': {\n            fontSize: '10px !important'\n        },\n        '@media (min-width: 1680px)': {\n            fontSize: '12.5px !important'\n        },\n        '@media (min-width: 1920px)': {\n            fontSize: '14.5px !important'\n        },\n    },\n    select_padding: {\n        padding: '1.6vh 1vw',\n        borderRadius: '5px'\n    },\n    placeholderValue: {\n\n    },\n    selectMinIcon: {\n        position: 'absolute',\n        top: '18%',\n        right: '10px'\n    },\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "tooltipStyles",
                "method_begin": "export const tooltipStyles = theme => ({",
                "method_end": "})",
                "range": [
                    232,
                    238
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/componentStyles.js",
                "returnType": "({\n    tooltip: {\n        fontSize: '12px !important',\n        whiteSpace: 'pre-line',\n        textAlign: 'left'\n    }\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "textFieldStyles",
                "method_begin": "export const textFieldStyles = theme => ({",
                "method_end": "})",
                "range": [
                    240,
                    381
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/componentStyles.js",
                "returnType": "({\n    selectLabel: {\n        display: 'flex',\n        color: theme.palette.headerGray,\n        fontSize: '12.5px',\n        marginBottom: '0.8vh',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    popupLabel: {\n        color: theme.palette.headerGray,\n        fontSize: '12.5px',\n        marginBottom: '0.8vh',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    checkboxLabel: {\n        color: theme.palette.headerGray,\n        fontSize: '12.5px',\n        fontWeight: '500',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    selectBox: {\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '5px',\n        \"&:focus\": {\n            borderRadius: '5px !important',\n            backgroundColor: 'transparent',\n        },\n        position: 'relative'\n    },\n    autoLabel: {\n        color: '#8e92a9'\n    },\n    autoMargin: {\n        marginBottom: '1.5vh'\n    },\n    autoOptions: {\n        fontSize: '12px',\n        backgroundColor: 'white !important',\n        padding: '1vh 1vw !important',\n        borderRadius: '0px',\n        color: '#646884',\n    },\n    autoClear: {\n        display: 'none'\n    },\n    autoPaper: {\n        boxShadow: '0px 19px 27px 0 rgba(71, 71, 71, 0.09)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '5px'\n    },\n    hiddenText: {\n        color: theme.palette.cloudyBlue,\n        fontSize: '18px',\n        whiteSpace: 'pre-line',\n        visibility: 'hidden',\n        height: '2px',\n    },\n    /*Styles for input*/\n    textFieldRoot: {\n        border: 'none',\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        padding: '1.5vh 1vw !important',\n        backgroundColor: theme.palette.white\n    },\n\n    textFieldInput: {\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '16px !important',\n        },\n    },\n    errorHighlight: {\n        border: `solid 1px ${theme.palette.red} !important`\n    },\n    autoCompleteInput: {\n        padding: '0 !important',\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '16px !important',\n        },\n    },\n    textFieldInputSansLabel: {\n        padding: '1vh 12px !important',\n        fontSize: '15px'\n    },\n\n    label: {\n        fontSize: ' 14px !important'\n    },\n\n    inputMargin: {\n        marginTop: '0 !important',\n        marginBottom: '0 !important'\n    },\n\n    disabledText: {\n        backgroundColor: '#e8e8e8 !important',\n        borderRadius: '5px!important',\n        cursor: 'not-allowed !important'\n    },\n    menuItem: {\n        fontSize: '11px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*Styles"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/uiStyles.js": {
        "method_details_": [
            {
                "method_name": "textBoxStyles",
                "method_begin": "export const textBoxStyles = theme => ({",
                "method_end": "})",
                "range": [
                    3,
                    151
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/uiStyles.js",
                "returnType": "({\n    selectLabel: {\n        color: '#4F566B',\n        fontSize: '12.5px',\n        marginBottom: '0.8vh',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    popupLabel: {\n        color: theme.palette.headerGray,\n        fontSize: '12.5px',\n        marginBottom: '0.8vh',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    checkboxLabel: {\n        color: theme.palette.headerGray,\n        fontSize: '12.5px',\n        fontWeight: '500',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    selectBox: {\n        border: '1px solid #8A8886',\n        borderRadius: '2px',\n        \"&:focus\": {\n            borderRadius: '2px !important',\n            backgroundColor: 'transparent',\n        },\n        position: 'relative'\n    },\n    autoLabel: {\n        color: '#8e92a9'\n    },\n    autoMargin: {\n        marginBottom: '1.5vh'\n    },\n    autoOptions: {\n        fontSize: '12px',\n        backgroundColor: 'white !important',\n        padding: '1vh 1vw !important',\n        borderRadius: '0px',\n        color: '#646884',\n    },\n    autoClear: {\n        display: 'none'\n    },\n    autoPaper: {\n        boxShadow: '0px 19px 27px 0 rgba(71, 71, 71, 0.09)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '2px'\n    },\n    hiddenText: {\n        color: theme.palette.cloudyBlue,\n        fontSize: '18px',\n        whiteSpace: 'pre-line',\n        visibility: 'hidden',\n        height: '2px',\n    },\n    /*Styles for input*/\n    textFieldRoot: {\n        border: 'none',\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        padding: '1.5vh 1vw !important',\n      //  backgroundColor: theme.palette.white\n    },\n\n    textFieldRootMin: {\n        border: 'none',\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        padding: '0.9vh 4px !important',\n        backgroundColor: theme.palette.white\n    },\n\n    textFieldInput: {\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '16px !important',\n        },\n    },\n    errorHighlight:{\n        border: `solid 1px ${theme.palette.red} !important`\n    },\n    autoCompleteInput: {\n        padding: '0 !important',\n        fontSize: '13px !important',\n        fontWeight: 'normal !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '16px !important',\n        },\n    },\n    textFieldInputSansLabel: {\n        padding: '1vh 12px !important',\n        fontSize: '15px'\n    },\n\n    label: {\n        fontSize: ' 14px !important'\n    },\n\n    inputMargin: {\n        marginTop: '0 !important',\n        marginBottom: '0 !important'\n    },\n\n    disabledText: {\n        backgroundColor: '#e8e8e8 !important',\n        borderRadius: '2px !important',\n        cursor: 'not-allowed !important'\n    },\n    menuItem: {\n        fontSize: '11px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n\n\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*Styles",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "selectFieldStyles",
                "method_begin": "export const selectFieldStyles = theme => ({",
                "method_end": "})",
                "range": [
                    156,
                    245
                ],
                "parameters": [
                    "theme"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/UIComponents/uiStyles.js",
                "returnType": "({\n    errorHighlight:{\n        border: `solid 1px ${theme.palette.red} !important`\n    },\n    disabled: {\n        cursor: 'not-allowed !important'\n    },\n    select: {\n        paddingLeft: '8px',\n        padding: '1.5vh 1vw',\n        '&:focus': {\n            backgroundColor: 'transparent',\n        },\n        borderRadius: '2px'\n    },\n    selectLabel: {\n        color: '#4F566B',\n        fontSize: '12.5px',\n        marginBottom: '0.8vh',\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12.5px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    selectBox: {\n        border: '1px solid #8A8886',\n        borderRadius: '2px',\n        \"&:focus\": {\n            borderRadius: '2px !important',\n            backgroundColor: 'transparent',\n        },\n        position: 'relative'\n    },\n    selectIcon: {\n        position: 'absolute',\n        top: '25%',\n        right: '10px'\n    },\n    menuPaper: {\n        boxShadow: '0px 19px 27px 0 rgba(71, 71, 71, 0.09)',\n        border: 'solid 1px rgba(0, 0, 0, 0.1)',\n        borderRadius: '2px'\n    },\n    menuItem: {\n        fontSize: '11px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '12px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '14.5px !important',\n        },\n    },\n    select_minPadding: {\n        padding: '0.8vh 1vh',\n        paddingRight: '25px !important',\n        borderRadius: '2px',\n        fontSize: '11px !important',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n    selectMinIcon: {\n        position: 'absolute',\n        top: '18%',\n        right: '4px'\n    },\n    select_min: {\n        fontWeight: 'normal !important',\n        fontSize: '12px !important',\n        padding: '1vh 4px',\n        borderRadius: '2px !important',\n        backgroundColor: theme.palette.white,\n        \"&:focus\": {\n            backgroundColor: theme.palette.white,\n        },\n        fontWeight: '500',\n        [theme.breakpoints.up('md')]: {\n            fontSize: '13px !important',\n        },\n        [theme.breakpoints.up('lg')]: {\n            fontSize: '15.5px !important',\n        },\n    },\n})",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/Unauthorized.js": {
        "method_details_": [
            {
                "method_name": "Unauthorized",
                "method_begin": "export default function Unauthorized(props)",
                "method_end": ");",
                "range": [
                    4,
                    31
                ],
                "parameters": [
                    "props"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/Unauthorized.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/1/all",
                    "//",
                    "/>",
                    "/div>",
                    "/div>",
                    "/>",
                    "/div>",
                    "/>",
                    "/home/admin-panel/ocr-statistics/OCR_PENDING/1",
                    "/div>&nbsp;for",
                    "/div>",
                    "/div>&nbsp;for",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "goToHome",
                "method_begin": "const goToHome = () => {",
                "method_end": "}",
                "range": [
                    9,
                    13
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/Unauthorized.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/home/upload-api/page/1/all",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/WindowFocusHandler.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/keyPress.js": {
        "method_details_": [
            {
                "method_name": "useKeyPress",
                "method_begin": "export const useKeyPress = (targetKey) => {",
                "method_end": "NA",
                "range": [
                    3,
                    31
                ],
                "parameters": [
                    "targetKey"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/keyPress.js",
                "returnType": "() => {\n            window.removeEventListener('keydown', downHandler);\n            window.removeEventListener('keyup', upHandler);\n        } | keyPressed",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downHandler",
                "method_begin": "const downHandler = (data) => {",
                "method_end": "};",
                "range": [
                    7,
                    13
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/keyPress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "upHandler",
                "method_begin": "const upHandler = ({ key }) => {",
                "method_end": "};",
                "range": [
                    15,
                    19
                ],
                "parameters": [
                    "{ key }"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/keyPress.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/openInPostman.js": {
        "method_details_": [
            {
                "method_name": "createEnv",
                "method_begin": "function createEnv()",
                "method_end": "return false;",
                "range": [
                    3,
                    13
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/openInPostman.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js": {
        "method_details_": [
            {
                "method_name": "checkIfElemInView",
                "method_begin": "export function checkIfElemInView(element, fullyInView)",
                "method_end": "return $(element).isOnScreen()",
                "range": [
                    33,
                    38
                ],
                "parameters": [
                    "element",
                    "fullyInView"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "modifyText",
                "method_begin": "export function modifyText(text)",
                "method_end": "return temp.join(\" \")",
                "range": [
                    101,
                    110
                ],
                "parameters": [
                    "text"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cleanNumber",
                "method_begin": "export function cleanNumber(num)",
                "method_end": "return get_num;",
                "range": [
                    110,
                    128
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//no",
                    "/^[+-]?(\\d*|\\d{1,3}(,\\d{3}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createEnv",
                "method_begin": "export function createEnv(key, workflow)",
                "method_end": "return false;",
                "range": [
                    128,
                    165
                ],
                "parameters": [
                    "key",
                    "workflow"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "https://run.pstmn.io/button.js"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupPostman",
                "method_begin": "export function setupPostman(p, o, s, t, m, a, n)",
                "method_end": "));",
                "range": [
                    165,
                    172
                ],
                "parameters": [
                    "p",
                    "o",
                    "s",
                    "t",
                    "m",
                    "a",
                    "n"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "adminCheck",
                "method_begin": "export function adminCheck()",
                "method_end": "return false",
                "range": [
                    172,
                    182
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "amygbUserCheck",
                "method_begin": "export function amygbUserCheck()",
                "method_end": "return false",
                "range": [
                    182,
                    188
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "superAdminCheck",
                "method_begin": "export function superAdminCheck()",
                "method_end": "return false",
                "range": [
                    188,
                    194
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getUsernameFromEmail",
                "method_begin": "export function getUsernameFromEmail(val)",
                "method_end": "return '-'",
                "range": [
                    194,
                    202
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "trialUserCheck",
                "method_begin": "export function trialUserCheck()",
                "method_end": "return false",
                "range": [
                    202,
                    208
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "msToHMS",
                "method_begin": "export function msToHMS(milliseconds)",
                "method_end": "return `${hrString}:${minString}:${secString}`;",
                "range": [
                    208,
                    226
                ],
                "parameters": [
                    "milliseconds"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCfScoreColors",
                "method_begin": "export function getCfScoreColors(type, value)",
                "method_end": "return color",
                "range": [
                    226,
                    272
                ],
                "parameters": [
                    "type",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "modifyTextDocType",
                "method_begin": "export function modifyTextDocType(text)",
                "method_end": "return text.toUpperCase()",
                "range": [
                    272,
                    286
                ],
                "parameters": [
                    "text"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkIfLinkIsOpenOnDifferentTabs",
                "method_begin": "export function checkIfLinkIsOpenOnDifferentTabs()",
                "method_end": "return isLinkOpenOnOtherTabs;",
                "range": [
                    374,
                    389
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "makeid",
                "method_begin": "export function makeid(length)",
                "method_end": "return result;",
                "range": [
                    776,
                    788
                ],
                "parameters": [
                    "length"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "commonElementsOfArray",
                "method_begin": "export function commonElementsOfArray(arrays)",
                "method_end": "}, []);",
                "range": [
                    846,
                    856
                ],
                "parameters": [
                    "arrays"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "generatePassword",
                "method_begin": "export function generatePassword()",
                "method_end": "return retVal;",
                "range": [
                    1393,
                    1405
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "onlyUniqueValues",
                "method_begin": "export function onlyUniqueValues(value, index, array)",
                "method_end": "return array.indexOf(value) === index;",
                "range": [
                    1620,
                    1624
                ],
                "parameters": [
                    "value",
                    "index",
                    "array"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "abbreviateNumber",
                "method_begin": "export function abbreviateNumber(n)",
                "method_end": "return suffix ? String(n / Math.pow(1000, base)).substring(0, 3) + suffix : '' + n;",
                "range": [
                    1624,
                    1631
                ],
                "parameters": [
                    "n"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "identicalArray",
                "method_begin": "export function identicalArray(array)",
                "method_end": "return true;",
                "range": [
                    10482,
                    10492
                ],
                "parameters": [
                    "array"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/Utils/utils.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js": {
        "method_details_": [
            {
                "method_name": "responseBody",
                "method_begin": "const responseBody = res => res.body;",
                "method_end": "const responseBody = res => res.body;",
                "range": [
                    9,
                    9
                ],
                "parameters": [
                    "res"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "res.body",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "del",
                "method_begin": 965,
                "method_end": 1023,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "delUser",
                "method_begin": 1128,
                "method_end": 1190,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "put",
                "method_begin": 2192,
                "method_end": 2250,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "patch",
                "method_begin": 2343,
                "method_end": 2405,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "post",
                "method_begin": 2498,
                "method_end": 2558,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createUser",
                "method_begin": 2651,
                "method_end": 2717,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateUser",
                "method_begin": 2814,
                "method_end": 2879,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateTeam",
                "method_begin": 2976,
                "method_end": 3041,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "postLogin",
                "method_begin": 3138,
                "method_end": 3203,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadFile",
                "method_begin": 3300,
                "method_end": 3366,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadSample",
                "method_begin": 3515,
                "method_end": 3582,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadImage",
                "method_begin": 3731,
                "method_end": 3806,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadFiles",
                "method_begin": 4121,
                "method_end": 4210,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadTrainingFiles",
                "method_begin": 4681,
                "method_end": 4780,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "trainingUpload",
                "method_begin": 5258,
                "method_end": 5329,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "testUpload",
                "method_begin": 5814,
                "method_end": 5908,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "http://20.219.34.135:7022${url}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "login",
                "method_begin": 6078,
                "method_end": 6230,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/user/login"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCaptcha",
                "method_begin": 6235,
                "method_end": 6437,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/generateCaptcha",
                    "/v1/user/logout",
                    "/v1/user/forgotPassword"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "logout",
                "method_begin": 6297,
                "method_end": 6437,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/user/logout",
                    "/v1/user/forgotPassword"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "forgotPassword",
                "method_begin": 6351,
                "method_end": 6437,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/user/forgotPassword"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetForgotPassword",
                "method_begin": 6442,
                "method_end": 6548,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/user/changePassword"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "requestExtension",
                "method_begin": 6577,
                "method_end": 6688,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/users/request/extend"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentList",
                "method_begin": 6717,
                "method_end": 7015,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentDetails",
                "method_begin": 8950,
                "method_end": 9031,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/${documentId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "triggerAiProcess",
                "method_begin": 9037,
                "method_end": 9122,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/idp/startAiProcess/${documentId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBucketDetails",
                "method_begin": 9141,
                "method_end": 9222,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/buckets/${batchId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "compareFiles",
                "method_begin": 9228,
                "method_end": 9407,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/checkSimilarFormat",
                    "/v1/documents/${documentId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateDocument",
                "method_begin": 9324,
                "method_end": 9407,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/${documentId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "docOnHold",
                "method_begin": 9419,
                "method_end": 9497,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/${documentId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteDocuments",
                "method_begin": 9509,
                "method_end": 9588,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "export",
                "method_begin": 9593,
                "method_end": 9781,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/idp/createDownloadLink",
                    "/v1/documents/snipplets?s3_url=${imageURL}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSnippedText",
                "method_begin": 9668,
                "method_end": 9781,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/snipplets?s3_url=${imageURL}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadDocuments",
                "method_begin": 9892,
                "method_end": 9993,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/createDownloadLink"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadFile",
                "method_begin": 9998,
                "method_end": 10059,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/downloads/${name}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "qc",
                "method_begin": 10169,
                "method_end": 10221,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/qc/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "pushToRejected",
                "method_begin": 10227,
                "method_end": 10297,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/qc/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getList",
                "method_begin": 10329,
                "method_end": 10438,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/idp?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter",
                "method_begin": 10669,
                "method_end": 10864,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/idp?sortBy=createdAt&orderBy=DESC",
                    "/v1/idp?sortBy=createdAt&orderBy=DESC&offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter1",
                "method_begin": 10754,
                "method_end": 10864,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/idp?sortBy=createdAt&orderBy=DESC&offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDetail",
                "method_begin": 10879,
                "method_end": 10935,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/idp?idpId=${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getLatestBatch",
                "method_begin": 10941,
                "method_end": 11100,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/idp?offset=0&limit=1",
                    "/v2/endpoints?workflowId=${workflowId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCurlRequest",
                "method_begin": 11012,
                "method_end": 11100,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/endpoints?workflowId=${workflowId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startQc",
                "method_begin": 11106,
                "method_end": 11278,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/idp/qualityCheck"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "reprocess",
                "method_begin": 12187,
                "method_end": 12265,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/batch/reprocessBatch"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteBatch",
                "method_begin": 12270,
                "method_end": 12339,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/idp"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getLogs",
                "method_begin": 15084,
                "method_end": 15236,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/ocr/logsList?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSettings",
                "method_begin": 15706,
                "method_end": 15759,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/setting"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatches",
                "method_begin": 16370,
                "method_end": 16504,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/process/batchList?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "generateKey",
                "method_begin": 16732,
                "method_end": 16919,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/generateIdpApiKey",
                    "/v2/apiKey",
                    "/v2/apiKey/update"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getKey",
                "method_begin": 16796,
                "method_end": 16919,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/apiKey",
                    "/v2/apiKey/update"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "update",
                "method_begin": 16844,
                "method_end": 16919,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/apiKey/update"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "verifyBatch",
                "method_begin": 16924,
                "method_end": 17386,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/process/verifyBatch",
                    "/v2/process/generateBatch",
                    "/v2/process/documents?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createBatch",
                "method_begin": 17001,
                "method_end": 17386,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/process/generateBatch",
                    "/v2/process/documents?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getConfig",
                "method_begin": 19232,
                "method_end": 19300,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/config?offset=${page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getConfigById",
                "method_begin": 19338,
                "method_end": 19395,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/config/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getConfigForUpload",
                "method_begin": 19401,
                "method_end": 19607,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/workflows?fields=workflow",
                    "/v1/config",
                    "/v1/config/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createConfig",
                "method_begin": 19480,
                "method_end": 19607,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/config",
                    "/v1/config/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateConfig",
                "method_begin": 19545,
                "method_end": 19607,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/config/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteConfig",
                "method_begin": 19619,
                "method_end": 19682,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/config"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createRule",
                "method_begin": 19702,
                "method_end": 19769,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/rules"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getRules",
                "method_begin": 19774,
                "method_end": 19822,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/rules"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getStatistics",
                "method_begin": 19846,
                "method_end": 19922,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/stats?fromDate=${start}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getServerHealth",
                "method_begin": 19942,
                "method_end": 20075,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/server/health",
                    "/v2/enterprise/statistics"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getAdminStats",
                "method_begin": 20006,
                "method_end": 20075,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/enterprise/statistics"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getNextBatch",
                "method_begin": 20373,
                "method_end": 20456,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/${from"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getNextFile",
                "method_begin": 20618,
                "method_end": 20700,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/${from"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "delete",
                "method_begin": 20947,
                "method_end": 21021,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/training/docs"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTrainingDetails",
                "method_begin": 21026,
                "method_end": 21170,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/documents/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "saveTrainingDetails",
                "method_begin": 21260,
                "method_end": 21335,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/saveDocument/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSavedDetails",
                "method_begin": 21361,
                "method_end": 21427,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/savedDocument/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCellInfoMetadata",
                "method_begin": 21433,
                "method_end": 21514,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/cellInfoMetaData/${pageId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "hardResetClassification",
                "method_begin": 21520,
                "method_end": 21599,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/idp/reset"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFileDetails",
                "method_begin": 21604,
                "method_end": 21699,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/${from"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getAllPages",
                "method_begin": 21765,
                "method_end": 21875,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/${from",
                    "/trainingPages",
                    "/pages"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "upload",
                "method_begin": 21940,
                "method_end": 22169,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/trainingBatchUpload",
                    "/v2/${forced"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sendTabularFeedback",
                "method_begin": 22283,
                "method_end": 22362,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/training/tabular/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "extractTableData",
                "method_begin": 22374,
                "method_end": 22499,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/${addTable"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "autofillColumn",
                "method_begin": 22511,
                "method_end": 22749,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/fieldCompletion",
                    "/v1/startFileReview",
                    "/v1/training/retrain"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startReview",
                "method_begin": 22596,
                "method_end": 22749,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/startFileReview",
                    "/v1/training/retrain"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "retrain",
                "method_begin": 22670,
                "method_end": 22749,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/training/retrain"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "reviewClassification",
                "method_begin": 22754,
                "method_end": 22967,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/file/trainingDocumentClassification",
                    "/v1/file/documentClassification"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteFields",
                "method_begin": 22971,
                "method_end": 23056,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/training/documents/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "create",
                "method_begin": 23302,
                "method_end": 23487,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/globalMapping",
                    "/v1/globalMapping",
                    "/v1/globalMapping/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "get",
                "method_begin": 23433,
                "method_end": 23487,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/globalMapping/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getMappingList1",
                "method_begin": 23493,
                "method_end": 23618,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/globalMapping?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getMappingList",
                "method_begin": 23881,
                "method_end": 24096,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/globalMapping?sortBy=createdAt&orderBy=DESC&offset=0&limit=1000"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocConfigsWithVendors",
                "method_begin": 24113,
                "method_end": 24332,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/globalMapping?sortBy=createdAt&orderBy=DESC&offset=0&limit=1000"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getExternalConfigList",
                "method_begin": 24349,
                "method_end": 24451,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/vendorSheetsConfigList?tenantId=${tenantId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getAllDocConfigs",
                "method_begin": 24565,
                "method_end": 24776,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/globalMappingDropDown?sortBy=createdAt&orderBy=DESC&offset=0&limit=1000",
                    "/v2/vendorSampleFileUpload"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getList1",
                "method_begin": 25078,
                "method_end": 25199,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/workflows?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListAfterDelete",
                "method_begin": 25387,
                "method_end": 25510,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/workflows?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "validate",
                "method_begin": 25746,
                "method_end": 25816,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/workflows/validate/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "search",
                "method_begin": 26901,
                "method_end": 27012,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/latestVendors?vendorType=${type}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchVendors",
                "method_begin": 28013,
                "method_end": 28204,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/${type"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "correct",
                "method_begin": 28566,
                "method_end": 28634,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/vendorCorrection"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getQueueList",
                "method_begin": 28656,
                "method_end": 28727,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/queue/logs?pageNo=${page}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "download",
                "method_begin": 28833,
                "method_end": 28918,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/downloadReport?fileName=${fileName}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "generate",
                "method_begin": 28924,
                "method_end": 29018,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/v2/${type}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "generateQueueReport",
                "method_begin": 29411,
                "method_end": 29545,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/v2/generate/queueReport?startDate=${startDate}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "test",
                "method_begin": 30031,
                "method_end": 30104,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/verifyWebhook"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "readFiles",
                "method_begin": 31005,
                "method_end": 31078,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/verifyInputStorage"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "serverDetails",
                "method_begin": 31169,
                "method_end": 31235,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/aiDetail"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTrialUsers",
                "method_begin": 31256,
                "method_end": 31408,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/admin/users?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTrialRequests",
                "method_begin": 31712,
                "method_end": 31881,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/admin/users?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateTrialUser",
                "method_begin": 32062,
                "method_end": 32132,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/admin/users/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getUserDetails",
                "method_begin": 32144,
                "method_end": 32207,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/admin/users/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getServers",
                "method_begin": 32282,
                "method_end": 32427,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/status/aiServers"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTenants",
                "method_begin": 32444,
                "method_end": 32599,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/admin/tenants",
                    "/v2/admin/autoScale"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "scaleServers",
                "method_begin": 32503,
                "method_end": 32599,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/admin/autoScale"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "releaseServer",
                "method_begin": 32607,
                "method_end": 32704,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/status/aiServer"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "rebootServer",
                "method_begin": 32709,
                "method_end": 32801,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/server/reboot"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getServerMappings",
                "method_begin": 32806,
                "method_end": 32959,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/status/ocrServers"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getServer",
                "method_begin": 32976,
                "method_end": 33031,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/aiServer/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchLogs",
                "method_begin": 33037,
                "method_end": 33130,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/fetch/logs?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "mapServer",
                "method_begin": 33241,
                "method_end": 33344,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/aiServer/workflow"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflows",
                "method_begin": 33349,
                "method_end": 33473,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/admin/users/workflow/${tenantId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createServer",
                "method_begin": 33664,
                "method_end": 33808,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/aiServer",
                    "/v2/aiServer?${serverId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateServer",
                "method_begin": 33731,
                "method_end": 33808,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/aiServer?${serverId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getOcrFileList",
                "method_begin": 33883,
                "method_end": 34056,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/admin/filesList"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getProgressFiles",
                "method_begin": 34312,
                "method_end": 34462,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/admin/filesList"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getClassificationFiles",
                "method_begin": 34530,
                "method_end": 34760,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/admin/filesList?aiStatus=OCR_INPROGRESS&classification=IN_PROGRESS",
                    "/v2/queue/logs?limit=50&offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getQueueLogs",
                "method_begin": 34669,
                "method_end": 34760,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/queue/logs?limit=50&offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "changeFileStatus",
                "method_begin": 34801,
                "method_end": 34898,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/admin/file"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "processingStatus",
                "method_begin": 34903,
                "method_end": 35068,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/filesAiStatus",
                    "/v2/filesAiProcess"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "processingStatusForTenant",
                "method_begin": 34970,
                "method_end": 35068,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/filesAiProcess"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setProcessingStatus",
                "method_begin": 35073,
                "method_end": 35167,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/filesAiStatus"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getUsers",
                "method_begin": 35193,
                "method_end": 35344,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/enterprise/users?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getRoles",
                "method_begin": 35746,
                "method_end": 35804,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/roles"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteUser",
                "method_begin": 35808,
                "method_end": 35892,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/enterprise/user/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getOld",
                "method_begin": 37910,
                "method_end": 38051,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/team/getTeamDetails?pageNo=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDetailOld",
                "method_begin": 38320,
                "method_end": 38463,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/team/getTeamDetails?pageNo=1&limit=1"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCustomers",
                "method_begin": 38556,
                "method_end": 38705,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/getAllCustomers"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "filterTeam",
                "method_begin": 38726,
                "method_end": 38899,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/team/getTeamDetails"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteOld",
                "method_begin": 39214,
                "method_end": 39317,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/team/deleteTeam?teamName=${encodeURIComponent(teamName"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateOld",
                "method_begin": 39396,
                "method_end": 39738,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/team/updateMembersOfTeam",
                    "/v2/team",
                    "/v2/team/createNewTeam",
                    "/v2/enterprise/users?offset=0&limit=15&roleId=${role}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createOld",
                "method_begin": 39545,
                "method_end": 39738,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/team/createNewTeam",
                    "/v2/enterprise/users?offset=0&limit=15&roleId=${role}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getUsersOld",
                "method_begin": 39883,
                "method_end": 39997,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/users/getUsers?pageNo=1&limit=10&roleId=${role}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getIndexers",
                "method_begin": 40158,
                "method_end": 40274,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/enterprise/users?offset=0&limit=15&roleId=${role}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentListOld",
                "method_begin": 40445,
                "method_end": 40695,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/files?idpId=${batchId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSearchResults",
                "method_begin": 42516,
                "method_end": 42636,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/files/batchFilesCheckInStage?externalBatchId=${extBatchId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFailedFiles",
                "method_begin": 44914,
                "method_end": 45211,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/files/assignedIndexer?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getLargeFiles",
                "method_begin": 45459,
                "method_end": 45552,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/largeFiles?offset=${(page"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getStats",
                "method_begin": 45572,
                "method_end": 45705,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/files/indexer",
                    "/v2/largeFiles/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "approveFailedFiles",
                "method_begin": 45629,
                "method_end": 45705,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v2/largeFiles/${id}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadInvoice",
                "method_begin": 45810,
                "method_end": 45906,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/documents/download?_id=${documentId}"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocConfigs",
                "method_begin": 47227,
                "method_end": 47343,
                "range": "NA",
                "parameters": "NA",
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "unknown",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/v1/globalMapping?sortBy=createdAt&orderBy=DESC&offset=0&limit=1000"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "responseFull",
                "method_begin": "const responseFull = res => {",
                "method_end": "};",
                "range": [
                    10,
                    12
                ],
                "parameters": [
                    "res"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "res",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleErrors",
                "method_begin": "const handleErrors = (err, res) => {",
                "method_end": "};",
                "range": [
                    15,
                    20
                ],
                "parameters": [
                    "err",
                    "res"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "err",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleUserErrors",
                "method_begin": "const handleUserErrors = (err, res) => {",
                "method_end": "};",
                "range": [
                    22,
                    27
                ],
                "parameters": [
                    "err",
                    "res"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "err",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleLoginError",
                "method_begin": "const handleLoginError = (err, res) => {",
                "method_end": "};",
                "range": [
                    29,
                    31
                ],
                "parameters": [
                    "err",
                    "res"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "err",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "tokenPlugin",
                "method_begin": "const tokenPlugin = req => {",
                "method_end": "};",
                "range": [
                    33,
                    37
                ],
                "parameters": [
                    "req"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/agent.js",
                "returnType": "void",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/constants.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/index.js": {
        "method_details_": [],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/serviceWorker.js": {
        "method_details_": [
            {
                "method_name": "register",
                "method_begin": "export function register(config)",
                "method_end": "});",
                "range": [
                    21,
                    55
                ],
                "parameters": [
                    "config"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/serviceWorker.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//",
                    "//",
                    "https://github.com/facebook/create-react-app/issues/2374",
                    "/service-worker.js",
                    "//",
                    "//",
                    "//",
                    "/PWA",
                    "https://bit.ly/CRA-PWA",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "registerValidSW",
                "method_begin": "function registerValidSW(swUrl, config)",
                "method_end": "});",
                "range": [
                    55,
                    99
                ],
                "parameters": [
                    "swUrl",
                    "config"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/serviceWorker.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//",
                    "https://bit.ly/CRA-PWA.",
                    "//",
                    "//",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "checkValidServiceWorker",
                "method_begin": "function checkValidServiceWorker(swUrl, config)",
                "method_end": "});",
                "range": [
                    99,
                    129
                ],
                "parameters": [
                    "swUrl",
                    "config"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/serviceWorker.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "unregister",
                "method_begin": "export function unregister()",
                "method_end": "});",
                "range": [
                    129,
                    137
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/serviceWorker.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/adminStore.js": {
        "method_details_": [
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    377,
                    381
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/adminStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortUserList",
                "method_begin": "sortUserList(index, sortField, sortDirection)",
                "method_end": "this.getTrialUsers()",
                "range": [
                    411,
                    426
                ],
                "parameters": [
                    "index",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/adminStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js": {
        "method_details_": [
            {
                "method_name": "setDateRange",
                "method_begin": "setDateRange(ranges)",
                "method_end": "this.endDate = Moment(ranges.selection.endDate).format('DD-MMM-YYYY')",
                "range": [
                    228,
                    234
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setStartDate",
                "method_begin": "setStartDate(date)",
                "method_end": "this.startDate = date",
                "range": [
                    234,
                    239
                ],
                "parameters": [
                    "date"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setEndDate",
                "method_begin": "setEndDate(date)",
                "method_end": "this.endDate = date",
                "range": [
                    239,
                    243
                ],
                "parameters": [
                    "date"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleSelectAll",
                "method_begin": "handleSelectAll(value)",
                "method_end": "this.openActionSnackbar = value;",
                "range": [
                    291,
                    297
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    297,
                    301
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetSelectedDocuments",
                "method_begin": "resetSelectedDocuments()",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(false);",
                "range": [
                    361,
                    368
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSelectedDocs",
                "method_begin": "setSelectedDocs(index, value)",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(value)",
                "range": [
                    368,
                    380
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeActionSnackbar",
                "method_begin": "closeActionSnackbar()",
                "method_end": "this.openActionSnackbar = false;",
                "range": [
                    380,
                    384
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocuments",
                "method_begin": "//File Actions - Export",
                "method_end": "this.exportXls(temp, filter)",
                "range": [
                    384,
                    396
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadBulkDocs",
                "method_begin": "//File Actions - Download",
                "method_end": "this.downloadOriginalDoc(temp, filter)",
                "range": [
                    396,
                    406
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportXls",
                "method_begin": "exportXls(exportedFromUpload, batchId)",
                "method_end": "}))",
                "range": [
                    406,
                    465
                ],
                "parameters": [
                    "exportedFromUpload",
                    "batchId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//",
                    "//",
                    "//",
                    "//type:",
                    "//commonStore.handleOpenSnackBar(",
                    "//else",
                    "//commonStore.handleOpenSnackBar(response.message,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetMenuArray",
                "method_begin": "resetMenuArray()",
                "method_end": "this.menuArray = new Array(this.batchList.length).fill(false);",
                "range": [
                    465,
                    470
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMenu",
                "method_begin": "openMenu(e, index)",
                "method_end": "this.menuArray[index] = e.currentTarget",
                "range": [
                    470,
                    474
                ],
                "parameters": [
                    "e",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteMultipleDocs",
                "method_begin": "deleteMultipleDocs(docId, filter)",
                "method_end": "}))",
                "range": [
                    474,
                    507
                ],
                "parameters": [
                    "docId",
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "triggerAiProcess",
                "method_begin": "triggerAiProcess()",
                "method_end": "}))",
                "range": [
                    507,
                    528
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCountData",
                "method_begin": "setCountData(countData)",
                "method_end": "this.countData = countData",
                "range": [
                    537,
                    541
                ],
                "parameters": [
                    "countData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUploadFiles",
                "method_begin": "setUploadFiles(files)",
                "method_end": "});",
                "range": [
                    541,
                    548
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileActions",
                "method_begin": "closeFileActions()",
                "method_end": "this.openFileActions = false;",
                "range": [
                    548,
                    552
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUploadDialog",
                "method_begin": "closeUploadDialog()",
                "method_end": "this.openUploadDialog = false;",
                "range": [
                    552,
                    556
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileAssignDialog",
                "method_begin": "closeFileAssignDialog()",
                "method_end": "userStore.closeDialog()",
                "range": [
                    556,
                    563
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openFileAssign",
                "method_begin": "openFileAssign(id)",
                "method_end": "this.closeActionSnackbar()",
                "range": [
                    563,
                    569
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeFile",
                "method_begin": "removeFile(index)",
                "method_end": "this.files.splice(index, 1);",
                "range": [
                    569,
                    573
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openUpload",
                "method_begin": "openUpload(assignedUser, comment, docType)",
                "method_end": "this.selectedDocType = docType",
                "range": [
                    573,
                    582
                ],
                "parameters": [
                    "assignedUser",
                    "comment",
                    "docType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortLogList",
                "method_begin": "sortLogList(index, sortField, sortDirection)",
                "method_end": "this.getApiLogs()",
                "range": [
                    582,
                    597
                ],
                "parameters": [
                    "index",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortDocumentList",
                "method_begin": "sortDocumentList(page, searchText, filter, sortField, sortDirection)",
                "method_end": "this.getGlobalDocumentList(page, searchText, filter, sortField, sortDirection)",
                "range": [
                    608,
                    624
                ],
                "parameters": [
                    "page",
                    "searchText",
                    "filter",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSortField",
                "method_begin": "getSortField(filter)",
                "method_end": "return { sortField: 'exportedAt', sortDirection: -1 }",
                "range": [
                    640,
                    671
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetFiles",
                "method_begin": "resetFiles()",
                "method_end": "this.fileSize = 0",
                "range": [
                    671,
                    682
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "expandUploadedFolder",
                "method_begin": "expandUploadedFolder(index)",
                "method_end": "this.uploadedFolders[index].expanded = !this.uploadedFolders[index].expanded;",
                "range": [
                    682,
                    686
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "cancelUpload()",
                "method_end": "this.abortUpload = true",
                "range": [
                    686,
                    695
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupUploadResponse",
                "method_begin": "setupUploadResponse(uploadData)",
                "method_end": "this.uploadedFiles = temp;",
                "range": [
                    695,
                    738
                ],
                "parameters": [
                    "uploadData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadFiles",
                "method_begin": "uploadFiles(configId)",
                "method_end": "}))",
                "range": [
                    744,
                    801
                ],
                "parameters": [
                    "configId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.setupUploadResponse(response.data",
                    "//this.saveProgress",
                    "/*this.pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getApiKey",
                "method_begin": "getApiKey()",
                "method_end": "}))",
                "range": [
                    801,
                    832
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "compareFiles",
                "method_begin": "compareFiles()",
                "method_end": "}))",
                "range": [
                    952,
                    980
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadOriginalDoc",
                "method_begin": "downloadOriginalDoc(documentId)",
                "method_end": "}))",
                "range": [
                    992,
                    1009
                ],
                "parameters": [
                    "documentId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBucketDetails",
                "method_begin": "//Get bucket detail",
                "method_end": "}))",
                "range": [
                    1009,
                    1074
                ],
                "parameters": [
                    "batchId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getGlobalDocumentList",
                "method_begin": "//Get document list for super admin",
                "method_end": "}))",
                "range": [
                    1074,
                    1134
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFailedDocuments",
                "method_begin": "getFailedDocuments(page, searchText)",
                "method_end": "}))",
                "range": [
                    1134,
                    1175
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentListIntervals",
                "method_begin": "getDocumentListIntervals(page, searchText)",
                "method_end": "}))",
                "range": [
                    1185,
                    1221
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//}",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getApiLogs",
                "method_begin": "getApiLogs(showProgress)",
                "method_end": "}))",
                "range": [
                    1227,
                    1267
                ],
                "parameters": [
                    "showProgress"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchList",
                "method_begin": "getBatchList(showProgress)",
                "method_end": "}))",
                "range": [
                    1267,
                    1293
                ],
                "parameters": [
                    "showProgress"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter",
                "method_begin": "getListForFilter()",
                "method_end": "}))",
                "range": [
                    1293,
                    1317
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/apiStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js": {
        "method_details_": [
            {
                "method_name": "openHelpDialog",
                "method_begin": "openHelpDialog(value)",
                "method_end": "this.helpDialog = value",
                "range": [
                    32,
                    36
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setActiveTab",
                "method_begin": "setActiveTab(active)",
                "method_end": "this.footerTab = -1",
                "range": [
                    50,
                    58
                ],
                "parameters": [
                    "active"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setAppLoaded",
                "method_begin": "setAppLoaded()",
                "method_end": "this.appLoaded = true;",
                "range": [
                    58,
                    62
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleOpenSnackBar",
                "method_begin": "handleOpenSnackBar(message, type, from)",
                "method_end": "this.snackbarOptions.from = from",
                "range": [
                    71,
                    78
                ],
                "parameters": [
                    "message",
                    "type",
                    "from"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCloseSnackBar",
                "method_begin": "handleCloseSnackBar()",
                "method_end": "this.snackbarOptions.from = ''",
                "range": [
                    78,
                    84
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDialog",
                "method_begin": "openDialog(dialogType)",
                "method_end": "this.dialogOptions.type = dialogType;",
                "range": [
                    84,
                    89
                ],
                "parameters": [
                    "dialogType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeDialog",
                "method_begin": "closeDialog()",
                "method_end": "this.dialogOptions.type = '';",
                "range": [
                    89,
                    94
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentStore",
                "method_begin": "setCurrentStore(storeValue)",
                "method_end": "this.currentStore = storeValue;",
                "range": [
                    94,
                    99
                ],
                "parameters": [
                    "storeValue"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetFlag",
                "method_begin": "resetFlag()",
                "method_end": "this.goodToGo = false;",
                "range": [
                    99,
                    102
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setNoInternet",
                "method_begin": "setNoInternet()",
                "method_end": "this.noNet = true;",
                "range": [
                    102,
                    106
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetNoInternet",
                "method_begin": "resetNoInternet()",
                "method_end": "this.noNet = false;",
                "range": [
                    106,
                    109
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/commonStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js": {
        "method_details_": [
            {
                "method_name": "getConfig",
                "method_begin": "getConfig(page)",
                "method_end": "}))",
                "range": [
                    118,
                    144
                ],
                "parameters": [
                    "page"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getConfigById",
                "method_begin": "getConfigById(id)",
                "method_end": "}))",
                "range": [
                    144,
                    197
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getConfigForUpload",
                "method_begin": "getConfigForUpload()",
                "method_end": "}))",
                "range": [
                    197,
                    216
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createConfig",
                "method_begin": "createConfig()",
                "method_end": "}))",
                "range": [
                    347,
                    374
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createWebhookConfig",
                "method_begin": "createWebhookConfig(data)",
                "method_end": "}))",
                "range": [
                    374,
                    404
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createDbConfig",
                "method_begin": "createDbConfig(data)",
                "method_end": "}))",
                "range": [
                    404,
                    434
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createIpConfig",
                "method_begin": "createIpConfig(data)",
                "method_end": "}))",
                "range": [
                    434,
                    471
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateConfig",
                "method_begin": "updateConfig()",
                "method_end": "}))",
                "range": [
                    471,
                    501
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateWebhookConfig",
                "method_begin": "updateWebhookConfig(data)",
                "method_end": "}))",
                "range": [
                    501,
                    538
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateDbConfig",
                "method_begin": "updateDbConfig(data)",
                "method_end": "}))",
                "range": [
                    538,
                    580
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateIpConfig",
                "method_begin": "updateIpConfig(data)",
                "method_end": "}))",
                "range": [
                    580,
                    621
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteConfig",
                "method_begin": "deleteConfig()",
                "method_end": "}))",
                "range": [
                    621,
                    648
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    714,
                    718
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWebhooks",
                "method_begin": "getWebhooks()",
                "method_end": "}))",
                "range": [
                    718,
                    739
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDbConfigs",
                "method_begin": "getDbConfigs()",
                "method_end": "}))",
                "range": [
                    739,
                    760
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getIpConfigs",
                "method_begin": "getIpConfigs()",
                "method_end": "}))",
                "range": [
                    760,
                    780
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteWebhook",
                "method_begin": "deleteWebhook(id)",
                "method_end": "}))",
                "range": [
                    785,
                    812
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.getWorkflowsAfterDelete("
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteDbConfig",
                "method_begin": "deleteDbConfig(id)",
                "method_end": "}))",
                "range": [
                    812,
                    839
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.getWorkflowsAfterDelete("
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteIpConfig",
                "method_begin": "deleteIpConfig(id)",
                "method_end": "}))",
                "range": [
                    839,
                    866
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.getWorkflowsAfterDelete("
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "testWebhook",
                "method_begin": "testWebhook(id)",
                "method_end": "}))",
                "range": [
                    870,
                    897
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//this.getWorkflowsAfterDelete("
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "testDb",
                "method_begin": "testDb(id)",
                "method_end": "}))",
                "range": [
                    897,
                    924
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//this.getWorkflowsAfterDelete("
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "testIpConfig",
                "method_begin": "testIpConfig(id)",
                "method_end": "}))",
                "range": [
                    924,
                    951
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//this.getWorkflowsAfterDelete("
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startReadingFiles",
                "method_begin": "startReadingFiles(id, type)",
                "method_end": "}))",
                "range": [
                    951,
                    978
                ],
                "parameters": [
                    "id",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/configStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.getWorkflowsAfterDelete(",
                    "/stop"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js": {
        "method_details_": [
            {
                "method_name": "showChatHeader",
                "method_begin": "showChatHeader(value)",
                "method_end": "this.chatHeader = value;",
                "range": [
                    76,
                    80
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setDateRange",
                "method_begin": "setDateRange(ranges)",
                "method_end": "this.endDate = Moment(ranges.selection.endDate).format('DD-MMM-YYYY')",
                "range": [
                    80,
                    86
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openHelpDialog",
                "method_begin": "openHelpDialog(value)",
                "method_end": "this.helpDialog = value",
                "range": [
                    86,
                    90
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setActiveTab",
                "method_begin": "setActiveTab(active)",
                "method_end": "this.activeTab = active",
                "range": [
                    90,
                    94
                ],
                "parameters": [
                    "active"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openTrashFlag",
                "method_begin": "openTrashFlag()",
                "method_end": "this.openTrash = true;",
                "range": [
                    94,
                    98
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeTrashFlag",
                "method_begin": "closeTrashFlag()",
                "method_end": "this.openTrash = false;",
                "range": [
                    98,
                    101
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setAppLoaded",
                "method_begin": "setAppLoaded()",
                "method_end": "this.appLoaded = true;",
                "range": [
                    101,
                    104
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleOpenSnackBar",
                "method_begin": "handleOpenSnackBar(message, type)",
                "method_end": "this.snackbarOptions.type = type;",
                "range": [
                    104,
                    110
                ],
                "parameters": [
                    "message",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCloseSnackBar",
                "method_begin": "handleCloseSnackBar()",
                "method_end": "this.snackbarOptions.message = '';",
                "range": [
                    110,
                    115
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDialog",
                "method_begin": "openDialog(dialogType)",
                "method_end": "this.dialogOptions.type = dialogType;",
                "range": [
                    115,
                    120
                ],
                "parameters": [
                    "dialogType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeDialog",
                "method_begin": "closeDialog()",
                "method_end": "this.dialogOptions.type = '';",
                "range": [
                    120,
                    125
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentStore",
                "method_begin": "setCurrentStore(storeValue)",
                "method_end": "this.currentStore = storeValue;",
                "range": [
                    125,
                    130
                ],
                "parameters": [
                    "storeValue"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetFlag",
                "method_begin": "resetFlag()",
                "method_end": "this.goodToGo = false;",
                "range": [
                    130,
                    133
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setNoInternet",
                "method_begin": "setNoInternet()",
                "method_end": "this.noNet = true;",
                "range": [
                    133,
                    137
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetNoInternet",
                "method_begin": "resetNoInternet()",
                "method_end": "this.noNet = false;",
                "range": [
                    137,
                    140
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshStats",
                "method_begin": "refreshStats()",
                "method_end": "this.getStatistics(true)",
                "range": [
                    140,
                    145
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetSearchResult",
                "method_begin": "resetSearchResult()",
                "method_end": "this.kbResult = {};",
                "range": [
                    158,
                    162
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "kbSearch",
                "method_begin": "kbSearch(kbSearchText, type, pageNo)",
                "method_end": "}))",
                "range": [
                    162,
                    181
                ],
                "parameters": [
                    "kbSearchText",
                    "type",
                    "pageNo"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setChartDuration",
                "method_begin": "setChartDuration(value)",
                "method_end": "})",
                "range": [
                    181,
                    198
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/div>",
                    "/div>",
                    "/div>",
                    "/div>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getStatistics",
                "method_begin": "getStatistics(hideLoader)",
                "method_end": "}))",
                "range": [
                    198,
                    226
                ],
                "parameters": [
                    "hideLoader"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//this.chartData",
                    "/*",
                    "/div>",
                    "/div>",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getServerHealth",
                "method_begin": "getServerHealth()",
                "method_end": "}))",
                "range": [
                    226,
                    240
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getLeadStatistics",
                "method_begin": "getLeadStatistics(hideLoader)",
                "method_end": "}))",
                "range": [
                    240,
                    278
                ],
                "parameters": [
                    "hideLoader"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//Sorting"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getLiveStats",
                "method_begin": "getLiveStats(hideLoader)",
                "method_end": "}))",
                "range": [
                    278,
                    294
                ],
                "parameters": [
                    "hideLoader"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//websocketStore.connect("
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getChatStatistics",
                "method_begin": "getChatStatistics(hideLoader)",
                "method_end": "}))",
                "range": [
                    294,
                    331
                ],
                "parameters": [
                    "hideLoader"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//Sorting"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadReports",
                "method_begin": "downloadReports(reportType, dates, category)",
                "method_end": "break;",
                "range": [
                    331,
                    351
                ],
                "parameters": [
                    "reportType",
                    "dates",
                    "category"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/dashboardStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js": {
        "method_details_": [
            {
                "method_name": "setDateRange",
                "method_begin": "setDateRange(ranges)",
                "method_end": "this.endDate = Moment(ranges.selection.endDate).format('DD-MMM-YYYY')",
                "range": [
                    237,
                    243
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleSelectAll",
                "method_begin": "handleSelectAll(value)",
                "method_end": "this.openActionSnackbar = value;",
                "range": [
                    301,
                    307
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    307,
                    311
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetSelectedDocuments",
                "method_begin": "resetSelectedDocuments()",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(false);",
                "range": [
                    380,
                    387
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSelectedDocs",
                "method_begin": "setSelectedDocs(index, value)",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(value)",
                "range": [
                    387,
                    399
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeActionSnackbar",
                "method_begin": "closeActionSnackbar()",
                "method_end": "this.openActionSnackbar = false;",
                "range": [
                    399,
                    403
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocuments",
                "method_begin": "//File Actions - Export",
                "method_end": "this.exportXls(temp, filter)",
                "range": [
                    403,
                    415
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadBulkDocs",
                "method_begin": "//File Actions - Download",
                "method_end": "this.downloadOriginalDoc(temp, filter)",
                "range": [
                    415,
                    425
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportXls",
                "method_begin": "exportXls(exportedFromUpload, batchId, index)",
                "method_end": "}))",
                "range": [
                    425,
                    489
                ],
                "parameters": [
                    "exportedFromUpload",
                    "batchId",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//",
                    "//",
                    "//",
                    "//type:",
                    "//commonStore.handleOpenSnackBar(",
                    "//else",
                    "//commonStore.handleOpenSnackBar(response.message,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetMenuArray",
                "method_begin": "resetMenuArray()",
                "method_end": "this.menuArray = new Array(this.documentList.length).fill(false);",
                "range": [
                    489,
                    494
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMenu",
                "method_begin": "openMenu(e, index)",
                "method_end": "this.menuArray[index] = e.currentTarget",
                "range": [
                    494,
                    498
                ],
                "parameters": [
                    "e",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteMultipleDocs",
                "method_begin": "deleteMultipleDocs(docId, filter)",
                "method_end": "}))",
                "range": [
                    498,
                    531
                ],
                "parameters": [
                    "docId",
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "triggerAiProcess",
                "method_begin": "triggerAiProcess()",
                "method_end": "}))",
                "range": [
                    531,
                    552
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCountData",
                "method_begin": "setCountData(countData)",
                "method_end": "this.countData = countData",
                "range": [
                    561,
                    565
                ],
                "parameters": [
                    "countData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUploadFiles",
                "method_begin": "setUploadFiles(files)",
                "method_end": "});",
                "range": [
                    565,
                    572
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileActions",
                "method_begin": "closeFileActions()",
                "method_end": "this.openFileActions = false;",
                "range": [
                    572,
                    576
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUploadDialog",
                "method_begin": "closeUploadDialog()",
                "method_end": "this.openUploadDialog = false;",
                "range": [
                    576,
                    580
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileAssignDialog",
                "method_begin": "closeFileAssignDialog()",
                "method_end": "userStore.closeDialog()",
                "range": [
                    580,
                    587
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openFileAssign",
                "method_begin": "openFileAssign(id)",
                "method_end": "this.closeActionSnackbar()",
                "range": [
                    587,
                    593
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeFile",
                "method_begin": "removeFile(index)",
                "method_end": "this.files.splice(index, 1);",
                "range": [
                    593,
                    597
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openUpload",
                "method_begin": "openUpload(assignedUser, comment, docType)",
                "method_end": "this.selectedDocType = docType",
                "range": [
                    597,
                    606
                ],
                "parameters": [
                    "assignedUser",
                    "comment",
                    "docType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortDocumentList",
                "method_begin": "sortDocumentList(page, searchText, filter, sortField, sortDirection)",
                "method_end": "this.getGlobalDocumentList(page, searchText, filter, sortField, sortDirection)",
                "range": [
                    606,
                    622
                ],
                "parameters": [
                    "page",
                    "searchText",
                    "filter",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSortField",
                "method_begin": "getSortField(filter)",
                "method_end": "return { sortField: 'exportedAt', sortDirection: -1 }",
                "range": [
                    645,
                    675
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetFiles",
                "method_begin": "resetFiles()",
                "method_end": "this.fileSize = 0",
                "range": [
                    675,
                    686
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "expandUploadedFolder",
                "method_begin": "expandUploadedFolder(index)",
                "method_end": "this.uploadedFolders[index].expanded = !this.uploadedFolders[index].expanded;",
                "range": [
                    686,
                    690
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "cancelUpload()",
                "method_end": "this.resetFiles()",
                "range": [
                    690,
                    700
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupUploadResponse",
                "method_begin": "setupUploadResponse(uploadData)",
                "method_end": "this.uploadedFiles = temp;",
                "range": [
                    700,
                    743
                ],
                "parameters": [
                    "uploadData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadFiles",
                "method_begin": "uploadFiles(configId)",
                "method_end": "}))",
                "range": [
                    749,
                    823
                ],
                "parameters": [
                    "configId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//this.setupUploadResponse(response.data",
                    "//this.uploadProgress",
                    "/*this.pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "compareFiles",
                "method_begin": "compareFiles()",
                "method_end": "}))",
                "range": [
                    823,
                    850
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCurlRequest",
                "method_begin": "getCurlRequest(id)",
                "method_end": "}))",
                "range": [
                    850,
                    882
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadOriginalDoc",
                "method_begin": "downloadOriginalDoc(documentId)",
                "method_end": "}))",
                "range": [
                    894,
                    915
                ],
                "parameters": [
                    "documentId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBucketDetails",
                "method_begin": "//Get bucket detail",
                "method_end": "}))",
                "range": [
                    915,
                    980
                ],
                "parameters": [
                    "batchId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getGlobalDocumentList",
                "method_begin": "//Get document list for super admin",
                "method_end": "}))",
                "range": [
                    980,
                    1042
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSettings",
                "method_begin": "getSettings()",
                "method_end": "}))",
                "range": [
                    1042,
                    1061
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentListIntervals",
                "method_begin": "getDocumentListIntervals(page, searchText)",
                "method_end": "}))",
                "range": [
                    1071,
                    1107
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//}",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchList",
                "method_begin": "getBatchList(showProgress)",
                "method_end": "}))",
                "range": [
                    1122,
                    1146
                ],
                "parameters": [
                    "showProgress"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter",
                "method_begin": "getListForFilter()",
                "method_end": "}))",
                "range": [
                    1146,
                    1170
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter1",
                "method_begin": "getListForFilter1()",
                "method_end": "}))",
                "range": [
                    1204,
                    1236
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getLatestBatch",
                "method_begin": "getLatestBatch()",
                "method_end": "}))",
                "range": [
                    1236,
                    1265
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startQc",
                "method_begin": "startQc(type, batchId, docId, threshold)",
                "method_end": "}))",
                "range": [
                    1265,
                    1290
                ],
                "parameters": [
                    "type",
                    "batchId",
                    "docId",
                    "threshold"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js": {
        "method_details_": [
            {
                "method_name": "updateField",
                "method_begin": "updateField(value, index, fieldId, qcErrorType)",
                "method_end": "this.updatedValues.push(temp);",
                "range": [
                    44,
                    68
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "qcErrorType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updatePosoField",
                "method_begin": "updatePosoField(value, index, fieldId, coordinates)",
                "method_end": "this.updateTabularField(value, index, fieldId, coordinates)",
                "range": [
                    72,
                    79
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "coordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateNonTabularField",
                "method_begin": "updateNonTabularField(value, index, fieldId, coordinates)",
                "method_end": "this.updatedNonTabularFields.push(temp);",
                "range": [
                    79,
                    96
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "coordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateTabularField",
                "method_begin": "updateTabularField(value, index, fieldId, coordinates)",
                "method_end": "this.updatedTabularFields.push(temp);",
                "range": [
                    96,
                    112
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "coordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateSnippedField",
                "method_begin": "updateSnippedField(value, newCoordinates)",
                "method_end": "this.updatedValues.push(temp);",
                "range": [
                    112,
                    129
                ],
                "parameters": [
                    "value",
                    "newCoordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateSnippedFieldPoso",
                "method_begin": "updateSnippedFieldPoso(value, newCoordinates)",
                "method_end": "this.updateTabularField(value, index, this.currentField._id, newCoordinates)",
                "range": [
                    129,
                    147
                ],
                "parameters": [
                    "value",
                    "newCoordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetCurrentField",
                "method_begin": "resetCurrentField()",
                "method_end": "imageStore.eraseDrawPoint();",
                "range": [
                    147,
                    152
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "undoChanges",
                "method_begin": "undoChanges(index)",
                "method_end": "this.updatedValues.splice(i, 1);",
                "range": [
                    152,
                    164
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "undoPosoChanges",
                "method_begin": "undoPosoChanges()",
                "method_end": "}*/",
                "range": [
                    164,
                    193
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentField",
                "method_begin": "setCurrentField(item, index)",
                "method_end": "this.currentIndex = index;",
                "range": [
                    193,
                    200
                ],
                "parameters": [
                    "item",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "editCurrentFieldValue",
                "method_begin": "editCurrentFieldValue(text)",
                "method_end": "//this.updateDocument(false,true)",
                "range": [
                    200,
                    205
                ],
                "parameters": [
                    "text"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.updateDocument(false,true"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPosition",
                "method_begin": "setPosition(top, left)",
                "method_end": "this.currentField.style.left = left;",
                "range": [
                    205,
                    210
                ],
                "parameters": [
                    "top",
                    "left"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentTopValue",
                "method_begin": "setCurrentTopValue()",
                "method_end": "this.currentTopValue = this.currentField.style.top",
                "range": [
                    210,
                    214
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "moveTopPosition",
                "method_begin": "moveTopPosition(top)",
                "method_end": "this.currentField.style.top = parseInt(this.currentTopValue) + parseInt(top) + 'px';",
                "range": [
                    214,
                    218
                ],
                "parameters": [
                    "top"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setFieldMeasure",
                "method_begin": "setFieldMeasure(h, w, display)",
                "method_end": "this.currentField.style = { height: h, width: w, display: display }",
                "range": [
                    218,
                    222
                ],
                "parameters": [
                    "h",
                    "w",
                    "display"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentPage",
                "method_begin": "setCurrentPage(index)",
                "method_end": "this.currentPage = this.currentDoc.pageArray[index]",
                "range": [
                    222,
                    228
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentImagePoSo",
                "method_begin": "setCurrentImagePoSo(currentPage, pageNo)",
                "method_end": "this.resetCurrentField()",
                "range": [
                    228,
                    237
                ],
                "parameters": [
                    "currentPage",
                    "pageNo"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocumentDrawer",
                "method_begin": "openDocumentDrawer()",
                "method_end": "this.openDrawer = true;",
                "range": [
                    237,
                    241
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeDocumentDrawer",
                "method_begin": "closeDocumentDrawer()",
                "method_end": "this.openDrawer = false;",
                "range": [
                    241,
                    245
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupUpdatePayload",
                "method_begin": "setupUpdatePayload(finalSubmit)",
                "method_end": "return payload;",
                "range": [
                    245,
                    262
                ],
                "parameters": [
                    "finalSubmit"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setProgressIcon",
                "method_begin": "setProgressIcon(index)",
                "method_end": "this.currentPage.nonTabularContent[index].progressIcon = <ReactSVG src=\"\" />",
                "range": [
                    262,
                    266
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateForm",
                "method_begin": "updateForm()",
                "method_end": "}))",
                "range": [
                    266,
                    324
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "/>",
                    "//this.inProgress"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "putDocOnHold",
                "method_begin": "putDocOnHold(status, reason, from)",
                "method_end": "}))",
                "range": [
                    324,
                    354
                ],
                "parameters": [
                    "status",
                    "reason",
                    "from"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateDocument",
                "method_begin": "updateDocument(finalSubmit, next)",
                "method_end": "}))",
                "range": [
                    354,
                    404
                ],
                "parameters": [
                    "finalSubmit",
                    "next"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "//this.inProgress"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupUpdatePosoPayload",
                "method_begin": "setupUpdatePosoPayload(type)",
                "method_end": "return payload;",
                "range": [
                    404,
                    447
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>",
                    "/>",
                    "/>",
                    "/>",
                    "/>",
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupPayloadForPosoField",
                "method_begin": "setupPayloadForPosoField(field)",
                "method_end": "return payload;",
                "range": [
                    447,
                    477
                ],
                "parameters": [
                    "field"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setProgressIconPoso",
                "method_begin": "setProgressIconPoso(field)",
                "method_end": "this.updatedTabularFields = [];",
                "range": [
                    477,
                    485
                ],
                "parameters": [
                    "field"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updatePosoDocument",
                "method_begin": "updatePosoDocument(field, autoSave)",
                "method_end": "}))",
                "range": [
                    485,
                    519
                ],
                "parameters": [
                    "field",
                    "autoSave"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//commonStore.handleOpenSnackBar(",
                    "//commonStore.handleOpenSnackBar(response.message,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "headerDisplayed",
                "method_begin": "headerDisplayed(header)",
                "method_end": "this.tableHeaders = Array.from(set);",
                "range": [
                    519,
                    525
                ],
                "parameters": [
                    "header"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateMediassistDocument",
                "method_begin": "updateMediassistDocument(field, autoSave)",
                "method_end": "}))",
                "range": [
                    525,
                    561
                ],
                "parameters": [
                    "field",
                    "autoSave"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//commonStore.handleOpenSnackBar(",
                    "//commonStore.handleOpenSnackBar(response.message,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateWritercorpDocument",
                "method_begin": "updateWritercorpDocument(field, autoSave)",
                "method_end": "}))",
                "range": [
                    561,
                    596
                ],
                "parameters": [
                    "field",
                    "autoSave"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//commonStore.handleOpenSnackBar(",
                    "//commonStore.handleOpenSnackBar(response.message,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "pushToRejected",
                "method_begin": "pushToRejected(tableFlag, nonTableFlag)",
                "method_end": "}))",
                "range": [
                    596,
                    627
                ],
                "parameters": [
                    "tableFlag",
                    "nonTableFlag"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setProgress",
                "method_begin": "setProgress()",
                "method_end": "this.inProgress = true",
                "range": [
                    627,
                    632
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentDetails",
                "method_begin": "getDocumentDetails(docId)",
                "method_end": "}))",
                "range": [
                    780,
                    864
                ],
                "parameters": [
                    "docId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.currentPage",
                    "//",
                    "/*",
                    "https://s3-ap-south-1.amazonaws.com/vision-era-uploads/38762.png"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "qc",
                "method_begin": "qc(id)",
                "method_end": "}))",
                "range": [
                    864,
                    874
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/documentStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js": {
        "method_details_": [
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    55,
                    59
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentTypes",
                "method_begin": "getDocumentTypes()",
                "method_end": "}))",
                "range": [
                    270,
                    294
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createVendor",
                "method_begin": "createVendor(data)",
                "method_end": "}))",
                "range": [
                    340,
                    369
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflow",
                "method_begin": "getWorkflow(id, imported)",
                "method_end": "}))",
                "range": [
                    463,
                    518
                ],
                "parameters": [
                    "id",
                    "imported"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.isValid",
                    "/S3"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflows",
                "method_begin": "getWorkflows()",
                "method_end": "}))",
                "range": [
                    522,
                    542
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getVendors",
                "method_begin": "getVendors(type)",
                "method_end": "}))",
                "range": [
                    542,
                    564
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getExternalData",
                "method_begin": "getExternalData(type)",
                "method_end": "}))",
                "range": [
                    564,
                    613
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getInitialData",
                "method_begin": "getInitialData(customerId, type)",
                "method_end": "}))",
                "range": [
                    613,
                    649
                ],
                "parameters": [
                    "customerId",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchExternalData",
                "method_begin": "searchExternalData(val, customerId, type)",
                "method_end": "}))",
                "range": [
                    649,
                    688
                ],
                "parameters": [
                    "val",
                    "customerId",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflowsForUser",
                "method_begin": "getWorkflowsForUser(user)",
                "method_end": "}))",
                "range": [
                    699,
                    722
                ],
                "parameters": [
                    "user"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getVendorsAfterDelete",
                "method_begin": "getVendorsAfterDelete()",
                "method_end": "}))",
                "range": [
                    722,
                    741
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteVendor",
                "method_begin": "deleteVendor(id)",
                "method_end": "}))",
                "range": [
                    741,
                    773
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/externalDataStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js": {
        "method_details_": [
            {
                "method_name": "setDateRange",
                "method_begin": "setDateRange(ranges)",
                "method_end": "this.endDate = Moment(ranges.selection.endDate).format('DD-MMM-YYYY')",
                "range": [
                    331,
                    337
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleSelectAll",
                "method_begin": "handleSelectAll(value)",
                "method_end": "this.openActionSnackbar = value;",
                "range": [
                    396,
                    402
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    402,
                    406
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetSelectedDocuments",
                "method_begin": "resetSelectedDocuments()",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(false);",
                "range": [
                    503,
                    510
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSelectedDocs",
                "method_begin": "setSelectedDocs(index, value)",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(value)",
                "range": [
                    510,
                    522
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeActionSnackbar",
                "method_begin": "closeActionSnackbar()",
                "method_end": "this.openActionSnackbar = false;",
                "range": [
                    522,
                    526
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocuments",
                "method_begin": "//File Actions - Export",
                "method_end": "this.exportXls(temp, filter)",
                "range": [
                    526,
                    538
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadBulkDocs",
                "method_begin": "//File Actions - Download",
                "method_end": "this.downloadOriginalDoc(temp, filter)",
                "range": [
                    538,
                    548
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportXls",
                "method_begin": "exportXls(exportedFromUpload, batchId, index)",
                "method_end": "}))",
                "range": [
                    562,
                    626
                ],
                "parameters": [
                    "exportedFromUpload",
                    "batchId",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//",
                    "//",
                    "//",
                    "//type:",
                    "//commonStore.handleOpenSnackBar(",
                    "//else",
                    "//commonStore.handleOpenSnackBar(response.message,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetMenuArray",
                "method_begin": "resetMenuArray()",
                "method_end": "this.menuArray = new Array(this.documentList.length).fill(false);",
                "range": [
                    626,
                    631
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMenu",
                "method_begin": "openMenu(e, index)",
                "method_end": "this.menuArray[index] = e.currentTarget",
                "range": [
                    631,
                    635
                ],
                "parameters": [
                    "e",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteMultipleDocs",
                "method_begin": "deleteMultipleDocs(docId, filter)",
                "method_end": "}))",
                "range": [
                    635,
                    668
                ],
                "parameters": [
                    "docId",
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteFile",
                "method_begin": "deleteFile(id, fileName, type)",
                "method_end": "}))",
                "range": [
                    668,
                    732
                ],
                "parameters": [
                    "id",
                    "fileName",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.refreshBatchDetail(",
                    "/*temp.map((x"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "approveFailedFiles",
                "method_begin": "approveFailedFiles(id, type)",
                "method_end": "}))",
                "range": [
                    732,
                    764
                ],
                "parameters": [
                    "id",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/reject"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "triggerAiProcess",
                "method_begin": "triggerAiProcess()",
                "method_end": "}))",
                "range": [
                    764,
                    785
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCountData",
                "method_begin": "setCountData(countData)",
                "method_end": "this.countData = countData",
                "range": [
                    794,
                    798
                ],
                "parameters": [
                    "countData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUploadFiles",
                "method_begin": "setUploadFiles(files)",
                "method_end": "});",
                "range": [
                    798,
                    805
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileActions",
                "method_begin": "closeFileActions()",
                "method_end": "this.openFileActions = false;",
                "range": [
                    805,
                    809
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUploadDialog",
                "method_begin": "closeUploadDialog()",
                "method_end": "this.openUploadDialog = false;",
                "range": [
                    809,
                    813
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileAssignDialog",
                "method_begin": "closeFileAssignDialog()",
                "method_end": "userStore.closeDialog()",
                "range": [
                    813,
                    820
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openFileAssign",
                "method_begin": "openFileAssign(id)",
                "method_end": "this.closeActionSnackbar()",
                "range": [
                    820,
                    826
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeFile",
                "method_begin": "removeFile(index)",
                "method_end": "this.files.splice(index, 1);",
                "range": [
                    826,
                    830
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openUpload",
                "method_begin": "openUpload(assignedUser, comment, docType)",
                "method_end": "this.selectedDocType = docType",
                "range": [
                    830,
                    839
                ],
                "parameters": [
                    "assignedUser",
                    "comment",
                    "docType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortDocumentList",
                "method_begin": "sortDocumentList(page, searchText, filter, sortField, sortDirection)",
                "method_end": "this.getGlobalDocumentList(page, searchText, filter, sortField, sortDirection)",
                "range": [
                    839,
                    855
                ],
                "parameters": [
                    "page",
                    "searchText",
                    "filter",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSortField",
                "method_begin": "getSortField(filter)",
                "method_end": "return { sortField: 'exportedAt', sortDirection: -1 }",
                "range": [
                    869,
                    899
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetFiles",
                "method_begin": "resetFiles()",
                "method_end": "this.fileSize = 0",
                "range": [
                    899,
                    910
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "expandUploadedFolder",
                "method_begin": "expandUploadedFolder(index)",
                "method_end": "this.uploadedFolders[index].expanded = !this.uploadedFolders[index].expanded;",
                "range": [
                    910,
                    914
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "cancelUpload()",
                "method_end": "this.resetFiles()",
                "range": [
                    914,
                    924
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupUploadResponse",
                "method_begin": "setupUploadResponse(uploadData)",
                "method_end": "this.uploadedFiles = temp;",
                "range": [
                    924,
                    967
                ],
                "parameters": [
                    "uploadData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadFiles",
                "method_begin": "uploadFiles(configId)",
                "method_end": "}))",
                "range": [
                    973,
                    1047
                ],
                "parameters": [
                    "configId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//this.setupUploadResponse(response.data",
                    "//this.uploadProgress",
                    "/*this.pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "compareFiles",
                "method_begin": "compareFiles()",
                "method_end": "}))",
                "range": [
                    1047,
                    1074
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCurlRequest",
                "method_begin": "getCurlRequest(id)",
                "method_end": "}))",
                "range": [
                    1074,
                    1106
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadOriginalDoc",
                "method_begin": "downloadOriginalDoc(documentId)",
                "method_end": "}))",
                "range": [
                    1118,
                    1139
                ],
                "parameters": [
                    "documentId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBucketDetails",
                "method_begin": "//Get bucket detail",
                "method_end": "}))",
                "range": [
                    1139,
                    1204
                ],
                "parameters": [
                    "batchId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getGlobalDocumentListOld",
                "method_begin": "//Get document list for super admin",
                "method_end": "}))",
                "range": [
                    1204,
                    1269
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getGlobalDocumentList",
                "method_begin": "getGlobalDocumentList(page, searchText)",
                "method_end": "}))",
                "range": [
                    1288,
                    1357
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//if",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshDocList",
                "method_begin": "refreshDocList(page, searchText)",
                "method_end": "}))",
                "range": [
                    1357,
                    1417
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSettings",
                "method_begin": "getSettings()",
                "method_end": "}))",
                "range": [
                    1417,
                    1436
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentListIntervals",
                "method_begin": "getDocumentListIntervals(page, searchText)",
                "method_end": "}))",
                "range": [
                    1446,
                    1482
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//}",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchList",
                "method_begin": "getBatchList(showProgress)",
                "method_end": "}))",
                "range": [
                    1497,
                    1521
                ],
                "parameters": [
                    "showProgress"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshBatchList",
                "method_begin": "refreshBatchList()",
                "method_end": "}))",
                "range": [
                    1521,
                    1544
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter",
                "method_begin": "getListForFilter()",
                "method_end": "}))",
                "range": [
                    1544,
                    1568
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter1",
                "method_begin": "getListForFilter1()",
                "method_end": "}))",
                "range": [
                    1680,
                    1715
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getLatestBatch",
                "method_begin": "getLatestBatch()",
                "method_end": "}))",
                "range": [
                    1715,
                    1746
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startQc",
                "method_begin": "startQc(type, batchId, docId, threshold)",
                "method_end": "}))",
                "range": [
                    1746,
                    1771
                ],
                "parameters": [
                    "type",
                    "batchId",
                    "docId",
                    "threshold"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/failureStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/imageStore.js": {
        "method_details_": [
            {
                "method_name": "selectAreaUpdate",
                "method_begin": "/*@computed get getAspectRatioBack() {",
                "method_end": "this.selectionArea.h = rect.h;",
                "range": [
                    66,
                    81
                ],
                "parameters": [
                    "rect"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/imageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startDrawPoint",
                "method_begin": "@action startDrawPoint(x, y, w, h, cropSize, coords, size)",
                "method_end": "//this.focusOnPoint.zoom = 1;",
                "range": [
                    81,
                    98
                ],
                "parameters": [
                    "x",
                    "y",
                    "w",
                    "h",
                    "cropSize",
                    "coords",
                    "size"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/imageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.focusOnPoint.zoom"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "eraseDrawPoint",
                "method_begin": "@action eraseDrawPoint()",
                "method_end": "this.focusOnPoint.zoom = 1;",
                "range": [
                    98,
                    104
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/imageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateCoordinates",
                "method_begin": "@action updateCoordinates(val)",
                "method_end": "this.updatedCoordinates = val;",
                "range": [
                    104,
                    108
                ],
                "parameters": [
                    "val"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/imageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "toggleFlip",
                "method_begin": "@action toggleFlip()",
                "method_end": "this.imageFacingSide = !this.imageFacingSide;",
                "range": [
                    108,
                    112
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/imageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "rotate",
                "method_begin": "@action rotate()",
                "method_end": "this.focusOnPoint.rotate = (90 + this.focusOnPoint.rotate) % 360",
                "range": [
                    121,
                    127
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/imageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetRotate",
                "method_begin": "@action resetRotate()",
                "method_end": "this.focusOnPoint.rotate = 0",
                "range": [
                    127,
                    131
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/imageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchSnipped",
                "method_begin": "@action fetchSnipped(imageURL, cordinates)",
                "method_end": "}))",
                "range": [
                    131,
                    148
                ],
                "parameters": [
                    "imageURL",
                    "cordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/imageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchSnippedPoso",
                "method_begin": "@action fetchSnippedPoso(imageURL, cordinates)",
                "method_end": "}))",
                "range": [
                    148,
                    163
                ],
                "parameters": [
                    "imageURL",
                    "cordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/imageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fitPage",
                "method_begin": "@action fitPage()",
                "method_end": "this.staticImageWidth = defaultImageWidth",
                "range": [
                    173,
                    178
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/imageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/index.js": {
        "method_details_": [
            {
                "method_name": "useStores",
                "method_begin": "export const useStores = () => React.useContext(StoresContext);",
                "method_end": "export const useStores = () => React.useContext(StoresContext);",
                "range": [
                    61,
                    61
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/index.js",
                "returnType": "React.useContext(StoresContext)",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/mAdminStore.js": {
        "method_details_": [
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    196,
                    200
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/mAdminStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/mappingStore.js": {
        "method_details_": [
            {
                "method_name": "getMappingList",
                "method_begin": "getMappingList(page)",
                "method_end": "}))",
                "range": [
                    91,
                    116
                ],
                "parameters": [
                    "page"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/mappingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*if"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocConfigsWithVendors",
                "method_begin": "getDocConfigsWithVendors()",
                "method_end": "}))",
                "range": [
                    116,
                    136
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/mappingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getAllDocConfigs",
                "method_begin": "getAllDocConfigs()",
                "method_end": "}))",
                "range": [
                    136,
                    163
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/mappingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getMappingList1",
                "method_begin": "getMappingList1(page)",
                "method_end": "}))",
                "range": [
                    163,
                    191
                ],
                "parameters": [
                    "page"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/mappingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*if"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createConfig",
                "method_begin": "createConfig()",
                "method_end": "}))",
                "range": [
                    191,
                    219
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/mappingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateMapping",
                "method_begin": "updateMapping()",
                "method_end": "}))",
                "range": [
                    243,
                    367
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/mappingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.cancel("
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteMapping",
                "method_begin": "deleteMapping()",
                "method_end": "}))",
                "range": [
                    371,
                    399
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/mappingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js": {
        "method_details_": [
            {
                "method_name": "setDateRange",
                "method_begin": "setDateRange(ranges)",
                "method_end": "this.endDate = Moment(ranges.selection.endDate).format('DD-MMM-YYYY')",
                "range": [
                    389,
                    395
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleSelectAll",
                "method_begin": "handleSelectAll(value)",
                "method_end": "this.openActionSnackbar = value;",
                "range": [
                    455,
                    461
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    461,
                    465
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetSelectedDocuments",
                "method_begin": "resetSelectedDocuments()",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(false);",
                "range": [
                    562,
                    569
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSelectedDocs",
                "method_begin": "setSelectedDocs(index, value)",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(value)",
                "range": [
                    569,
                    581
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeActionSnackbar",
                "method_begin": "closeActionSnackbar()",
                "method_end": "this.openActionSnackbar = false;",
                "range": [
                    581,
                    585
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocuments",
                "method_begin": "//File Actions - Export",
                "method_end": "this.exportXls(temp, filter)",
                "range": [
                    585,
                    597
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadBulkDocs",
                "method_begin": "//File Actions - Download",
                "method_end": "this.downloadOriginalDoc(temp, filter)",
                "range": [
                    597,
                    607
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportXls",
                "method_begin": "exportXls(exportedFromUpload, batchId, index)",
                "method_end": "}))",
                "range": [
                    621,
                    688
                ],
                "parameters": [
                    "exportedFromUpload",
                    "batchId",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//",
                    "//",
                    "//",
                    "//type:",
                    "//commonStore.handleOpenSnackBar(",
                    "//else",
                    "//commonStore.handleOpenSnackBar(response.message,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "reprocessBatch",
                "method_begin": "reprocessBatch(batchId, index)",
                "method_end": "}))",
                "range": [
                    688,
                    712
                ],
                "parameters": [
                    "batchId",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "reprocessFile",
                "method_begin": "reprocessFile(batchId, fileName, index)",
                "method_end": "}))",
                "range": [
                    712,
                    735
                ],
                "parameters": [
                    "batchId",
                    "fileName",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetMenuArray",
                "method_begin": "resetMenuArray()",
                "method_end": "this.menuArray = new Array(this.documentList.length).fill(false);",
                "range": [
                    735,
                    739
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMenu",
                "method_begin": "openMenu(e, index)",
                "method_end": "this.menuArray[index] = e.currentTarget",
                "range": [
                    739,
                    743
                ],
                "parameters": [
                    "e",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteMultipleDocs",
                "method_begin": "deleteMultipleDocs(docId, filter)",
                "method_end": "}))",
                "range": [
                    743,
                    776
                ],
                "parameters": [
                    "docId",
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteBatch",
                "method_begin": "deleteBatch(id)",
                "method_end": "}))",
                "range": [
                    776,
                    800
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteFile",
                "method_begin": "deleteFile(id, fileName, type)",
                "method_end": "}))",
                "range": [
                    800,
                    864
                ],
                "parameters": [
                    "id",
                    "fileName",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.refreshBatchDetail(",
                    "/*temp.map((x"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "triggerAiProcess",
                "method_begin": "triggerAiProcess()",
                "method_end": "}))",
                "range": [
                    864,
                    885
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCountData",
                "method_begin": "setCountData(countData)",
                "method_end": "this.countData = countData",
                "range": [
                    894,
                    898
                ],
                "parameters": [
                    "countData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUploadFiles",
                "method_begin": "setUploadFiles(files)",
                "method_end": "});",
                "range": [
                    898,
                    905
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileActions",
                "method_begin": "closeFileActions()",
                "method_end": "this.openFileActions = false;",
                "range": [
                    905,
                    909
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUploadDialog",
                "method_begin": "closeUploadDialog()",
                "method_end": "this.openUploadDialog = false;",
                "range": [
                    909,
                    913
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileAssignDialog",
                "method_begin": "closeFileAssignDialog()",
                "method_end": "userStore.closeDialog()",
                "range": [
                    913,
                    920
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openFileAssign",
                "method_begin": "openFileAssign(id)",
                "method_end": "this.closeActionSnackbar()",
                "range": [
                    920,
                    926
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeFile",
                "method_begin": "removeFile(index)",
                "method_end": "this.files.splice(index, 1);",
                "range": [
                    926,
                    930
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openUpload",
                "method_begin": "openUpload(assignedUser, comment, docType)",
                "method_end": "this.selectedDocType = docType",
                "range": [
                    930,
                    939
                ],
                "parameters": [
                    "assignedUser",
                    "comment",
                    "docType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortDocumentList",
                "method_begin": "sortDocumentList(page, searchText, filter, sortField, sortDirection)",
                "method_end": "this.getGlobalDocumentList(page, searchText, filter, sortField, sortDirection)",
                "range": [
                    939,
                    955
                ],
                "parameters": [
                    "page",
                    "searchText",
                    "filter",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSortField",
                "method_begin": "getSortField(filter)",
                "method_end": "return { sortField: 'exportedAt', sortDirection: -1 }",
                "range": [
                    979,
                    1009
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetFiles",
                "method_begin": "resetFiles()",
                "method_end": "this.fileSize = 0",
                "range": [
                    1009,
                    1020
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "expandUploadedFolder",
                "method_begin": "expandUploadedFolder(index)",
                "method_end": "this.uploadedFolders[index].expanded = !this.uploadedFolders[index].expanded;",
                "range": [
                    1020,
                    1024
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "cancelUpload()",
                "method_end": "this.resetFiles()",
                "range": [
                    1024,
                    1034
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupUploadResponse",
                "method_begin": "setupUploadResponse(uploadData)",
                "method_end": "this.uploadedFiles = temp;",
                "range": [
                    1034,
                    1077
                ],
                "parameters": [
                    "uploadData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadFiles",
                "method_begin": "uploadFiles(configId)",
                "method_end": "}))",
                "range": [
                    1083,
                    1157
                ],
                "parameters": [
                    "configId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//this.setupUploadResponse(response.data",
                    "//this.uploadProgress",
                    "/*this.pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "compareFiles",
                "method_begin": "compareFiles()",
                "method_end": "}))",
                "range": [
                    1157,
                    1184
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCurlRequest",
                "method_begin": "getCurlRequest(id)",
                "method_end": "}))",
                "range": [
                    1184,
                    1216
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadOriginalDoc",
                "method_begin": "downloadOriginalDoc(documentId)",
                "method_end": "}))",
                "range": [
                    1228,
                    1249
                ],
                "parameters": [
                    "documentId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBucketDetails",
                "method_begin": "//Get bucket detail",
                "method_end": "}))",
                "range": [
                    1249,
                    1314
                ],
                "parameters": [
                    "batchId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getGlobalDocumentListOld",
                "method_begin": "//Get document list for super admin",
                "method_end": "}))",
                "range": [
                    1314,
                    1379
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getGlobalDocumentList",
                "method_begin": "getGlobalDocumentList(page, searchText)",
                "method_end": "}))",
                "range": [
                    1398,
                    1468
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//if",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSearchResults",
                "method_begin": "getSearchResults()",
                "method_end": "}))",
                "range": [
                    1468,
                    1512
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshDocList",
                "method_begin": "refreshDocList(page, searchText)",
                "method_end": "}))",
                "range": [
                    1512,
                    1573
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSettings",
                "method_begin": "getSettings()",
                "method_end": "}))",
                "range": [
                    1573,
                    1592
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentListIntervals",
                "method_begin": "getDocumentListIntervals(page, searchText)",
                "method_end": "}))",
                "range": [
                    1602,
                    1638
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//}",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchList",
                "method_begin": "getBatchList(showProgress)",
                "method_end": "}))",
                "range": [
                    1665,
                    1694
                ],
                "parameters": [
                    "showProgress"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshBatchList",
                "method_begin": "refreshBatchList()",
                "method_end": "}))",
                "range": [
                    1694,
                    1722
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter",
                "method_begin": "getListForFilter()",
                "method_end": "}))",
                "range": [
                    1722,
                    1746
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter1",
                "method_begin": "getListForFilter1()",
                "method_end": "}))",
                "range": [
                    1858,
                    1893
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getLatestBatch",
                "method_begin": "getLatestBatch()",
                "method_end": "}))",
                "range": [
                    1893,
                    1924
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startQc",
                "method_begin": "startQc(type, batchId, docId, threshold)",
                "method_end": "}))",
                "range": [
                    1924,
                    1949
                ],
                "parameters": [
                    "type",
                    "batchId",
                    "docId",
                    "threshold"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markListingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js": {
        "method_details_": [
            {
                "method_name": "setDateRange",
                "method_begin": "setDateRange(ranges)",
                "method_end": "this.endDate = Moment(ranges.selection.endDate).format('DD-MMM-YYYY')",
                "range": [
                    231,
                    237
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setStartDate",
                "method_begin": "setStartDate(date)",
                "method_end": "this.startDate = date",
                "range": [
                    237,
                    242
                ],
                "parameters": [
                    "date"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setEndDate",
                "method_begin": "setEndDate(date)",
                "method_end": "this.endDate = date",
                "range": [
                    242,
                    246
                ],
                "parameters": [
                    "date"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleSelectAll",
                "method_begin": "handleSelectAll(value)",
                "method_end": "this.openActionSnackbar = value;",
                "range": [
                    294,
                    300
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    300,
                    304
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetSelectedDocuments",
                "method_begin": "resetSelectedDocuments()",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(false);",
                "range": [
                    364,
                    371
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSelectedDocs",
                "method_begin": "setSelectedDocs(index, value)",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(value)",
                "range": [
                    371,
                    383
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeActionSnackbar",
                "method_begin": "closeActionSnackbar()",
                "method_end": "this.openActionSnackbar = false;",
                "range": [
                    383,
                    387
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocuments",
                "method_begin": "//File Actions - Export",
                "method_end": "this.exportXls(temp, filter)",
                "range": [
                    387,
                    399
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadBulkDocs",
                "method_begin": "//File Actions - Download",
                "method_end": "this.downloadOriginalDoc(temp, filter)",
                "range": [
                    399,
                    409
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportXls",
                "method_begin": "exportXls(exportedFromUpload, batchId)",
                "method_end": "}))",
                "range": [
                    409,
                    468
                ],
                "parameters": [
                    "exportedFromUpload",
                    "batchId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//",
                    "//",
                    "//",
                    "//type:",
                    "//commonStore.handleOpenSnackBar(",
                    "//else",
                    "//commonStore.handleOpenSnackBar(response.message,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetMenuArray",
                "method_begin": "resetMenuArray()",
                "method_end": "this.menuArray = new Array(this.batchList.length).fill(false);",
                "range": [
                    468,
                    473
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMenu",
                "method_begin": "openMenu(e, index)",
                "method_end": "this.menuArray[index] = e.currentTarget",
                "range": [
                    473,
                    477
                ],
                "parameters": [
                    "e",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteMultipleDocs",
                "method_begin": "deleteMultipleDocs(docId, filter)",
                "method_end": "}))",
                "range": [
                    477,
                    510
                ],
                "parameters": [
                    "docId",
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "triggerAiProcess",
                "method_begin": "triggerAiProcess()",
                "method_end": "}))",
                "range": [
                    510,
                    531
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCountData",
                "method_begin": "setCountData(countData)",
                "method_end": "this.countData = countData",
                "range": [
                    540,
                    544
                ],
                "parameters": [
                    "countData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUploadFiles",
                "method_begin": "setUploadFiles(files)",
                "method_end": "});",
                "range": [
                    544,
                    551
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileActions",
                "method_begin": "closeFileActions()",
                "method_end": "this.openFileActions = false;",
                "range": [
                    551,
                    555
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUploadDialog",
                "method_begin": "closeUploadDialog()",
                "method_end": "this.openUploadDialog = false;",
                "range": [
                    555,
                    559
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileAssignDialog",
                "method_begin": "closeFileAssignDialog()",
                "method_end": "userStore.closeDialog()",
                "range": [
                    559,
                    566
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openFileAssign",
                "method_begin": "openFileAssign(id)",
                "method_end": "this.closeActionSnackbar()",
                "range": [
                    566,
                    572
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeFile",
                "method_begin": "removeFile(index)",
                "method_end": "this.files.splice(index, 1);",
                "range": [
                    572,
                    576
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openUpload",
                "method_begin": "openUpload(assignedUser, comment, docType)",
                "method_end": "this.selectedDocType = docType",
                "range": [
                    576,
                    585
                ],
                "parameters": [
                    "assignedUser",
                    "comment",
                    "docType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortLogList",
                "method_begin": "sortLogList(index, sortField, sortDirection)",
                "method_end": "this.getApiLogs()",
                "range": [
                    585,
                    600
                ],
                "parameters": [
                    "index",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortDocumentList",
                "method_begin": "sortDocumentList(page, searchText, filter, sortField, sortDirection)",
                "method_end": "this.getGlobalDocumentList(page, searchText, filter, sortField, sortDirection)",
                "range": [
                    611,
                    627
                ],
                "parameters": [
                    "page",
                    "searchText",
                    "filter",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSortField",
                "method_begin": "getSortField(filter)",
                "method_end": "return { sortField: 'exportedAt', sortDirection: -1 }",
                "range": [
                    643,
                    674
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetFiles",
                "method_begin": "resetFiles()",
                "method_end": "this.fileSize = 0",
                "range": [
                    674,
                    685
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "expandUploadedFolder",
                "method_begin": "expandUploadedFolder(index)",
                "method_end": "this.uploadedFolders[index].expanded = !this.uploadedFolders[index].expanded;",
                "range": [
                    685,
                    689
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "cancelUpload()",
                "method_end": "this.abortUpload = true",
                "range": [
                    689,
                    698
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupUploadResponse",
                "method_begin": "setupUploadResponse(uploadData)",
                "method_end": "this.uploadedFiles = temp;",
                "range": [
                    698,
                    741
                ],
                "parameters": [
                    "uploadData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadFiles",
                "method_begin": "uploadFiles(configId)",
                "method_end": "}))",
                "range": [
                    747,
                    804
                ],
                "parameters": [
                    "configId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.setupUploadResponse(response.data",
                    "//this.saveProgress",
                    "/*this.pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getApiKey",
                "method_begin": "getApiKey()",
                "method_end": "}))",
                "range": [
                    804,
                    835
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "compareFiles",
                "method_begin": "compareFiles()",
                "method_end": "}))",
                "range": [
                    955,
                    983
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadOriginalDoc",
                "method_begin": "downloadOriginalDoc(documentId)",
                "method_end": "}))",
                "range": [
                    995,
                    1012
                ],
                "parameters": [
                    "documentId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBucketDetails",
                "method_begin": "//Get bucket detail",
                "method_end": "}))",
                "range": [
                    1012,
                    1077
                ],
                "parameters": [
                    "batchId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getGlobalDocumentList",
                "method_begin": "//Get document list for super admin",
                "method_end": "}))",
                "range": [
                    1077,
                    1137
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFailedDocuments",
                "method_begin": "getFailedDocuments(page, searchText)",
                "method_end": "}))",
                "range": [
                    1137,
                    1178
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentListIntervals",
                "method_begin": "getDocumentListIntervals(page, searchText)",
                "method_end": "}))",
                "range": [
                    1188,
                    1224
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//}",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getApiLogs",
                "method_begin": "getApiLogs(showProgress)",
                "method_end": "}))",
                "range": [
                    1230,
                    1271
                ],
                "parameters": [
                    "showProgress"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchList",
                "method_begin": "getBatchList(showProgress)",
                "method_end": "}))",
                "range": [
                    1271,
                    1297
                ],
                "parameters": [
                    "showProgress"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter",
                "method_begin": "getListForFilter()",
                "method_end": "}))",
                "range": [
                    1297,
                    1321
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/markLogStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/reportsStore.js": {
        "method_details_": [
            {
                "method_name": "setDateRange",
                "method_begin": "setDateRange(ranges)",
                "method_end": "this.endDate = Moment(ranges.selection.endDate).format('DD-MMM-YYYY')",
                "range": [
                    42,
                    48
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/reportsStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    48,
                    52
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/reportsStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getReports",
                "method_begin": "getReports(refresh)",
                "method_end": "}))",
                "range": [
                    52,
                    74
                ],
                "parameters": [
                    "refresh"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/reportsStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js": {
        "method_details_": [
            {
                "method_name": "setDateRange",
                "method_begin": "setDateRange(ranges)",
                "method_end": "this.endDate = Moment(ranges.selection.endDate).format('DD-MMM-YYYY')",
                "range": [
                    355,
                    361
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleSelectAll",
                "method_begin": "handleSelectAll(value)",
                "method_end": "this.openActionSnackbar = value;",
                "range": [
                    424,
                    430
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    430,
                    434
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetSelectedDocuments",
                "method_begin": "resetSelectedDocuments()",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(false);",
                "range": [
                    526,
                    533
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSelectedDocs",
                "method_begin": "setSelectedDocs(index, value)",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(value)",
                "range": [
                    533,
                    545
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeActionSnackbar",
                "method_begin": "closeActionSnackbar()",
                "method_end": "this.openActionSnackbar = false;",
                "range": [
                    545,
                    549
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocuments",
                "method_begin": "//File Actions - Export",
                "method_end": "this.exportXls(temp, filter)",
                "range": [
                    549,
                    561
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadBulkDocs",
                "method_begin": "//File Actions - Download",
                "method_end": "this.downloadOriginalDoc(temp, filter)",
                "range": [
                    561,
                    571
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadFile",
                "method_begin": "downloadFile(filename)",
                "method_end": "link.click();",
                "range": [
                    571,
                    577
                ],
                "parameters": [
                    "filename"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/downloads/"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportXls",
                "method_begin": "exportXls(exportedFromUpload, batchId, index)",
                "method_end": "}))",
                "range": [
                    577,
                    641
                ],
                "parameters": [
                    "exportedFromUpload",
                    "batchId",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//",
                    "//",
                    "//",
                    "//type:",
                    "//commonStore.handleOpenSnackBar(",
                    "//else",
                    "//commonStore.handleOpenSnackBar(response.message,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetMenuArray",
                "method_begin": "resetMenuArray()",
                "method_end": "this.menuArray = new Array(this.documentList.length).fill(false);",
                "range": [
                    641,
                    646
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMenu",
                "method_begin": "openMenu(e, index)",
                "method_end": "this.menuArray[index] = e.currentTarget",
                "range": [
                    646,
                    650
                ],
                "parameters": [
                    "e",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteMultipleDocs",
                "method_begin": "deleteMultipleDocs(docId, filter)",
                "method_end": "}))",
                "range": [
                    650,
                    683
                ],
                "parameters": [
                    "docId",
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSupervisorStats",
                "method_begin": "getSupervisorStats()",
                "method_end": "}))",
                "range": [
                    683,
                    702
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteFile",
                "method_begin": "deleteFile(id, fileName, type)",
                "method_end": "}))",
                "range": [
                    702,
                    767
                ],
                "parameters": [
                    "id",
                    "fileName",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*temp.map((x"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "triggerAiProcess",
                "method_begin": "triggerAiProcess()",
                "method_end": "}))",
                "range": [
                    767,
                    788
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCountData",
                "method_begin": "setCountData(countData)",
                "method_end": "this.countData = countData",
                "range": [
                    797,
                    801
                ],
                "parameters": [
                    "countData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUploadFiles",
                "method_begin": "setUploadFiles(files)",
                "method_end": "});",
                "range": [
                    801,
                    808
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileActions",
                "method_begin": "closeFileActions()",
                "method_end": "this.openFileActions = false;",
                "range": [
                    808,
                    812
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUploadDialog",
                "method_begin": "closeUploadDialog()",
                "method_end": "this.openUploadDialog = false;",
                "range": [
                    812,
                    816
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileAssignDialog",
                "method_begin": "closeFileAssignDialog()",
                "method_end": "userStore.closeDialog()",
                "range": [
                    816,
                    823
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openFileAssign",
                "method_begin": "openFileAssign(id)",
                "method_end": "this.closeActionSnackbar()",
                "range": [
                    823,
                    829
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeFile",
                "method_begin": "removeFile(index)",
                "method_end": "this.files.splice(index, 1);",
                "range": [
                    829,
                    833
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openUpload",
                "method_begin": "openUpload(assignedUser, comment, docType)",
                "method_end": "this.selectedDocType = docType",
                "range": [
                    833,
                    842
                ],
                "parameters": [
                    "assignedUser",
                    "comment",
                    "docType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortDocumentList",
                "method_begin": "sortDocumentList(page, searchText, filter, sortField, sortDirection)",
                "method_end": "this.getGlobalDocumentList(page, searchText, filter, sortField, sortDirection)",
                "range": [
                    842,
                    858
                ],
                "parameters": [
                    "page",
                    "searchText",
                    "filter",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSortField",
                "method_begin": "getSortField(filter)",
                "method_end": "return { sortField: 'exportedAt', sortDirection: -1 }",
                "range": [
                    892,
                    922
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetFiles",
                "method_begin": "resetFiles()",
                "method_end": "this.fileSize = 0",
                "range": [
                    922,
                    933
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "expandUploadedFolder",
                "method_begin": "expandUploadedFolder(index)",
                "method_end": "this.uploadedFolders[index].expanded = !this.uploadedFolders[index].expanded;",
                "range": [
                    933,
                    937
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "cancelUpload()",
                "method_end": "this.resetFiles()",
                "range": [
                    937,
                    947
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupUploadResponse",
                "method_begin": "setupUploadResponse(uploadData)",
                "method_end": "this.uploadedFiles = temp;",
                "range": [
                    947,
                    990
                ],
                "parameters": [
                    "uploadData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadFiles",
                "method_begin": "uploadFiles(configId)",
                "method_end": "}))",
                "range": [
                    996,
                    1070
                ],
                "parameters": [
                    "configId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//this.setupUploadResponse(response.data",
                    "//this.uploadProgress",
                    "/*this.pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "compareFiles",
                "method_begin": "compareFiles()",
                "method_end": "}))",
                "range": [
                    1070,
                    1097
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCurlRequest",
                "method_begin": "getCurlRequest(id)",
                "method_end": "}))",
                "range": [
                    1097,
                    1130
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadOriginalDoc",
                "method_begin": "downloadOriginalDoc(documentId)",
                "method_end": "}))",
                "range": [
                    1142,
                    1163
                ],
                "parameters": [
                    "documentId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBucketDetails",
                "method_begin": "//Get bucket detail",
                "method_end": "}))",
                "range": [
                    1163,
                    1228
                ],
                "parameters": [
                    "batchId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getGlobalDocumentList",
                "method_begin": "//Get document list for super admin",
                "method_end": "}))",
                "range": [
                    1228,
                    1294
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshDocList",
                "method_begin": "refreshDocList(page, searchText)",
                "method_end": "}))",
                "range": [
                    1294,
                    1354
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSettings",
                "method_begin": "getSettings()",
                "method_end": "}))",
                "range": [
                    1354,
                    1373
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentListIntervals",
                "method_begin": "getDocumentListIntervals(page, searchText)",
                "method_end": "}))",
                "range": [
                    1383,
                    1419
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//}",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchList",
                "method_begin": "getBatchList(showProgress)",
                "method_end": "}))",
                "range": [
                    1434,
                    1458
                ],
                "parameters": [
                    "showProgress"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshBatchList",
                "method_begin": "refreshBatchList()",
                "method_end": "}))",
                "range": [
                    1458,
                    1481
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter",
                "method_begin": "getListForFilter()",
                "method_end": "}))",
                "range": [
                    1481,
                    1505
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter1",
                "method_begin": "getListForFilter1()",
                "method_end": "}))",
                "range": [
                    1613,
                    1648
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getLatestBatch",
                "method_begin": "getLatestBatch()",
                "method_end": "}))",
                "range": [
                    1648,
                    1679
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startQc",
                "method_begin": "startQc(type, batchId, docId, threshold)",
                "method_end": "}))",
                "range": [
                    1679,
                    1704
                ],
                "parameters": [
                    "type",
                    "batchId",
                    "docId",
                    "threshold"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/supervisorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/teamStore.js": {
        "method_details_": [
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    175,
                    180
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/teamStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js": {
        "method_details_": [
            {
                "method_name": "updateField",
                "method_begin": "updateField(value, index, fieldId, type)",
                "method_end": "this.updatedValues.push(this.currentField)",
                "range": [
                    158,
                    167
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updatePosoField",
                "method_begin": "updatePosoField(value, index, fieldId, coordinates)",
                "method_end": "this.updateTabularField(value, index, fieldId, coordinates)",
                "range": [
                    208,
                    215
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "coordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateNonTabularField",
                "method_begin": "updateNonTabularField(value, index, fieldId, coordinates)",
                "method_end": "this.updatedNonTabularFields.push(temp);",
                "range": [
                    215,
                    232
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "coordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateTabularField",
                "method_begin": "updateTabularField(value, index, fieldId, coordinates)",
                "method_end": "this.updatedTabularFields.push(temp);",
                "range": [
                    232,
                    248
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "coordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateSnippedField",
                "method_begin": "updateSnippedField(value, newCoordinates)",
                "method_end": "this.updatedValues.push(this.currentField)",
                "range": [
                    248,
                    268
                ],
                "parameters": [
                    "value",
                    "newCoordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateSnippedFieldPoso",
                "method_begin": "updateSnippedFieldPoso(value, newCoordinates)",
                "method_end": "this.updateTabularField(value, index, this.currentField._id, newCoordinates)",
                "range": [
                    268,
                    287
                ],
                "parameters": [
                    "value",
                    "newCoordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetCurrentField",
                "method_begin": "resetCurrentField()",
                "method_end": "this.currentIndex = -1",
                "range": [
                    287,
                    300
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "undoChanges",
                "method_begin": "undoChanges()",
                "method_end": "this.updatedValues.splice(i, 1);*/",
                "range": [
                    300,
                    317
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*this.currentPage.nonTabularContent[this.currentIndex].editedValue"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "undoPosoChanges",
                "method_begin": "undoPosoChanges()",
                "method_end": "this.updatedTabularFields.splice(i, 1);",
                "range": [
                    317,
                    346
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentField",
                "method_begin": "setCurrentField(item, index, type)",
                "method_end": "//    this.currentField.data_type = this.globalMapping.mapping[ind].dataType",
                "range": [
                    346,
                    358
                ],
                "parameters": [
                    "item",
                    "index",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTableField",
                "method_begin": "setTableField(item, index, cellIndex)",
                "method_end": "this.tableField.index = cellIndex;",
                "range": [
                    358,
                    366
                ],
                "parameters": [
                    "item",
                    "index",
                    "cellIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "editCurrentFieldValue",
                "method_begin": "editCurrentFieldValue(text)",
                "method_end": "//this.updateDocument(false,true)",
                "range": [
                    366,
                    371
                ],
                "parameters": [
                    "text"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.updateDocument(false,true"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPosition",
                "method_begin": "setPosition(top, left)",
                "method_end": "this.currentField.style.left = left;",
                "range": [
                    371,
                    376
                ],
                "parameters": [
                    "top",
                    "left"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentTopValue",
                "method_begin": "setCurrentTopValue()",
                "method_end": "this.currentTopValue = this.currentField.style.top",
                "range": [
                    376,
                    380
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "moveTopPosition",
                "method_begin": "moveTopPosition(top)",
                "method_end": "this.currentField.style.top = parseInt(this.currentTopValue) + parseInt(top) + 'px';",
                "range": [
                    380,
                    384
                ],
                "parameters": [
                    "top"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setFieldMeasure",
                "method_begin": "setFieldMeasure(h, w, display)",
                "method_end": "this.currentField.style = { height: h, width: w, display: display }",
                "range": [
                    384,
                    388
                ],
                "parameters": [
                    "h",
                    "w",
                    "display"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentPage",
                "method_begin": "setCurrentPage(index)",
                "method_end": "this.currentPage.disableEdit = true",
                "range": [
                    388,
                    511
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentImagePoSo",
                "method_begin": "setCurrentImagePoSo(currentPage, pageNo)",
                "method_end": "this.resetCurrentField()",
                "range": [
                    511,
                    520
                ],
                "parameters": [
                    "currentPage",
                    "pageNo"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocumentDrawer",
                "method_begin": "openDocumentDrawer()",
                "method_end": "this.openDrawer = true;",
                "range": [
                    520,
                    524
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeDocumentDrawer",
                "method_begin": "closeDocumentDrawer()",
                "method_end": "this.openDrawer = false;",
                "range": [
                    524,
                    528
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupSavePayload",
                "method_begin": "setupSavePayload(finalSubmit)",
                "method_end": "return payload;",
                "range": [
                    528,
                    610
                ],
                "parameters": [
                    "finalSubmit"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*for",
                    "/>",
                    "//",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setProgressIcon",
                "method_begin": "setProgressIcon(index)",
                "method_end": "this.currentPage.nonTabularContent[index].progressIcon = <ReactSVG src=\"\" />",
                "range": [
                    610,
                    614
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteFields",
                "method_begin": "deleteFields(id, index, e)",
                "method_end": "}))",
                "range": [
                    614,
                    653
                ],
                "parameters": [
                    "id",
                    "index",
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//Make"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getAllPages",
                "method_begin": "getAllPages(id, fileName)",
                "method_end": "}))",
                "range": [
                    653,
                    680
                ],
                "parameters": [
                    "id",
                    "fileName"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateDocument",
                "method_begin": "updateDocument(finalSubmit, next)",
                "method_end": "}))",
                "range": [
                    802,
                    920
                ],
                "parameters": [
                    "finalSubmit",
                    "next"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//Points",
                    "/*",
                    "//",
                    "//this.inProgress"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setProgress",
                "method_begin": "setProgress()",
                "method_end": "this.inProgress = true",
                "range": [
                    920,
                    926
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTrainingDetails",
                "method_begin": "getTrainingDetails(docId)",
                "method_end": "}))",
                "range": [
                    926,
                    945
                ],
                "parameters": [
                    "docId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getMappingList",
                "method_begin": "getMappingList()",
                "method_end": "}))",
                "range": [
                    1191,
                    1219
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/tempTrainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//else",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js": {
        "method_details_": [
            {
                "method_name": "selectAreaUpdate",
                "method_begin": "/*@computed get getAspectRatioBack() {",
                "method_end": "this.selectionArea.h = rect.h;",
                "range": [
                    78,
                    93
                ],
                "parameters": [
                    "rect"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startDrawPoint",
                "method_begin": "startDrawPoint(x, y, w, h, cropSize, coords, size, editing, highlightColumns, highlightRows, cellColor)",
                "method_end": "//this.focusOnPoint.zoom = 1;",
                "range": [
                    120,
                    141
                ],
                "parameters": [
                    "x",
                    "y",
                    "w",
                    "h",
                    "cropSize",
                    "coords",
                    "size",
                    "editing",
                    "highlightColumns",
                    "highlightRows",
                    "cellColor"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.focusOnPoint.zoom"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "eraseDrawPoint",
                "method_begin": "eraseDrawPoint()",
                "method_end": "this.focusOnPoint.points = []",
                "range": [
                    141,
                    150
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateCoordinates",
                "method_begin": "updateCoordinates(coordinates, imageContainerWidth, imageContainerHeight, type)",
                "method_end": "//  trainingStore.setCurrentFieldPosition(coordinates)",
                "range": [
                    157,
                    174
                ],
                "parameters": [
                    "coordinates",
                    "imageContainerWidth",
                    "imageContainerHeight",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "toggleFlip",
                "method_begin": "toggleFlip()",
                "method_end": "this.imageFacingSide = !this.imageFacingSide;",
                "range": [
                    174,
                    178
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "zoomIn",
                "method_begin": "zoomIn()",
                "method_end": "this.staticImageWidth = 400 * this.focusOnPoint.zoom",
                "range": [
                    178,
                    188
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//do"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "rotate",
                "method_begin": "rotate()",
                "method_end": "this.focusOnPoint.rotate = (90 + this.focusOnPoint.rotate) % 360",
                "range": [
                    188,
                    194
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetRotate",
                "method_begin": "resetRotate()",
                "method_end": "this.focusOnPoint.rotate = 0",
                "range": [
                    194,
                    198
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchSnipped",
                "method_begin": "fetchSnipped(imageURL, cordinates, type)",
                "method_end": "}))",
                "range": [
                    198,
                    237
                ],
                "parameters": [
                    "imageURL",
                    "cordinates",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchSnippedPoso",
                "method_begin": "fetchSnippedPoso(imageURL, cordinates)",
                "method_end": "}))",
                "range": [
                    237,
                    252
                ],
                "parameters": [
                    "imageURL",
                    "cordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "zoomOut",
                "method_begin": "zoomOut()",
                "method_end": "this.staticImageWidth -= defaultImageWidth",
                "range": [
                    252,
                    260
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fitPage",
                "method_begin": "fitPage()",
                "method_end": "this.staticImageWidth = defaultImageWidth",
                "range": [
                    260,
                    265
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setNewCoordinates",
                "method_begin": "setNewCoordinates(coordinates)",
                "method_end": "trainingStore.setCurrentPosition({ x: coordinates[0], w: coordinates[1], y: coordinates[2], h: coordinates[3] })",
                "range": [
                    265,
                    270
                ],
                "parameters": [
                    "coordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingImageStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js": {
        "method_details_": [
            {
                "method_name": "handleSelectAll",
                "method_begin": "handleSelectAll(value)",
                "method_end": "this.openActionSnackbar = value;",
                "range": [
                    55,
                    61
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    61,
                    65
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetSelectedDocuments",
                "method_begin": "resetSelectedDocuments()",
                "method_end": "this.selectedDocs = new Array(this.trainingList.length).fill(false);",
                "range": [
                    65,
                    71
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSelectedDocs",
                "method_begin": "setSelectedDocs(index, value)",
                "method_end": "this.selectedDocs = new Array(this.trainingList.length).fill(value)",
                "range": [
                    71,
                    83
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeActionSnackbar",
                "method_begin": "closeActionSnackbar()",
                "method_end": "this.openActionSnackbar = false;",
                "range": [
                    83,
                    87
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocuments",
                "method_begin": "//File Actions - Export",
                "method_end": "this.exportXls(temp, filter)",
                "range": [
                    87,
                    97
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadBulkDocs",
                "method_begin": "//File Actions - Download",
                "method_end": "this.downloadOriginalDoc(temp, filter)",
                "range": [
                    97,
                    107
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportXls",
                "method_begin": "exportXls(docList, filter)",
                "method_end": "}))",
                "range": [
                    107,
                    134
                ],
                "parameters": [
                    "docList",
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/upload/downloadXls?downloadToken=${response.data.downloadToken}&fileName=${response.data.fileName}",
                    "//commonStore.handleOpenSnackBar(",
                    "//else",
                    "//commonStore.handleOpenSnackBar(response.message,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetMenuArray",
                "method_begin": "resetMenuArray()",
                "method_end": "this.menuArray = new Array(this.trainingList.length).fill(false);",
                "range": [
                    134,
                    138
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMenu",
                "method_begin": "openMenu(e, index)",
                "method_end": "this.menuArray[index] = e.currentTarget",
                "range": [
                    138,
                    142
                ],
                "parameters": [
                    "e",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteTrainings",
                "method_begin": "deleteTrainings()",
                "method_end": "}))",
                "range": [
                    142,
                    174
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "retrain",
                "method_begin": "retrain()",
                "method_end": "}))",
                "range": [
                    174,
                    217
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/*this.resetSelectedDocuments("
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "fetchDocumentList",
                "method_begin": "//Get document list",
                "method_end": "this.getTrainingList(filter)",
                "range": [
                    217,
                    235
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCountData",
                "method_begin": "setCountData(countData)",
                "method_end": "this.countData = countData",
                "range": [
                    239,
                    243
                ],
                "parameters": [
                    "countData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getFilteredDocuments",
                "method_begin": "//Get document list according to export/reviewed statuses",
                "method_end": "}))",
                "range": [
                    243,
                    274
                ],
                "parameters": [
                    "filter",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getPeriodicDocList",
                "method_begin": "getPeriodicDocList(filter)",
                "method_end": "}))",
                "range": [
                    274,
                    303
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getHomePageData",
                "method_begin": "getHomePageData(sortField, sortDirection)",
                "method_end": "}))",
                "range": [
                    303,
                    339
                ],
                "parameters": [
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileActions",
                "method_begin": "closeFileActions()",
                "method_end": "this.openFileActions = false;",
                "range": [
                    339,
                    343
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUploadDialog",
                "method_begin": "closeUploadDialog()",
                "method_end": "this.openUploadDialog = false;",
                "range": [
                    343,
                    347
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileAssignDialog",
                "method_begin": "closeFileAssignDialog()",
                "method_end": "userStore.closeDialog()",
                "range": [
                    347,
                    354
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openFileAssign",
                "method_begin": "openFileAssign(id)",
                "method_end": "this.closeActionSnackbar()",
                "range": [
                    354,
                    360
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeFile",
                "method_begin": "removeFile(index)",
                "method_end": "this.files.splice(index, 1);",
                "range": [
                    360,
                    364
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openUpload",
                "method_begin": "openUpload(assignedUser, comment, docType)",
                "method_end": "this.selectedDocType = docType",
                "range": [
                    364,
                    373
                ],
                "parameters": [
                    "assignedUser",
                    "comment",
                    "docType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortDocumentList",
                "method_begin": "sortDocumentList(page, searchText, filter, sortField, sortDirection)",
                "method_end": "this.getTrainingList(page, searchText, filter, sortField, sortDirection)",
                "range": [
                    373,
                    389
                ],
                "parameters": [
                    "page",
                    "searchText",
                    "filter",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSortField",
                "method_begin": "getSortField(filter)",
                "method_end": "return { sortField: 'exportedAt', sortDirection: -1 }",
                "range": [
                    389,
                    420
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetFiles",
                "method_begin": "resetFiles()",
                "method_end": "this.uploadedFolders = []",
                "range": [
                    420,
                    427
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "expandUploadedFolder",
                "method_begin": "expandUploadedFolder(index)",
                "method_end": "this.uploadedFolders[index].expanded = !this.uploadedFolders[index].expanded;",
                "range": [
                    427,
                    431
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "cancelUpload()",
                "method_end": "this.closeUploadDialog()",
                "range": [
                    431,
                    438
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupUploadResponse",
                "method_begin": "setupUploadResponse(uploadData)",
                "method_end": "this.uploadedFiles = temp;",
                "range": [
                    438,
                    481
                ],
                "parameters": [
                    "uploadData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadFiles",
                "method_begin": "uploadFiles(files)",
                "method_end": "}))",
                "range": [
                    481,
                    524
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.uploadProgress",
                    "/*this.pageNo",
                    "//commonStore.handleOpenSnackBar(response.message,",
                    "//commonStore.handleOpenSnackBar(response.message,",
                    "//this.errors"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchDocuments",
                "method_begin": "searchDocuments(searchText, filter)",
                "method_end": "this.getFilteredDocuments(filter)",
                "range": [
                    528,
                    541
                ],
                "parameters": [
                    "searchText",
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadOriginalDoc",
                "method_begin": "downloadOriginalDoc(documentId)",
                "method_end": "}))",
                "range": [
                    541,
                    562
                ],
                "parameters": [
                    "documentId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTrainingList",
                "method_begin": "//Get document list for super admin",
                "method_end": "}))",
                "range": [
                    562,
                    600
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//}",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTrainingListIntervals",
                "method_begin": "//Get document list for super admin",
                "method_end": "}))",
                "range": [
                    610,
                    648
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingListStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//}",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js": {
        "method_details_": [
            {
                "method_name": "updateField",
                "method_begin": "updateField(value, index, fieldId, type)",
                "method_end": "this.updatedValues.push(this.currentField)",
                "range": [
                    764,
                    773
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateQcField",
                "method_begin": "updateQcField(value, index, fieldId, qcErrorType, field)",
                "method_end": "this.updatedValues.push(temp);",
                "range": [
                    773,
                    797
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "qcErrorType",
                    "field"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupUpdatePayload",
                "method_begin": "setupUpdatePayload(finalSubmit)",
                "method_end": "return payload;",
                "range": [
                    797,
                    814
                ],
                "parameters": [
                    "finalSubmit"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateForm",
                "method_begin": "updateForm()",
                "method_end": "}))",
                "range": [
                    823,
                    869
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.inProgress"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getNextBatch",
                "method_begin": "getNextBatch(from, filters)",
                "method_end": "}))",
                "range": [
                    869,
                    899
                ],
                "parameters": [
                    "from",
                    "filters"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.inProgress"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getNextFile",
                "method_begin": "getNextFile(from, filters)",
                "method_end": "}))",
                "range": [
                    899,
                    929
                ],
                "parameters": [
                    "from",
                    "filters"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.inProgress"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updatePosoField",
                "method_begin": "updatePosoField(value, index, fieldId, coordinates)",
                "method_end": "this.updateTabularField(value, index, fieldId, coordinates)",
                "range": [
                    1097,
                    1104
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "coordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateNonTabularField",
                "method_begin": "updateNonTabularField(value, index, fieldId, coordinates)",
                "method_end": "this.updatedNonTabularFields.push(temp);",
                "range": [
                    1104,
                    1121
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "coordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateTabularField",
                "method_begin": "updateTabularField(value, index, fieldId, coordinates)",
                "method_end": "this.updatedTabularFields.push(temp);",
                "range": [
                    1121,
                    1137
                ],
                "parameters": [
                    "value",
                    "index",
                    "fieldId",
                    "coordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateSnippedField",
                "method_begin": "updateSnippedField(value, newCoordinates, type)",
                "method_end": "this.updatedValues.push(this.currentField)",
                "range": [
                    1137,
                    1164
                ],
                "parameters": [
                    "value",
                    "newCoordinates",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//Changes",
                    "//this.currentPage.nonTabularContent[indexInPage]["
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateSnippedFieldPoso",
                "method_begin": "updateSnippedFieldPoso(value, newCoordinates)",
                "method_end": "this.updateTabularField(value, index, this.currentField._id, newCoordinates)",
                "range": [
                    1164,
                    1183
                ],
                "parameters": [
                    "value",
                    "newCoordinates"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetCurrentField",
                "method_begin": "resetCurrentField(from)",
                "method_end": "this.currentIndex = -1",
                "range": [
                    1183,
                    1204
                ],
                "parameters": [
                    "from"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "undoChanges",
                "method_begin": "undoChanges()",
                "method_end": "this.updatedValues.splice(i, 1);*/",
                "range": [
                    1204,
                    1221
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*this.currentPage.nonTabularContent[this.currentIndex].editedValue"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "undoPosoChanges",
                "method_begin": "undoPosoChanges()",
                "method_end": "this.updatedTabularFields.splice(i, 1);",
                "range": [
                    1221,
                    1250
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentField",
                "method_begin": "setCurrentField(item, index, type)",
                "method_end": "//    this.currentField.data_type = this.globalMapping.mapping[ind].dataType",
                "range": [
                    1250,
                    1262
                ],
                "parameters": [
                    "item",
                    "index",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setTableField",
                "method_begin": "setTableField(item, index, cellIndex)",
                "method_end": "this.tableField.index = cellIndex;",
                "range": [
                    1262,
                    1270
                ],
                "parameters": [
                    "item",
                    "index",
                    "cellIndex"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "editCurrentFieldValue",
                "method_begin": "editCurrentFieldValue(text)",
                "method_end": "//this.updateDocument(false,true)",
                "range": [
                    1270,
                    1275
                ],
                "parameters": [
                    "text"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.updateDocument(false,true"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPosition",
                "method_begin": "setPosition(top, left)",
                "method_end": "this.currentField.style.left = left;",
                "range": [
                    1275,
                    1280
                ],
                "parameters": [
                    "top",
                    "left"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentTopValue",
                "method_begin": "setCurrentTopValue()",
                "method_end": "this.currentTopValue = this.currentField.style.top",
                "range": [
                    1280,
                    1284
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "moveTopPosition",
                "method_begin": "moveTopPosition(top)",
                "method_end": "this.currentField.style.top = parseInt(this.currentTopValue) + parseInt(top) + 'px';",
                "range": [
                    1284,
                    1288
                ],
                "parameters": [
                    "top"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setFieldMeasure",
                "method_begin": "setFieldMeasure(h, w, display)",
                "method_end": "this.currentField.style = { height: h, width: w, display: display }",
                "range": [
                    1288,
                    1292
                ],
                "parameters": [
                    "h",
                    "w",
                    "display"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentPage",
                "method_begin": "setCurrentPage(index)",
                "method_end": "this.currentPage.disableEdit = true",
                "range": [
                    1292,
                    1307
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCurrentImagePoSo",
                "method_begin": "setCurrentImagePoSo(currentPage, pageNo)",
                "method_end": "this.resetCurrentField()",
                "range": [
                    1307,
                    1316
                ],
                "parameters": [
                    "currentPage",
                    "pageNo"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openDocumentDrawer",
                "method_begin": "openDocumentDrawer()",
                "method_end": "this.openDrawer = true;",
                "range": [
                    1316,
                    1320
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeDocumentDrawer",
                "method_begin": "closeDocumentDrawer()",
                "method_end": "this.openDrawer = false;",
                "range": [
                    1320,
                    1324
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupSavePayload",
                "method_begin": "setupSavePayload(finalSubmit)",
                "method_end": "return payload;",
                "range": [
                    1324,
                    1408
                ],
                "parameters": [
                    "finalSubmit"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*for",
                    "/>",
                    "//",
                    "//",
                    "//",
                    "//",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setProgressIcon",
                "method_begin": "setProgressIcon(index)",
                "method_end": "this.currentPage.nonTabularContent[index].progressIcon = <ReactSVG src=\"\" />",
                "range": [
                    1408,
                    1412
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/>"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteFields",
                "method_begin": "deleteFields(id, index, e)",
                "method_end": "}))",
                "range": [
                    1412,
                    1451
                ],
                "parameters": [
                    "id",
                    "index",
                    "e"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//Make"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "reviewClassification",
                "method_begin": "reviewClassification(data, qcType)",
                "method_end": "}))",
                "range": [
                    1451,
                    1478
                ],
                "parameters": [
                    "data",
                    "qcType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "updateDocument",
                "method_begin": "updateDocument(finalSubmit, next, qcType, forced, reason)",
                "method_end": "}))",
                "range": [
                    2012,
                    2415
                ],
                "parameters": [
                    "finalSubmit",
                    "next",
                    "qcType",
                    "forced",
                    "reason"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//ParseInt",
                    "//ParseInt",
                    "//ParseInt",
                    "/*",
                    "//",
                    "//",
                    "//",
                    "//Points",
                    "/*",
                    "//",
                    "/DD/YYYY",
                    "/DD/YYYY",
                    "//",
                    "//",
                    "//Points",
                    "/*",
                    "//",
                    "/DD/YYYY",
                    "/DD/YYYY",
                    "//",
                    "//",
                    "//Points",
                    "/*",
                    "//",
                    "/DD/YYYY",
                    "/DD/YYYY",
                    "//this.setupTrainingData(response",
                    "//",
                    "//this.inProgress"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setProgress",
                "method_begin": "setProgress()",
                "method_end": "this.inProgress = true",
                "range": [
                    2422,
                    2428
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getTrainingDetails",
                "method_begin": "getTrainingDetails(docId, pageNo, qcType)",
                "method_end": "}))",
                "range": [
                    2442,
                    2468
                ],
                "parameters": [
                    "docId",
                    "pageNo",
                    "qcType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshPageDetails",
                "method_begin": "refreshPageDetails(docId)",
                "method_end": "}))",
                "range": [
                    2468,
                    2493
                ],
                "parameters": [
                    "docId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getMappingList",
                "method_begin": "getMappingList()",
                "method_end": "}))",
                "range": [
                    3607,
                    3634
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//else",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "hardResetClassification",
                "method_begin": "hardResetClassification(idpId)",
                "method_end": "}))",
                "range": [
                    3634,
                    3668
                ],
                "parameters": [
                    "idpId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.refreshPages(idpId"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js": {
        "method_details_": [
            {
                "method_name": "setDateRange",
                "method_begin": "setDateRange(ranges)",
                "method_end": "this.endDate = Moment(ranges.selection.endDate).format('DD-MMM-YYYY')",
                "range": [
                    346,
                    352
                ],
                "parameters": [
                    "ranges"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleSelectAll",
                "method_begin": "handleSelectAll(value)",
                "method_end": "this.openActionSnackbar = value;",
                "range": [
                    411,
                    417
                ],
                "parameters": [
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    417,
                    421
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetSelectedDocuments",
                "method_begin": "resetSelectedDocuments()",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(false);",
                "range": [
                    518,
                    525
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setSelectedDocs",
                "method_begin": "setSelectedDocs(index, value)",
                "method_end": "this.selectedDocs = new Array(this.documentList.length).fill(value)",
                "range": [
                    525,
                    537
                ],
                "parameters": [
                    "index",
                    "value"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeActionSnackbar",
                "method_begin": "closeActionSnackbar()",
                "method_end": "this.openActionSnackbar = false;",
                "range": [
                    537,
                    541
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportDocuments",
                "method_begin": "//File Actions - Export",
                "method_end": "this.exportXls(temp, filter)",
                "range": [
                    541,
                    553
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadBulkDocs",
                "method_begin": "//File Actions - Download",
                "method_end": "this.downloadOriginalDoc(temp, filter)",
                "range": [
                    553,
                    563
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "exportXls",
                "method_begin": "exportXls(exportedFromUpload, batchId, index)",
                "method_end": "}))",
                "range": [
                    577,
                    644
                ],
                "parameters": [
                    "exportedFromUpload",
                    "batchId",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*",
                    "//",
                    "//",
                    "//",
                    "//type:",
                    "//commonStore.handleOpenSnackBar(",
                    "//else",
                    "//commonStore.handleOpenSnackBar(response.message,"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetMenuArray",
                "method_begin": "resetMenuArray()",
                "method_end": "this.menuArray = new Array(this.documentList.length).fill(false);",
                "range": [
                    644,
                    649
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openMenu",
                "method_begin": "openMenu(e, index)",
                "method_end": "this.menuArray[index] = e.currentTarget",
                "range": [
                    649,
                    653
                ],
                "parameters": [
                    "e",
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteMultipleDocs",
                "method_begin": "deleteMultipleDocs(docId, filter)",
                "method_end": "}))",
                "range": [
                    653,
                    686
                ],
                "parameters": [
                    "docId",
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteFile",
                "method_begin": "deleteFile(id, fileName, type)",
                "method_end": "}))",
                "range": [
                    686,
                    750
                ],
                "parameters": [
                    "id",
                    "fileName",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.refreshBatchDetail(",
                    "/*temp.map((x"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "triggerAiProcess",
                "method_begin": "triggerAiProcess()",
                "method_end": "}))",
                "range": [
                    750,
                    771
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setCountData",
                "method_begin": "setCountData(countData)",
                "method_end": "this.countData = countData",
                "range": [
                    780,
                    784
                ],
                "parameters": [
                    "countData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setUploadFiles",
                "method_begin": "setUploadFiles(files)",
                "method_end": "});",
                "range": [
                    784,
                    791
                ],
                "parameters": [
                    "files"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileActions",
                "method_begin": "closeFileActions()",
                "method_end": "this.openFileActions = false;",
                "range": [
                    791,
                    795
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeUploadDialog",
                "method_begin": "closeUploadDialog()",
                "method_end": "this.openUploadDialog = false;",
                "range": [
                    795,
                    799
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "closeFileAssignDialog",
                "method_begin": "closeFileAssignDialog()",
                "method_end": "userStore.closeDialog()",
                "range": [
                    799,
                    806
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openFileAssign",
                "method_begin": "openFileAssign(id)",
                "method_end": "this.closeActionSnackbar()",
                "range": [
                    806,
                    812
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "removeFile",
                "method_begin": "removeFile(index)",
                "method_end": "this.files.splice(index, 1);",
                "range": [
                    812,
                    816
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "openUpload",
                "method_begin": "openUpload(assignedUser, comment, docType)",
                "method_end": "this.selectedDocType = docType",
                "range": [
                    816,
                    825
                ],
                "parameters": [
                    "assignedUser",
                    "comment",
                    "docType"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "sortDocumentList",
                "method_begin": "sortDocumentList(page, searchText, filter, sortField, sortDirection)",
                "method_end": "this.getGlobalDocumentList(page, searchText, filter, sortField, sortDirection)",
                "range": [
                    825,
                    841
                ],
                "parameters": [
                    "page",
                    "searchText",
                    "filter",
                    "sortField",
                    "sortDirection"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSortField",
                "method_begin": "getSortField(filter)",
                "method_end": "return { sortField: 'exportedAt', sortDirection: -1 }",
                "range": [
                    865,
                    895
                ],
                "parameters": [
                    "filter"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetFiles",
                "method_begin": "resetFiles()",
                "method_end": "this.fileSize = 0",
                "range": [
                    895,
                    906
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "expandUploadedFolder",
                "method_begin": "expandUploadedFolder(index)",
                "method_end": "this.uploadedFolders[index].expanded = !this.uploadedFolders[index].expanded;",
                "range": [
                    906,
                    910
                ],
                "parameters": [
                    "index"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "cancelUpload",
                "method_begin": "cancelUpload()",
                "method_end": "this.resetFiles()",
                "range": [
                    910,
                    920
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "setupUploadResponse",
                "method_begin": "setupUploadResponse(uploadData)",
                "method_end": "this.uploadedFiles = temp;",
                "range": [
                    920,
                    963
                ],
                "parameters": [
                    "uploadData"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "uploadFiles",
                "method_begin": "uploadFiles(configId)",
                "method_end": "}))",
                "range": [
                    969,
                    1043
                ],
                "parameters": [
                    "configId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//this.setupUploadResponse(response.data",
                    "//this.uploadProgress",
                    "/*this.pageNo"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "compareFiles",
                "method_begin": "compareFiles()",
                "method_end": "}))",
                "range": [
                    1043,
                    1070
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getCurlRequest",
                "method_begin": "getCurlRequest(id)",
                "method_end": "}))",
                "range": [
                    1070,
                    1102
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "downloadOriginalDoc",
                "method_begin": "downloadOriginalDoc(documentId)",
                "method_end": "}))",
                "range": [
                    1114,
                    1135
                ],
                "parameters": [
                    "documentId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBucketDetails",
                "method_begin": "//Get bucket detail",
                "method_end": "}))",
                "range": [
                    1135,
                    1200
                ],
                "parameters": [
                    "batchId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getGlobalDocumentListOld",
                "method_begin": "//Get document list for super admin",
                "method_end": "}))",
                "range": [
                    1200,
                    1265
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getGlobalDocumentList",
                "method_begin": "getGlobalDocumentList(page, searchText)",
                "method_end": "}))",
                "range": [
                    1284,
                    1353
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//if",
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshDocList",
                "method_begin": "refreshDocList(page, searchText)",
                "method_end": "}))",
                "range": [
                    1353,
                    1413
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getSettings",
                "method_begin": "getSettings()",
                "method_end": "}))",
                "range": [
                    1413,
                    1432
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentListIntervals",
                "method_begin": "getDocumentListIntervals(page, searchText)",
                "method_end": "}))",
                "range": [
                    1442,
                    1478
                ],
                "parameters": [
                    "page",
                    "searchText"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "//",
                    "//}",
                    "/*"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getBatchList",
                "method_begin": "getBatchList(showProgress)",
                "method_end": "}))",
                "range": [
                    1493,
                    1517
                ],
                "parameters": [
                    "showProgress"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "refreshBatchList",
                "method_begin": "refreshBatchList()",
                "method_end": "}))",
                "range": [
                    1517,
                    1540
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter",
                "method_begin": "getListForFilter()",
                "method_end": "}))",
                "range": [
                    1540,
                    1564
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getListForFilter1",
                "method_begin": "getListForFilter1()",
                "method_end": "}))",
                "range": [
                    1676,
                    1711
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getLatestBatch",
                "method_begin": "getLatestBatch()",
                "method_end": "}))",
                "range": [
                    1711,
                    1742
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "startQc",
                "method_begin": "startQc(type, batchId, docId, threshold)",
                "method_end": "}))",
                "range": [
                    1742,
                    1767
                ],
                "parameters": [
                    "type",
                    "batchId",
                    "docId",
                    "threshold"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/trainingUploadStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/userStore.js": {
        "method_details_": [
            {
                "method_name": "goToLogin",
                "method_begin": "goToLogin()",
                "method_end": "this.removeLocalStorage()",
                "range": [
                    47,
                    55
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/userStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "login",
                "method_begin": "login(email, password, captcha)",
                "method_end": ".finally(action(() => { this.inProgress = false; }));",
                "range": [
                    65,
                    110
                ],
                "parameters": [
                    "email",
                    "password",
                    "captcha"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/userStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.isLocalTemplatePresent",
                    "//throw"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "forgotPassword",
                "method_begin": "forgotPassword(email)",
                "method_end": ".finally(action(() => { this.inProgress = false; }));",
                "range": [
                    110,
                    138
                ],
                "parameters": [
                    "email"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/userStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//throw"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "resetForgotPassword",
                "method_begin": "resetForgotPassword(token, password)",
                "method_end": ".finally(action(() => { this.inProgress = false; }));",
                "range": [
                    155,
                    187
                ],
                "parameters": [
                    "token",
                    "password"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/userStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//throw"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "logout",
                "method_begin": "logout()",
                "method_end": "}));",
                "range": [
                    187,
                    211
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/userStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleOpenSnackBar",
                "method_begin": "handleOpenSnackBar(message, type)",
                "method_end": "this.snackbarOptions.type = type;",
                "range": [
                    211,
                    216
                ],
                "parameters": [
                    "message",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/userStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "handleCloseSnackBar",
                "method_begin": "handleCloseSnackBar()",
                "method_end": "this.snackbarOptions.message = '';",
                "range": [
                    216,
                    221
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/userStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "requestExtension",
                "method_begin": "requestExtension(quota, trial)",
                "method_end": "}))",
                "range": [
                    221,
                    258
                ],
                "parameters": [
                    "quota",
                    "trial"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/userStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js": {
        "method_details_": [
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    51,
                    55
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentTypes",
                "method_begin": "getDocumentTypes()",
                "method_end": "}))",
                "range": [
                    266,
                    290
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createVendor",
                "method_begin": "createVendor(data)",
                "method_end": "}))",
                "range": [
                    369,
                    398
                ],
                "parameters": [
                    "data"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflow",
                "method_begin": "getWorkflow(id, imported)",
                "method_end": "}))",
                "range": [
                    492,
                    547
                ],
                "parameters": [
                    "id",
                    "imported"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.isValid",
                    "/S3"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflows",
                "method_begin": "getWorkflows()",
                "method_end": "}))",
                "range": [
                    551,
                    571
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getVendors",
                "method_begin": "getVendors(type)",
                "method_end": "}))",
                "range": [
                    571,
                    593
                ],
                "parameters": [
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getInitialVendors",
                "method_begin": "getInitialVendors(customerId, type)",
                "method_end": "}))",
                "range": [
                    593,
                    628
                ],
                "parameters": [
                    "customerId",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "searchVendors",
                "method_begin": "searchVendors(val, customerId, type)",
                "method_end": "}))",
                "range": [
                    628,
                    667
                ],
                "parameters": [
                    "val",
                    "customerId",
                    "type"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflowsForUser",
                "method_begin": "getWorkflowsForUser(user)",
                "method_end": "}))",
                "range": [
                    678,
                    701
                ],
                "parameters": [
                    "user"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getVendorsAfterDelete",
                "method_begin": "getVendorsAfterDelete()",
                "method_end": "}))",
                "range": [
                    701,
                    720
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteVendor",
                "method_begin": "deleteVendor(id)",
                "method_end": "}))",
                "range": [
                    720,
                    752
                ],
                "parameters": [
                    "id"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/vendorStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/webhookStore.js": {
        "method_details_": [
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    196,
                    200
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/webhookStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/websocketStore.js": {
        "method_details_": [
            {
                "method_name": "connectWebsocket",
                "method_begin": "async connectWebsocket(accessToken, tenantId)",
                "method_end": "console.log(`ERROR - ${message}`);",
                "range": [
                    34,
                    211
                ],
                "parameters": [
                    "accessToken",
                    "tenantId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/websocketStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//",
                    "/tenants/${tenantId}/documents/aiStatus",
                    "//",
                    "/tenants/${tenantId}/training/aiStatus",
                    "//",
                    "/tenants/${tenantId}/superadmin",
                    "/home/admin-panel/ocr-statistics",
                    "/superadmin",
                    "/home/admin-panel/ocr-statistics",
                    "/admin/update",
                    "/home/admin-panel/ocr-statistics",
                    "/tenants/${tenantId}/batch/status",
                    "/home/document-api/page",
                    "/home/document-qc/page",
                    "/home/document-api/page",
                    "//",
                    "/home/document-qc/page",
                    "/home/training/creview",
                    "/home/training/review",
                    "/home/configuration/manage-users",
                    "/home/configuration/manage-teams",
                    "//If",
                    "/home/dashboard",
                    "//If",
                    "/home/upload-api/page",
                    "//If",
                    "//If",
                    "//If",
                    "/home/api-logs/page",
                    "//If",
                    "/home/document-api/page",
                    "//If",
                    "/home/document-qc/page",
                    "//If",
                    "/home/document-training/page",
                    "//Refresh",
                    "/batch",
                    "/batch",
                    "/ocr"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "disconnectWebsocket",
                "method_begin": "async disconnectWebsocket(tenantId)",
                "method_end": "console.log(`ERROR - ${message}`);",
                "range": [
                    211,
                    224
                ],
                "parameters": [
                    "tenantId"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/websocketStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/tenants/${tenantId}/batch/status",
                    "/tenants/${tenantId}/superadmin"
                ],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/workflowStore.js": {
        "method_details_": [
            {
                "method_name": "setPageNumber",
                "method_begin": "setPageNumber(num)",
                "method_end": "this.pageNo = num;",
                "range": [
                    46,
                    50
                ],
                "parameters": [
                    "num"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/workflowStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getDocumentTypes",
                "method_begin": "getDocumentTypes()",
                "method_end": "}))",
                "range": [
                    253,
                    277
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/workflowStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "createAdWorkflow",
                "method_begin": "createAdWorkflow()",
                "method_end": "}))",
                "range": [
                    277,
                    323
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/workflowStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "/S3"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflow",
                "method_begin": "getWorkflow(id, imported)",
                "method_end": "}))",
                "range": [
                    435,
                    490
                ],
                "parameters": [
                    "id",
                    "imported"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/workflowStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [
                    "//this.isValid",
                    "/S3"
                ],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflows",
                "method_begin": "getWorkflows()",
                "method_end": "}))",
                "range": [
                    494,
                    514
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/workflowStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflows1",
                "method_begin": "getWorkflows1()",
                "method_end": "}))",
                "range": [
                    514,
                    534
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/workflowStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflowsForUser",
                "method_begin": "getWorkflowsForUser(user)",
                "method_end": "}))",
                "range": [
                    545,
                    568
                ],
                "parameters": [
                    "user"
                ],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/workflowStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "getWorkflowsAfterDelete",
                "method_begin": "getWorkflowsAfterDelete()",
                "method_end": "}))",
                "range": [
                    568,
                    587
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/workflowStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            },
            {
                "method_name": "deleteWorkflow",
                "method_begin": "deleteWorkflow()",
                "method_end": "}))",
                "range": [
                    587,
                    616
                ],
                "parameters": [],
                "file_path": "/datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/src/stores/workflowStore.js",
                "returnType": "NA",
                "if_api_url_declaration_file_": [],
                "api_end_point": [],
                "inter_service_api_call": [],
                "global_uses": [],
                "local_uses": []
            }
        ],
        "text_details_": []
    },
    ".//datadrive/IMPACT_ANALYSIS/IKG/code_db/idp-frontend/webpack.config.js": {
        "method_details_": [],
        "text_details_": []
    }
}