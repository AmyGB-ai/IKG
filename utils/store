FINDING RANGE-> addtoDB.py trigger_dependency_analysis.py
FINDING RANGE-> basic_generateXLMetaData.py trigger_dependency_analysis.py
FINDING RANGE-> createJsonFeats.py trigger_dependency_analysis.py
FINDING RANGE-> db_utils.py trigger_dependency_analysis.py
FINDING RANGE-> fetchLLMResponse.py trigger_dependency_analysis.py
FINDING RANGE-> findKeys.py trigger_dependency_analysis.py
FINDING RANGE-> firstpass.py trigger_dependency_analysis.py
FINDING RANGE-> qdrant_db_flask_server.py trigger_dependency_analysis.py
FINDING RANGE-> test_api_app.py trigger_dependency_analysis.py
FINDING RANGE-> ocr_api_app.py trigger_dependency_analysis.py
FINDING RANGE-> test2_api_app.py trigger_dependency_analysis.py
FINDING RANGE-> main_multi_prod.py trigger_dependency_analysis.py
FINDING RANGE-> pca_test.py trigger_dependency_analysis.py
FINDING RANGE-> query_gpt_via_groq.py trigger_dependency_analysis.py
FINDING RANGE-> query_llama3_via_groq.py trigger_dependency_analysis.py
FINDING RANGE-> readSS.py trigger_dependency_analysis.py
FINDING RANGE-> searchDB.py trigger_dependency_analysis.py
FINDING RANGE-> testChunking.py trigger_dependency_analysis.py
FINDING RANGE-> testMonkey.py trigger_dependency_analysis.py
FINDING RANGE-> test_config_py_usage.py trigger_dependency_analysis.py
FINDING RANGE-> validate_search.py trigger_dependency_analysis.py
TRACEBACK-> Traceback (most recent call last):
  File "/datadrive/IKG/utils/LLM_INTERFACE/chunking_utils.py", line 192, in createChunkInChangeFile
    begin_ln_, end_ln_ = findRange( file_nm_, method_nm_, method_summary_ )
ValueError: not enough values to unpack (expected 2, got 0)

FINDING RANGE-> addtoDB.py github_monitor.py
FINDING RANGE-> basic_generateXLMetaData.py github_monitor.py
FINDING RANGE-> createJsonFeats.py github_monitor.py
FINDING RANGE-> db_utils.py github_monitor.py
FINDING RANGE-> fetchLLMResponse.py github_monitor.py
FINDING RANGE-> findKeys.py github_monitor.py
FINDING RANGE-> firstpass.py github_monitor.py
FINDING RANGE-> qdrant_db_flask_server.py github_monitor.py
FINDING RANGE-> test_api_app.py github_monitor.py
FINDING RANGE-> ocr_api_app.py github_monitor.py
FINDING RANGE-> test2_api_app.py github_monitor.py
FINDING RANGE-> main_multi_prod.py github_monitor.py
FINDING RANGE-> pca_test.py github_monitor.py
FINDING RANGE-> query_gpt_via_groq.py github_monitor.py
FINDING RANGE-> query_llama3_via_groq.py github_monitor.py
FINDING RANGE-> readSS.py github_monitor.py
FINDING RANGE-> searchDB.py github_monitor.py
FINDING RANGE-> testChunking.py github_monitor.py
FINDING RANGE-> testMonkey.py github_monitor.py
FINDING RANGE-> test_config_py_usage.py github_monitor.py
FINDING RANGE-> validate_search.py github_monitor.py
TRACEBACK-> Traceback (most recent call last):
  File "/datadrive/IKG/utils/LLM_INTERFACE/chunking_utils.py", line 192, in createChunkInChangeFile
    begin_ln_, end_ln_ = findRange( file_nm_, method_nm_, method_summary_ )
ValueError: not enough values to unpack (expected 2, got 0)

FINDING RANGE-> addtoDB.py github_monitor.py
FINDING RANGE-> basic_generateXLMetaData.py github_monitor.py
FINDING RANGE-> createJsonFeats.py github_monitor.py
FINDING RANGE-> db_utils.py github_monitor.py
FINDING RANGE-> fetchLLMResponse.py github_monitor.py
FINDING RANGE-> findKeys.py github_monitor.py
FINDING RANGE-> firstpass.py github_monitor.py
FINDING RANGE-> qdrant_db_flask_server.py github_monitor.py
FINDING RANGE-> test_api_app.py github_monitor.py
FINDING RANGE-> ocr_api_app.py github_monitor.py
FINDING RANGE-> test2_api_app.py github_monitor.py
FINDING RANGE-> main_multi_prod.py github_monitor.py
FINDING RANGE-> pca_test.py github_monitor.py
FINDING RANGE-> query_gpt_via_groq.py github_monitor.py
FINDING RANGE-> query_llama3_via_groq.py github_monitor.py
FINDING RANGE-> readSS.py github_monitor.py
FINDING RANGE-> searchDB.py github_monitor.py
FINDING RANGE-> testChunking.py github_monitor.py
FINDING RANGE-> testMonkey.py github_monitor.py
FINDING RANGE-> test_config_py_usage.py github_monitor.py
FINDING RANGE-> validate_search.py github_monitor.py
TRACEBACK-> Traceback (most recent call last):
  File "/datadrive/IKG/utils/LLM_INTERFACE/chunking_utils.py", line 192, in createChunkInChangeFile
    begin_ln_, end_ln_ = findRange( file_nm_, method_nm_, method_summary_ )
ValueError: not enough values to unpack (expected 2, got 0)

STAGE1-> self chunking :=  [{'file': 'trigger_dependency_analysis.py', 'old_start': 48, 'old_length': 9, 'new_start': 48, 'new_length': 11, 'old_code': ["            print('DUMM->', line)\n", "                current_file = re.search(r'b/(.*)', line).group(1)\n", '-- a/utils/github_monitor.py\n'], 'new_code': ["                match = re.search(r'diff --git a/(.*) b/(.*)', line)\n", '                if match:\n', '                    current_file = match.group(2)\n', "                    print('DUMM->', current_file )\n", '++ b/utils/github_monitor.py\n'], 'method_class_nm_old': {'class_nm': None, 'method_nm': 'parse_diff_file'}, 'method_class_nm_new': {'class_nm': None, 'method_nm': 'parse_diff_file'}}, {'file': 'utils/github_monitor.py', 'old_start': 11, 'old_length': 8, 'new_start': 11, 'new_length': 8, 'old_code': ["REPO_OWNER = os.getenv('REPO_OWNER') \n", "REPO_NAME = os.getenv('REPO_NAME')\n"], 'new_code': ['REPO_OWNER = "AmyGB-ai" \n', 'REPO_NAME = "IKG"\n'], 'method_class_nm_old': {'class_nm': None, 'method_nm': None}, 'method_class_nm_new': {'class_nm': None, 'method_nm': None}}, {'file': 'utils/github_monitor.py', 'old_start': 57, 'old_length': 7, 'new_start': 57, 'new_length': 6, 'old_code': ['\n'], 'new_code': [], 'method_class_nm_old': {'class_nm': None, 'method_nm': 'get_latest_successful_run_id'}, 'method_class_nm_new': {'class_nm': None, 'method_nm': 'get_latest_successful_run_id'}}]
Traversal Beginning-> parse_diff_file /datadrive/IKG/trigger_dependency_analysis.py 
        MATCH ( startNode:Method { method_name: "parse_diff_file", file_name: "/datadrive/IKG/trigger_dependency_analysis.py" } )
        CALL apoc.path.subgraphNodes(startNode, {
            relationshipFilter: "global_uses>",
            minLevel: 1
        }) YIELD node
        RETURN node
        
Traversal Beginning-> parse_diff_file /datadrive/IKG/trigger_dependency_analysis.py 
        MATCH ( startNode:Method { method_name: "parse_diff_file", file_name: "/datadrive/IKG/trigger_dependency_analysis.py" } )
        CALL apoc.path.subgraphNodes(startNode, {
            relationshipFilter: "local_uses>",
            minLevel: 1
        }) YIELD node
        RETURN node
        
HULLO ALLO-> [
    {
        "file": "trigger_dependency_analysis.py",
        "old_start": 48,
        "old_length": 9,
        "new_start": 48,
        "new_length": 11,
        "old_code": [
            "            print('DUMM->', line)\n",
            "                current_file = re.search(r'b/(.*)', line).group(1)\n",
            "-- a/utils/github_monitor.py\n"
        ],
        "new_code": [
            "                match = re.search(r'diff --git a/(.*) b/(.*)', line)\n",
            "                if match:\n",
            "                    current_file = match.group(2)\n",
            "                    print('DUMM->', current_file )\n",
            "++ b/utils/github_monitor.py\n"
        ],
        "method_class_nm_old": {
            "class_nm": null,
            "method_nm": "parse_diff_file"
        },
        "method_class_nm_new": {
            "class_nm": null,
            "method_nm": "parse_diff_file"
        },
        "base_change_impact": "",
        "base_change_criticality": "NA"
    },
    {
        "file": "utils/github_monitor.py",
        "old_start": 11,
        "old_length": 8,
        "new_start": 11,
        "new_length": 8,
        "old_code": [
            "REPO_OWNER = os.getenv('REPO_OWNER') \n",
            "REPO_NAME = os.getenv('REPO_NAME')\n"
        ],
        "new_code": [
            "REPO_OWNER = \"AmyGB-ai\" \n",
            "REPO_NAME = \"IKG\"\n"
        ],
        "method_class_nm_old": {
            "class_nm": null,
            "method_nm": null
        },
        "method_class_nm_new": {
            "class_nm": null,
            "method_nm": null
        }
    },
    {
        "file": "utils/github_monitor.py",
        "old_start": 57,
        "old_length": 7,
        "new_start": 57,
        "new_length": 6,
        "old_code": [
            "\n"
        ],
        "new_code": [],
        "method_class_nm_old": {
            "class_nm": null,
            "method_nm": "get_latest_successful_run_id"
        },
        "method_class_nm_new": {
            "class_nm": null,
            "method_nm": "get_latest_successful_run_id"
        }
    }
] <Response [200]>
BEFORE EMAIL SEND PAYLOAD-> {'subject': 'IMPACT ANALYSIS: Changes in trigger_dependency_analysis.py Criticality: NA', 'body': 'No IMPACT of the changes mentioned in the header!', 'emails': 'vikram@amygb.ai'}
<Response [200]>
Traversal Beginning-> get_latest_successful_run_id /datadrive/IKG/utils/github_monitor.py 
        MATCH ( startNode:Method { method_name: "get_latest_successful_run_id", file_name: "/datadrive/IKG/utils/github_monitor.py" } )
        CALL apoc.path.subgraphNodes(startNode, {
            relationshipFilter: "global_uses>",
            minLevel: 1
        }) YIELD node
        RETURN node
        
Traversal Beginning-> get_latest_successful_run_id /datadrive/IKG/utils/github_monitor.py 
        MATCH ( startNode:Method { method_name: "get_latest_successful_run_id", file_name: "/datadrive/IKG/utils/github_monitor.py" } )
        CALL apoc.path.subgraphNodes(startNode, {
            relationshipFilter: "local_uses>",
            minLevel: 1
        }) YIELD node
        RETURN node
        
HULLO ALLO-> [
    {
        "file": "trigger_dependency_analysis.py",
        "old_start": 48,
        "old_length": 9,
        "new_start": 48,
        "new_length": 11,
        "old_code": [
            "            print('DUMM->', line)\n",
            "                current_file = re.search(r'b/(.*)', line).group(1)\n",
            "-- a/utils/github_monitor.py\n"
        ],
        "new_code": [
            "                match = re.search(r'diff --git a/(.*) b/(.*)', line)\n",
            "                if match:\n",
            "                    current_file = match.group(2)\n",
            "                    print('DUMM->', current_file )\n",
            "++ b/utils/github_monitor.py\n"
        ],
        "method_class_nm_old": {
            "class_nm": null,
            "method_nm": "parse_diff_file"
        },
        "method_class_nm_new": {
            "class_nm": null,
            "method_nm": "parse_diff_file"
        },
        "base_change_impact": "",
        "base_change_criticality": "NA"
    },
    {
        "file": "utils/github_monitor.py",
        "old_start": 11,
        "old_length": 8,
        "new_start": 11,
        "new_length": 8,
        "old_code": [
            "REPO_OWNER = os.getenv('REPO_OWNER') \n",
            "REPO_NAME = os.getenv('REPO_NAME')\n"
        ],
        "new_code": [
            "REPO_OWNER = \"AmyGB-ai\" \n",
            "REPO_NAME = \"IKG\"\n"
        ],
        "method_class_nm_old": {
            "class_nm": null,
            "method_nm": null
        },
        "method_class_nm_new": {
            "class_nm": null,
            "method_nm": null
        }
    },
    {
        "file": "utils/github_monitor.py",
        "old_start": 57,
        "old_length": 7,
        "new_start": 57,
        "new_length": 6,
        "old_code": [
            "\n"
        ],
        "new_code": [],
        "method_class_nm_old": {
            "class_nm": null,
            "method_nm": "get_latest_successful_run_id"
        },
        "method_class_nm_new": {
            "class_nm": null,
            "method_nm": "get_latest_successful_run_id"
        },
        "base_change_impact": "",
        "base_change_criticality": "NA"
    }
] <Response [200]>
BEFORE EMAIL SEND PAYLOAD-> {'subject': 'IMPACT ANALYSIS: Changes in utils/github_monitor.py Criticality: NA', 'body': 'No IMPACT of the changes mentioned in the header!', 'emails': 'vikram@amygb.ai'}
<Response [200]>
